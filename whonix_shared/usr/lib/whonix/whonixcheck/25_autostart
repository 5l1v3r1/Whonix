#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

check_autostart() {
   trap "error_handler" ERR

   ## This script gets run by:
   ## - /etc/profile.d/
   ## - /etc/xdg/autostart/whonixcheck.desktop
   ## - /etc/cron.d/

   ## If it was not autostarted the user is free to re-run the checks.
   if [ "$manualrun" = "1" ]; then
      return 0
   fi

   ## Random delay, unless started with --sleepseconds, which is the default.
   ## --sleepseconds is only a debugging option.
   if [ "$SLEEP_SECONDS" = "" ]; then
      ## To prevent issuing leaving a clear network fingerprint,
      ## we add a random delay.

      ## Random delay between 0 and 500 seconds.
      local DELAY="$(( 100+($(od -An -N2 -i /dev/random) )%(300-0+1) ))"

      ## 60 seconds minimum delay.
      local DELAY="$(expr "$DELAY" + "60")" || true

      ## For debugging.
      #local DELAY="10"
   else
      DELAY="$SLEEP_SECONDS"
   fi

   if [ "$NOCHECKLASTRUN" = "1" ]; then
      RECENTLY_RUN="0"
   fi

   if [ "$RECENTLY_RUN" = "0" ]; then
      if [ "$NOSLEEP" = "1" ]; then
         return 0
      else
         local temp="$SCRIPTNAME has not been completed for more than one day. Running $SCRIPTNAME again in "$DELAY" seconds...

You can also cancel waiting and manually start $SCRIPTNAME right away."

         local MSG="$temp"

         $output ${output_opts[@]} --waitmessagecli --typecli "info" --titlecli "$TITLE" --message "$MSG" --done

         local MSG="$temp

$NOTIFY_MSG"

         local tmp="$(mktemp)"
         local progressbaridx="${tmp##*.}"

         $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --titlex "$TITLE" --message "$MSG" --done

         local wait
         wait="0"

         local waitprogress
         waitprogress="0"

         ## Debugging.
         #DELAY=30

         while true; do
            if [ "$wait" -ge "$DELAY" ]; then
               break
            fi
            local wait="$(expr "$wait" + "1")" || true
            local waitprogress="$(expr "$waitprogress" + "1")" || true

            if [ "$waitprogress" -ge "100" ]; then
               local waitprogress="0"
            fi

            $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "$waitprogress"

            ## Using wait, so we can still react on signal SIGTERM.
            ## "|| true", so the sleep process can be killed for debugging.
            sleep ".500" &
            wait "$!" || true
         done

         $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"

         return 0
      fi
   else
      ## The check_whonixcheck_lastrun function told us, that whonixcheck has
      ## recently completed (using the
      ## "/var/lib/whonix/whonixcheck/"$SCRIPTNAME"_lastrun" status file),
      ## create the recently_run status file.
      sudo -u user touch "/var/run/whonix/whonixcheck/"$SCRIPTNAME"_recently_run"

      ## If it was run in daemon mode and there is nothing to tell, say nothing,
      ## only send a debug message, if debugging is enabled.
      if [ "$DAEMON" = "1" ]; then
         local MSG="$SCRIPTNAME started in daemon mode. $SCRIPTNAME checks completed $DIFFERENCE seconds ago. No need to run again."

         ## Debugging.
         ## TODO: Remove
         $output ${output_opts[@]} --passivepopupqueuex --typex "info" --titlex "$TITLE" --message "$MSG" --done
         ## --done not necessary, the cleanup function will do that.
         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

         EXIT_CODE="0"
         cleanup "1"
         return 0
      else
         ## Autostarted...
         ## (Not manualrun, we checked that at the top already.)

         local MSG="No need to run $SCRIPTNAME, was run less than one day ago. You could still start $SCRIPTNAME manually."
         $output ${output_opts[@]} --passivepopupqueuex --typex "info" --titlex "$TITLE" --message "$MSG" --done

         ## --done not necessary, the cleanup function will do that.
         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

         EXIT_CODE="0"
         cleanup "1"
         return 0
      fi
   fi
}
