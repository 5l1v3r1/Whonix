#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

ex_funct() {
   trap "error_handler" ERR

   local pid

   ## This will include the pgrep child process itself.
   local pgrep_result="$(pgrep --parent "$$")"

   ## Debugging.
   ## Won't show the pgrep process itself, since that necessarily terminated already at this point.
   local ps_p_result="$(ps -p $pgrep_result)"

   for pid in $pgrep_result; do
      ## >/dev/null 2>/dev/null to prevent seeing error due to race conditions (process in meanwhile already terminated) and
      ## due to trying to kill the pgrep process which was already terminated.
      kill -sigterm "$pid" >/dev/null 2>/dev/null || true
   done

   local i=0

   ## Give remaining processes up to 5 seconds after sending signal sigterm (above) before killing them sending signal sigkill.
   while true; do
      i="$(expr $i + 1)"
      local pgrep_result="$(pgrep --parent "$$")"

      ## Debugging.
      local ps_p_result="$(ps -p $pgrep_result)"

      ## Create a local variable j, which holds how many pids are in pgrep_result.
      local j=0
      for pid in $pgrep_result; do
         local j="$(expr "$j" + 1)"
      done

      ## If there is only one pid in pgrep_result, it will be pgrep itself,
      ## which necessarily already terminated at this point.
      if [ "$j" = "1" ]; then
         break
      fi
      if [[ "$i" < "5" ]]; then
         sleep 1 &
         wait "$!"
         continue
      fi

      for pid in $pgrep_result; do
         ## >/dev/null 2>/dev/null to prevent seeing error due to race conditions (process in meanwhile already terminated) and
         ## due to trying to kill the pgrep process which was already terminated.
         kill -sigkill "$pid" >/dev/null 2>/dev/null || true
      done

   done

   rm --force "/var/run/whonix/whonixcheck/${IDENTIFIER}_running"
   rm --force "/var/run/whonix/whonixcheck/${IDENTIFIER}_waiting"
   #rm --force "/var/run/whonix/whonixcheck/${IDENTIFIER}_pid"

   ## Check if $output command has been already defined. This is not the case,
   ## when the script is terminated very early.
   local command_v_output_return="0"
   command -v "$output" >/dev/null || { local command_v_output_return="$?" ; true; };
   if [ "$command_v_output_return" = "0" ]; then
      $output ${output_opts[@]} --progressbaridx "$progressbaridx_main" --progressx "100"
      $output ${output_opts[@]} --messagex --done
      $output ${output_opts[@]} --messagecli --done
   fi
   exit 0
}

trap_sigterm() {
   trap "error_handler" ERR

   echo "$SCRIPTNAME: SIGTERM received. Exiting."
   ex_funct
}

trap "trap_sigterm" SIGTERM

trap_sigint() {
   trap "error_handler" ERR

   echo "$SCRIPTNAME: SIGINT received. Exiting."
   ex_funct
}

trap "trap_sigint" SIGINT

cleanup() {
   trap "error_handler" ERR

   true "cleanup function..."

   $output ${output_opts[@]} --progressbaridx "$progressbaridx_main" --progressx "100"

   rm --force "/var/run/whonix/whonixcheck/${IDENTIFIER}_running"
   rm --force "/var/run/whonix/whonixcheck/${IDENTIFIER}_waiting"

   touch "/var/run/whonix/whonixcheck/${IDENTIFIER}_done"

   sync

   ## The "Please feel free to press <enter> to return back to your normal prompt."
   ## message is not necessary when manually started.
   if [ ! "$manualrun" = "1" ]; then
      ## Not manually started.
      local MSG="Please feel free to press <enter> to return back to your normal prompt."
      $output ${output_opts[@]} --messagecli --typecli "info" --titlex "$TITLE" --message "$MSG"
   fi

   $output ${output_opts[@]} --messagex --done
   $output ${output_opts[@]} --messagecli --done

   cd ..

   ## default exit code
   if [ "$EXIT_CODE" = "" ]; then
      EXIT_CODE="0"
   fi

   if [ "$1" = "1" ]; then
      true "END"
      exit "$EXIT_CODE"
   fi
}
