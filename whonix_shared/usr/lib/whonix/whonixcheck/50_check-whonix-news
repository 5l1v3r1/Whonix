#!/bin/bash

download_whonix_news() {
   trap "error_handler" ERR

   SOCKS_PORT_WHONIX_NEWS="9114"

   local MSG="Checking for Whonix news and updates..."
   output "--info" "$MSG" "echo"

   DOWNLOAD_NEWS_RETURN="0"
   ## sf.net does not yet support ssl for project web.
   ## --location is required since sf.net uses redirects.
   $CURL \
      $CURL_VERBOSE \
      --socks5-hostname socks5h://"$GATEWAY_IP":"$SOCKS_PORT_WHONIX_NEWS"/ \
      --location \
      --max-time 300 \
      --output "$VERIFY_TEMPDIR/whonix_news.asc" \
      "http://sourceforge.net/projects/whonix/files/news/whonix_news.asc/download" \
      || { DOWNLOAD_NEWS_RETURN="$?" ; true; };   

   if [ ! "$DOWNLOAD_NEWS_RETURN" = "0" ]; then
      local MSG="Could not download Whonix News. (Code: "$DOWNLOAD_NEWS_RETURN")"
      output "--error" "$MSG" "both"
   fi
}

verify_whonix_news() {
   trap "error_handler" ERR

   ## If news could not be downloaded, do not try to verify it.
   if [ ! "$DOWNLOAD_NEWS_RETURN" = "0" ]; then
      return 0
   fi
   
   NEWS_VERIFY_RETURN="0"

   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --fingerprint \
      2>/dev/null \
      || { NEWS_VERIFY_RETURN="$?" ; true; };
      
   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --import /usr/share/whonix/keys/whonix-keys.d/* \
      2>/dev/null \
      || { NEWS_VERIFY_RETURN="$?" ; true; };
      
   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --decrypt "$VERIFY_TEMPDIR/whonix_news.asc" \
      2>/dev/null \
      > "$VERIFY_TEMPDIR/whonix_news" \
      || { NEWS_VERIFY_RETURN="$?" ; true; };

   if [ "$NEWS_VERIFY_RETURN" = "0" ]; then
      local MSG="Successfully verified whonix_news.asc with adrelanos's GPG key."
      output "--info" "$MSG" "debug"
   else
      local MSG="Could not gpg verify authenticity of Whonix News!!! (Code: "$NEWS_VERIFY_RETURN")
This is either a Whonix Bug or an attack on Whonix!!!"
      output "--error" "$MSG" "both"
   fi
}

check_whonix_version() {
   trap "error_handler" ERR

   ## If news could not be downloaded, do not check Whonix version.
   if [ ! "$DOWNLOAD_NEWS_RETURN" = "0" ]; then
      return 0
   fi
   
   ## If news verification failed, do not check Whonix version.
   if [ ! "$NEWS_VERIFY_RETURN" = "0" ]; then
      return 0
   fi
   
   local i="0"
   while read LINE; do
      let i "i=i+1" || true
      #echo "$i: $LINE"
      if [ "$i" = "1" ]; then
         LATEST_WHONIX_VERSION="$LINE"
      fi
   done < "$VERIFY_TEMPDIR/whonix_news"

   ## TODO improve
   if [ "$INSTALLED_WHONIX_VERSION" = "$LATEST_WHONIX_VERSION" ]; then
      ## Up to date...
      local MSG="Installed Whonix Version $INSTALLED_WHONIX_VERSION is up to date."
      output "--info" "$MSG" "both"
      return 0
   fi

   ## Outdated...
   local MSG="Installed Whonix version $INSTALLED_WHONIX_VERSION. Latest Whonix version $LATEST_WHONIX_VERSION. Please update Whonix!!!"
   output "--error" "$MSG" "both"
}

check_whonix_news() {
   trap "error_handler" ERR

   ## If news could not be downloaded, do not check Whonix news.
   if [ ! "$DOWNLOAD_NEWS_RETURN" = "0" ]; then
      return 0
   fi
   
   ## If news verification failed, do not check Whonix news.
   if [ ! "$NEWS_VERIFY_RETURN" = "0" ]; then
      return 0
   fi

   local MSG=""
   local i="0"
   while read LINE; do
      let i "i=i+1" || true
      #echo "pre i: $i"
      [ "$i" -lt "3" ] && continue
      #echo "post i: $i"
      #echo "LINE: $LINE"

      if [ "$i" = "3" ]; then
         local MSG="$LINE"
      else
         local MSG="$MSG
$LINE"
      fi
   done < "$VERIFY_TEMPDIR/whonix_news"

   output "--info" "$MSG" "both"
}

