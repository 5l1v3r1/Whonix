#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

download_whonix_news() {
   trap "error_handler" ERR

   SOCKS_PORT_WHONIX_NEWS="9114"

   local MSG="Whonix News Download: Checking for Whonix news and updates..."
   $output ${output_opts[@]} --channel "echo" --type "info" --title "$TITLE" --message "$MSG"

   mkdir --parents "$VERIFY_TEMPDIR/news"

   declare -A -g whonix_news_link_list
   declare -A -g whonix_news_download_return
   declare -A -g whonix_news_verify_return

   whonix_news_link_list[http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news_v3/whonix_news.tar.gz.asc/download]="whonix_news.tar.gz.asc"

   whonix_news_link_list[http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news_v3/whonix_news.tar.gz/download]="whonix_news.tar.gz"

   ## sf.net does not support ssl.
   ## --location is required since sf.net uses redirects to mirrors.

   local link

   for link in "${!whonix_news_link_list[@]}"; do
      local filename="${whonix_news_link_list[$link]}"

      true "link: $link"
      true "filename: $filename"

      whonix_news_download_return[$link]="0"

      $CURL \
         $CURL_VERBOSE \
         --fail \
         --socks5-hostname socks5h://"$GATEWAY_IP":"$SOCKS_PORT_WHONIX_NEWS"/ \
         --location \
         --max-time 180 \
         --output "$VERIFY_TEMPDIR/news/$filename" \
         "$link" \
         &

      wait "$!" || { whonix_news_download_return[$link]="$?" ; true; };

      if [ ! "${whonix_news_download_return[$link]}" = "0" ]; then
         local curl_status_message="$(/usr/lib/whonix/curl_return_codes "${whonix_news_download_return[$link]}")"
         local MSG="Whonix News Result: Could not download Whonix News File "$filename". (curl return code: "$curl_status_message")"
         $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
         return 0
      fi

   done

   verify_whonix_news

   if [ ! "$whonix_news_verify_return" = "0" ]; then
      true "$0 WARNING: whonix_news_verify_return is not 0, it is $whonix_news_verify_return, return"
      return 0
   fi

   extract_whonix_news

   if [ ! "$whonix_news_tar_return" = "0" ]; then
      true "$0 ERROR: whonix_news_tar_return is not 0, it is $whonix_news_tar_return, return"
      return 0
   fi

   check_whonix_debian_version
   check_whonix_build_version
   check_whonix_debian_news
   check_whonix_build_news
}

verify_whonix_news() {
   trap "error_handler" ERR

   whonix_news_verify_return_GENERAL="0"

   true "a whonix_news_verify_return_GENERAL: $whonix_news_verify_return_GENERAL"

   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --fingerprint \
      >/dev/null 2>/dev/null \
      || { whonix_news_verify_return_GENERAL="$?" ; true; };

   true "b whonix_news_verify_return_GENERAL: $whonix_news_verify_return_GENERAL"

   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --import /usr/share/whonix/keys/whonix-keys.d/* \
      2>/dev/null \
      || { whonix_news_verify_return_GENERAL="$?" ; true; };

   true "c whonix_news_verify_return_GENERAL: $whonix_news_verify_return_GENERAL"

   if [ ! "$whonix_news_verify_return_GENERAL" = "0" ]; then
      local MSG="Whonix News Download Result:
General Whonix News OpenPGP Verification Error. Please report this bug!"
         $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      return 0
   fi

   whonix_news_verify_return="0"

   true "d whonix_news_verify_return: ${whonix_news_verify_return}"

   local filename="whonix_news.tar.gz"
   local signature="whonix_news.tar.gz.asc"

   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --verify "$VERIFY_TEMPDIR/news/$signature" \
      2>/dev/null \
      || { whonix_news_verify_return="$?" ; true; };

   true "e whonix_news_verify_return: ${whonix_news_verify_return}"

   if [ "${whonix_news_verify_return}" = "0" ]; then
      local MSG="Whonix News Download: Successfully verified $filename via OpenPGP."
      #$output ${output_opts[@]} --channel "debug" --type "info" --title "$TITLE" --message "$MSG"
   else
      local MSG="Whonix News Download Result:
Could not OpenPGP verify authenticity of Whonix News $filename!!!
(gpg return code: "${whonix_news_verify_return}")
This is either a Whonix Bug or an attack on Whonix!!!"
         $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
   fi

}

extract_whonix_news() {
   trap "error_handler" ERR

   local filename="whonix_news.tar.gz"

   whonix_news_tar_return="0"

   tar -xvzf "$VERIFY_TEMPDIR/news/$filename" -C "$VERIFY_TEMPDIR/news/" . >/dev/null || { whonix_news_tar_return="$?" ; true; };

   if [ ! "$whonix_news_tar_return" = "0" ]; then
      local MSG="Whonix News Download Result:
Could not OpenPGP extract $filename!
(tar return code: "${whonix_news_tar_return}")
Please report this bug!"
         $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      return 0
   fi

   ## Debugging.
   #ls -la "$VERIFY_TEMPDIR/news/"
}

check_whonix_debian_version() {
   trap "error_handler" ERR

   ## TODO: Check if file exists.

   local outdated_deb="1"

   while read LINE; do
      #true "$i: $LINE"
      if [ "$whonix_deb_package_version" = "$LINE" ]; then
         outdated_deb="0"
      fi
   done < "$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_valid_deb_versions"

   if [ "$outdated_deb" = "0" ]; then
      ## Up to date...
      local MSG="Whonix News Download Result: Installed Whonix Debian Package $whonix_deb_package_version is up to date."
      $output ${output_opts[@]} --channel "both" --type "info" --title "$TITLE" --message "$MSG"
   else
      ## Outdated...
      local MSG="Whonix News Download Result:
Installed Whonix Debian Package $whonix_deb_package_version is outdated! You can automatically update using Whonix's internal updater. Please update using:
sudo apt-get update && sudo apt-get dist-upgrade"
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
   fi
}

check_whonix_build_version() {
   trap "error_handler" ERR

   ## TODO: Check if file exists.

   local outdated_build="1"

   while read LINE; do
      #true "$i: $LINE"
      if [ "$whonix_build_version" = "$LINE" ]; then
         outdated_build="0"
      fi
   done < "$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_valid_build_versions"

   if [ "$outdated_build" = "0" ]; then
      ## Up to date...
      local MSG="Whonix News Download Result: Installed Whonix Build $whonix_build_version is up to date."
      $output ${output_opts[@]} --channel "both" --type "info" --title "$TITLE" --message "$MSG"
   else
      ## Outdated...
      local MSG="Whonix News Download Result:
Whonix Build $whonix_build_version is outdated!
Sorry, automatically updating this Whonix version is not possible. You have to manually download a new Whonix image."
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
   fi
}

check_whonix_debian_news() {
   trap "error_handler" ERR

   ## TODO: Check if file exists.

   local MSG="$(cat "$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_${whonix_deb_package_version}_deb_news")"

   if [ "$MSG" = "" ]; then
      true
   else
      $output ${output_opts[@]} --channel "both" --type "info" --title "$TITLE" --message "$MSG"
   fi
}

check_whonix_build_news() {
   trap "error_handler" ERR

   ## TODO: Check if file exists.

   local MSG="$(cat "$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_${whonix_build_version}_build_news")"

   if [ "$MSG" = "" ]; then
      true
   else
      $output ${output_opts[@]} --channel "both" --type "info" --title "$TITLE" --message "$MSG"
   fi
}
