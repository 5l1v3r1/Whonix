#!/bin/bash

download_whonix_news() {
   trap "error_handler" ERR

   SOCKS_PORT_WHONIX_NEWS="9114"

   local MSG="Checking for Whonix news and updates..."
   output "--info" "$MSG" "echo"
   
   mkdir --parents ""$VERIFY_TEMPDIR"/news"
   
   declare -A -g WHONIX_NEWS_LINK_LIST
   
   WHONIX_NEWS_LINK_LIST["http://sourceforge.net/projects/whonix/files/internal/news/whonix_news_valid_build_versions.asc/download"]="whonix_news_valid_build_versions.asc"
   WHONIX_NEWS_LINK_LIST["http://sourceforge.net/projects/whonix/files/internal/news/whonix_news_valid_deb_versions.asc/download"]="whonix_news_valid_deb_versions.asc"
   WHONIX_NEWS_LINK_LIST["http://sourceforge.net/projects/whonix/files/internal/news/whonix_news_"$WHONIX_BUILD_VERSION"_build_news.asc/download"]="whonix_news_"$WHONIX_BUILD_VERSION"_build_news.asc"
   WHONIX_NEWS_LINK_LIST["http://sourceforge.net/projects/whonix/files/internal/news/whonix_news_"$INSTALLED_WHONIX_VERSION"_deb_news.asc/download"]="whonix_news_"$INSTALLED_WHONIX_VERSION"_deb_news.asc"   

   ## sf.net does not support ssl.
   ## --location is required since sf.net uses redirects to mirrors.
   
   for LINK in "${!WHONIX_NEWS_LINK_LIST[@]}"; do
      FILENAME="${WHONIX_NEWS_LINK_LIST[$LINK]}"

      true "link: $LINK"
      true "filename: $FILENAME"

      DOWNLOAD_NEWS_RETURN="0"

      $CURL \
         $CURL_VERBOSE \
         --socks5-hostname socks5h://"$GATEWAY_IP":"$SOCKS_PORT_WHONIX_NEWS"/ \
         --location \
         --max-time 180 \
         --output ""$VERIFY_TEMPDIR"/news/"$FILENAME"" \
         "$LINK" \
         || { DOWNLOAD_NEWS_RETURN="$?" ; true; };

      if [ ! "$DOWNLOAD_NEWS_RETURN" = "0" ]; then
         local MSG="Could not download Whonix News File "$FILENAME". (curl return code: "$DOWNLOAD_NEWS_RETURN")"
         output "--error" "$MSG" "both"
      fi
   
   done
}

verify_whonix_news() {
   trap "error_handler" ERR

   ## If news could not be downloaded, do not try to verify it.
   if [ ! "$DOWNLOAD_NEWS_RETURN" = "0" ]; then
      return 0
   fi
   
   NEWS_VERIFY_RETURN="0"

   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --fingerprint \
      >/dev/null 2>/dev/null \
      || { NEWS_VERIFY_RETURN="$?" ; true; };
      
   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --import /usr/share/whonix/keys/whonix-keys.d/* \
      2>/dev/null \
      || { NEWS_VERIFY_RETURN="$?" ; true; };

   for LINK in "${!WHONIX_NEWS_LINK_LIST[@]}"; do
      FILENAME="${WHONIX_NEWS_LINK_LIST[$LINK]}"
      base_name="$(basename "$FILENAME" ".asc")"
      
      gpg \
         --homedir "$VERIFY_TEMPDIR" \
         --decrypt ""$VERIFY_TEMPDIR"/news/"$FILENAME"" \
         2>/dev/null \
         > ""$VERIFY_TEMPDIR"/news/"$base_name"" \
         || { NEWS_VERIFY_RETURN="$?" ; true; };

      if [ "$NEWS_VERIFY_RETURN" = "0" ]; then
         local MSG="Successfully verified "$FILENAME" with adrelanos's OpenPGP key."
         output "--info" "$MSG" "debug"
      else
         local MSG="Could not OpenPGP verify authenticity of Whonix News "$FILENAME"!!! (gpg return code: "$NEWS_VERIFY_RETURN")
This is either a Whonix Bug or an attack on Whonix!!!"
         output "--error" "$MSG" "both"
      fi
   done
}

check_whonix_version() {
   trap "error_handler" ERR

   ## If news could not be downloaded, do not check Whonix version.
   if [ ! "$DOWNLOAD_NEWS_RETURN" = "0" ]; then
      return 0
   fi
   
   ## If news verification failed, do not check Whonix version.
   if [ ! "$NEWS_VERIFY_RETURN" = "0" ]; then
      return 0
   fi
   
   local outdated_deb="1"

   while read LINE; do
      #echo "$i: $LINE"
      if [ "$INSTALLED_WHONIX_VERSION" = "$LINE" ]; then
         outdated_deb="0"
      fi
   done < ""$VERIFY_TEMPDIR"/news/whonix_news_valid_deb_versions"

   if [ "$outdated_deb" = "0" ]; then
      ## Up to date...
      local MSG="Installed Whonix Debian Package $INSTALLED_WHONIX_VERSION is up to date."
      output "--info" "$MSG" "both"
   else
      ## Outdated...
      local MSG="Installed Whonix Debian Package $INSTALLED_WHONIX_VERSION is outdated! You can automatically update using Whonix's internal updater. Please update using:
sudo apt-get update && sudo apt-get dist-upgrade"
      output "--error" "$MSG" "both"
   fi
   
   local outdated_build="1"
   
   while read LINE; do
      #echo "$i: $LINE"
      if [ "$WHONIX_BUILD_VERSION" = "$LINE" ]; then
         outdated_build="0"
      fi
   done < ""$VERIFY_TEMPDIR"/news/whonix_news_valid_build_versions"

   if [ "$outdated_build" = "0" ]; then
      ## Up to date...
      local MSG="Installed Whonix Build $WHONIX_BUILD_VERSION is up to date."
      output "--info" "$MSG" "both"
   else
      ## Outdated...
      local MSG="Whonix Build $WHONIX_BUILD_VERSION is outdated!
Sorry, automatically updating this Whonix version is not possible. You have to manually download a new Whonix image."
      output "--error" "$MSG" "both"
   fi
}

check_whonix_news() {
   trap "error_handler" ERR

   ## If news could not be downloaded, do not check Whonix news.
   if [ ! "$DOWNLOAD_NEWS_RETURN" = "0" ]; then
      return 0
   fi
   
   ## If news verification failed, do not check Whonix news.
   if [ ! "$NEWS_VERIFY_RETURN" = "0" ]; then
      return 0
   fi

   local MSG="$(cat ""$VERIFY_TEMPDIR"/news/whonix_news_"$INSTALLED_WHONIX_VERSION"_deb_news")"
   
   if [ "$MSG" = "" ]; then
      true
   else
      output "--info" "$MSG" "both"
   fi

   local MSG="$(cat ""$VERIFY_TEMPDIR"/news/whonix_news_"$WHONIX_BUILD_VERSION"_build_news")"   
   
   if [ "$MSG" = "" ]; then
      true
   else
      output "--info" "$MSG" "both"
   fi
}

