#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

#whonix_shared/usr/lib/whonix/doutput --forget

#whonix_shared/usr/lib/whonix/doutput --channel "both" --message "test message \\ \$ \(" --title "title goes here" --type "warning"

#whonix_shared/usr/lib/whonix/doutput --channel "both" --type "info" --title "test title" --message "wait a bit" --waitmessagecli

#whonix_shared/usr/lib/whonix/doutput --showx

#whonix_shared/usr/lib/whonix/doutput --forgetwait

#whonix_shared/usr/lib/whonix/doutput --progressbar

#whonix_shared/usr/lib/whonix/doutput --progress 100

SCRIPTNAME="$(basename $0)"

feel_free_to_press_enter_msg="Please feel free to press <enter> to return back to your normal prompt."

error_handler() {
   local return_code="$?"

   local MSG="\
###############################################################################
## $SCRIPTNAME script bug.
## No panic. Nothing is broken. Just some rare condition has been hit.
## Try again later. There is likely a solution for this problem.
## Please see Whonix News, Whonix Blog and Whonix User Help Forum.
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## return_code: $return_code
##
## Experts only:
## bash -x $SCRIPTNAME --verbose
## for verbose output. Clean the output and
## submit to Whonix developers.
###############################################################################\
"
   echo "$MSG"
   exit 1
}

output_ex() {
   trap "error_handler" ERR

   ## This function is called when the cancel button in zenity gets pressed.

   if [ "$PARENT_PID" = "" ]; then
      if [ -f "/var/run/whonix/whonixcheck/${IDENTIFIER}_pid" ]; then
         PARENT_PID="$(cat "/var/run/whonix/whonixcheck/${IDENTIFIER}_pid")"
      fi
   fi

   ## Check if still running.
   local ps_return="0"
   ps -p "$PARENT_PID" >/dev/null 2>/dev/null || { local ps_return="$?"; true; };

   if [ "$ps_return" = "0" ]; then
      true "$output_signal_caught caught. Killing PARENT_PID $PARENT_PID."
      kill -SIGTERM "$PARENT_PID"
   else
      true "$output_signal_caught caught. Not killing PARENT_PID $PARENT_PID, because it is already terminated."
   fi

   exit 0
}

output_sighup() {
   output_signal_caught="SIGHUP"
   output_ex
}

trap "output_sighup" SIGHUP

output_sigterm() {
   output_signal_caught="SIGTERM"
   output_ex
}

trap "output_sigterm" SIGTERM

parse_cmd_options() {
   trap "error_handler" ERR

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while :
   do
       case $1 in
           --verbose)
               VERBOSE="1"
               shift
               ;;
           --debug)
               DEBUG="1"
               shift
               ;;
           --identifier)
               IDENTIFIER="$2"
               shift 2
               if [ "${IDENTIFIER}" = "" ]; then
                  echo "$0 ERROR: variable IDENTIFIER is empty."
                  exit 1
               fi
               ;;
           --display)
               display="$2"
               shift 2
               if [ "$display" = "" ]; then
                  echo "$0 ERROR: variable display is empty."
                  exit 1
               fi
               ;;
           --parentpid)
               PARENT_PID="$2"
               shift 2
               if [ "$PARENT_PID" = "" ]; then
                  echo "$0 ERROR: variable PARENT_PID is empty."
                  exit 1
               fi
               ;;
           --progressbar)
               PROGRESSBAR="1"
               shift
               ;;
           --progress)
               PROGRESS="$2"
               shift 2
               if [ "$PROGRESS" = "" ]; then
                  echo "$0 ERROR: variable PROGRESS is empty."
                  exit 1
               fi
               ;;
           --type)
               TYPE="$2"
               shift 2
               if [ "$TYPE" = "" ]; then
                  echo "$0 ERROR: variable TYPE is empty."
                  exit 1
               fi
               ;;
           --channel)
               CHANNEL="$2"
               shift 2
               if [ "$CHANNEL" = "" ]; then
                  echo "$0 ERROR: variable CHANNEL is empty."
                  exit 1
               fi
               ;;
           --message)
               MESSAGE="$2"
               shift 2
               if [ "$MESSAGE" = "" ]; then
                  echo "$0 ERROR: variable MESSAGE is empty."
                  exit 1
               fi
               ;;
           --title)
               TITLE="$2"
               shift 2
               if [ "$TITLE" = "" ]; then
                  echo "$0 ERROR: variable TITLE is empty."
                  exit 1
               fi
               ;;
           --waitmessagecli)
               WAIT_MESSAGE_CLI=1
               shift
               ;;
           --waitmessagex)
               WAIT_MESSAGE_X=1
               shift
               ;;
           --instantecho)
               INSTANT_ECHO="1"
               shift
               ;;
           --noinstantecho)
               INSTANT_ECHO="0"
               shift
               ;;
           --instanttty)
               INSTANT_TTY="1"
               shift
               ;;
           --nonewlinex)
               NONEWLINEX="1"
               shift
               ;;
           --nonewlinecli)
               NONEWLINECLI="1"
               shift
               ;;
           --forget)
               FORGET="1"
               shift
               ;;
           --forgetwait)
               FORGET_WAIT="1"
               shift
               ;;
           --showcli)
               SHOW_CLI="1"
               shift
               ;;
           --showx)
               SHOW_X="1"
               shift
               ;;
           --icon)
               ICON="$2"
               shift 2
               if [ "$ICON" = "" ]; then
                  echo "$0 ERROR: variable ICON is empty."
                  exit 1
               fi
               ;;
           --passive)
               PASSIVE="1"
               shift
               ;;
           --passivequeue)
               PASSIVEQUEUE="1"
               shift
               ;;
           --showpassivequeuex)
               SHOWPASSIVEQUEUEX="1"
               shift
               ;;
           --forceactive)
               FORCE_ACTIVE="1"
               shift
               ;;
           --autostart)
               AUTOSTART="1"
               shift
               ;;
           --lefttop)
               LEFT_TOP="1"
               shift
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $TYPE" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
}

start_progress_bar() {
   trap "error_handler" ERR

   if [ -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_title" ]; then
      local TITLE="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_title")"
   fi

   if [ "$TITLE" = "" ]; then
      local TITLE="Variable TITLE does not exist. Please report this bug!"
   fi

   local FIFO="/var/lib/whonix/whonixcheck/${IDENTIFIER}_fifo"

   ## Clean up eventual old progress bar.
   rm --force "$FIFO"

   sudo -u user mkfifo "$FIFO"

   zenity \
      --display="$display" \
      --timeout "86400" \
      --no-markup \
      --window-icon "$ICON" \
      --title="$TITLE" \
      --auto-kill \
      --auto-close \
      --progress 5 \
      --text "$MESSAGE" \
      < "$FIFO" & ZENITY_PROGRESS_PID="$!"

   ## "2>/dev/null" is required to hide the output "Killed zenity --display..."
   ## later when it gets killed by the progress_bar function.
   exec 3>"$FIFO"

   echo "$ZENITY_PROGRESS_PID" | sudo -u user tee "/var/lib/whonix/whonixcheck/${IDENTIFIER}_zenity_progress_pid" > /dev/null

   if [ "$LEFT_TOP" = "1" ]; then
      output_wmctrl "$TITLE"
   fi

   ## Waiting for SIGHUP.
   ## Happens when zentiy reached 100% or when cancel button is pressed.
   wait
}

## {{ Write to tty1. Using simple lock mechanism so messages from "write" do not get mixed up.
output_write_to_tty() {
   trap "error_handler" ERR

   local lockfile="/var/lib/whonix/whonixcheck/write_lock"

   (
      trap "error_handler" ERR

      ## Use flock to wait up to 60 seconds to acquire an exclusive lock.
      ## fd 200, see man flock
      flock --wait 60 --exclusive 200

      echo "${1+"$@"}
$feel_free_to_press_enter_msg" | write user tty1 2>/dev/null || true

      ## Hold the write lock up to 10 seconds.
      sleep 10

   ) 200>"$lockfile" &
   ## fd 200, see man flock
}
## }}

progress_bar() {
   trap "error_handler" ERR

   if [ -p "/var/lib/whonix/whonixcheck/${IDENTIFIER}_fifo" ]; then
      local FIFO="/var/lib/whonix/whonixcheck/${IDENTIFIER}_fifo"
   else
      return 0
   fi

   if [ -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_zenity_progress_pid" ]; then
      ZENITY_PROGRESS_PID="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_zenity_progress_pid")"
   else
      return 0
   fi

   ## Check if zenity is still running.
   local ps_return="0"
   ps -p "$ZENITY_PROGRESS_PID" >/dev/null 2>/dev/null || { local ps_return="$?"; true; };

   if [ "$ps_return" = "0" ]; then
      ## Zenity pid is still active.

      ## For extra security against freezing while trying to write to a non-existing pipe, let's use timeout.
      ## || true to catch an error if the pipe no longer exists.
      timeout 1 /bin/bash -c "echo "$1" | sudo -u user tee "$FIFO" > /dev/null" || true
   fi
}

fallbacks() {
   if [ "$DISPLAY" = "" ]; then
      NO_X="1"
   fi

   ## Check if zenity is installed.
   ## - This is not the case for cli users,
   ##   who removed zenity or custom builds which never had zenity installed.
   if [ "$(command -v "zenity")" = "" ] || [ "$DISPLAY" = "" ]; then
      ## zenity is not installed or no X server running.
      zenity() {
         ## dummy
         true
      }
   fi

   if [ "$(command -v "wmctrl")" = "" ] || [ "$DISPLAY" = "" ]; then
      ## wmctrl is not installed or no X server running.
      wmctrl() {
         ## dummy
         true
      }
   fi

   if [ "$DISPLAY" = "" ]; then
      ## No X server running.
      kdialog() {
         ## dummy
         true
      }
      notify-send() {
         ## dummy
         true
      }
   fi

   if [ "$display" = "" ]; then
      display="$DISPLAY"
   fi
}

## {{ Small wrapper to use either kdialog, notify-send or nothing.
passive_popup_tool() {
   ## $1 - time
   ## $2 - text

   ## check if kdialog, notify-send or no passive popup tool is installed
   ## - that is not the case for CLI Custom-Workstation users
   ## - that may not be the case for Gnome users
   if [ ! "$(command -v "kdialog")" = "" ] ; then
      kdialog --passivepopup "$2" "$1"
   elif [ ! "$(command -v "notify-send")" = "" ] ; then
      notify-send -t "$1" "$2"
   else
      true
   fi
}
## }}

output() {
   trap "error_handler" ERR

   echo "$TITLE" | sudo -u user tee "/var/lib/whonix/whonixcheck/${IDENTIFIER}_title" > /dev/null

   if [ -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type" ]; then
      OLD_TYPE="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type")"
   fi

   if [ "$TYPE" = "" ]; then
      error "ERROR: You forgot --type."
   fi

   if [ "$TYPE" = "info" ] || [ "$TYPE" = "warning" ] || [ "$TYPE" = "error" ]; then
      true
   else
      error "ERROR: Invalid type. Must be info, warning or error."
   fi

   if [ "$OLD_TYPE" = "info" ]; then
      if [ "$TYPE" = "error" ]; then
         ## Upgrade from info to error.
         echo "error" | sudo -u user tee "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type" > /dev/null
      elif [ "$TYPE" = "warning" ]; then
         ## Upgrade from info to warning.
         echo "warning" | sudo -u user tee "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type" > /dev/null
      fi
   elif [ "$OLD_TYPE" = "warning" ]; then
      if [ "$TYPE" = "error" ]; then
         ## Upgrade from warning to error.
         echo "error" | sudo -u user tee "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type" > /dev/null
      fi
   elif [ "$OLD_TYPE" = "error" ]; then
      true
   else
      echo "$TYPE" | sudo -u user tee "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type" > /dev/null
   fi

   chmod o+w "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type"
   chmod g+w "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type"

   if [ "$PASSIVE" = "1" ]; then
      touch "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passive"
      chmod o+w "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passive"
      chmod g+w "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passive"
   elif [ "$PASSIVEQUEUE" = "1" ]; then
      touch "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_cli"
      chmod o+w "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_cli"
      chmod g+w "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_cli"
      touch "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_x"
      chmod o+w "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_x"
      chmod g+w "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_x"
   else
      rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passive"
   fi

   local file_cli="/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_cli"
   local file_x="/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_x"

   touch "$file_cli"
   chmod g+w "$file_cli"
   chmod o+w "$file_cli"

   touch "$file_x"
   chmod g+w "$file_x"
   chmod o+w "$file_x"

   if [ "$WAIT_MESSAGE_CLI" = "1" ]; then
      local file_cli="/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_cli"
      local file_x="/dev/null"
   fi

   if [ "$WAIT_MESSAGE_X" = "1" ]; then
      local file_cli="/dev/null"
      local file_x="/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_x"
   fi

   if [ "$PASSIVEQUEUE" = "1" ]; then
      local file_cli="/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_cli"
      local file_x="/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_x"
   fi

   if [ "$CHANNEL" = "debug" ]; then
      if [ "$VERBOSE" = "1" ]; then
         if [ "$INSTANT_TTY" = 1 ]; then
            output_write_to_tty "$MESSAGE"
         fi
         if [ "$INSTANT_ECHO" = "1" ]; then
            echo "$MESSAGE"
         fi
      else
         true "$MESSAGE"
      fi
   elif [ "$CHANNEL" = "echo" ]; then
      if [ "$INSTANT_ECHO" = "1" ]; then
         echo "$MESSAGE"
      fi
      if [ "$INSTANT_TTY" = "1" ]; then
         output_write_to_tty "$MESSAGE"
      fi
      if [ "$NONEWLINECLI" = "1" ]; then
         echo "$MESSAGE" | sudo -u user tee --append "$file_cli" > /dev/null
      else
         echo "
$MESSAGE" | sudo -u user tee --append "$file_cli" > /dev/null
      fi
   elif [ "$CHANNEL" = "x" ]; then
      if [ "$NONEWLINEX" = "1" ]; then
         echo "$MESSAGE" | sudo -u user tee --append "$file_x" > /dev/null
      else
         echo "
$MESSAGE" | sudo -u user tee --append "$file_x" > /dev/null
      fi
   elif [ "$CHANNEL" = "both" ]; then
      if [ "$INSTANT_ECHO" = "1" ]; then
         echo "$MESSAGE"
      fi
      if [ "$INSTANT_TTY" = "1" ]; then
         output_write_to_tty "$MESSAGE"
      fi
      if [ "$NONEWLINECLI" = "1" ]; then
         echo "$MESSAGE" | sudo -u user tee --append "$file_cli" > /dev/null
      else
         echo "
$MESSAGE" | sudo -u user tee --append "$file_cli" > /dev/null
      fi
      if [ "$NONEWLINEX" = "1" ]; then
         echo "$MESSAGE" | sudo -u user tee --append "$file_x" > /dev/null
      else
         echo "
$MESSAGE" | sudo -u user tee --append "$file_x" > /dev/null
      fi
   else
      error "$SCRIPTNAME output unknown OUTPUT_CHANNEL: $CHANNEL"
   fi
}

show_output() {
   trap "error_handler" ERR

   ## Protection against endless loops.
   if [ "$LOOP_PROTECTION" = "" ]; then
      LOOP_PROTECTION="0"
   fi
   LOOP_PROTECTION="$(expr "$LOOP_PROTECTION" + "1")"
   if [ "$LOOP_PROTECTION" -ge "1000" ]; then
      exit 1
   fi

   if [ "$FORCE_ACTIVE" = "1" ]; then
      true "FORCE_ACTIVE is set to 1, enforcing active message."
   else
      if [ -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passive" ]; then
         PASSIVE="1"
      fi
   fi

   if [ "$SHOWPASSIVEQUEUEX" = "1" ]; then
      true "SHOWPASSIVEQUEUEX is set to 1"
   elif [ -f "/var/run/whonix/whonixcheck/${IDENTIFIER}_done" ] || [ -f "/var/run/whonix/whonixcheck/${IDENTIFIER}_recently_run" ]; then
      ## Done.

      if [ ! -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_cli" ]; then
         true "Done or recently_run, but /var/lib/whonix/whonixcheck/${IDENTIFIER}_message_cli does not exist. Probably already received --forget command."
         return 0
      fi

      MESSAGE_CLI="$(cat /var/lib/whonix/whonixcheck/${IDENTIFIER}_message_cli)"
      MESSAGE_X="$(cat /var/lib/whonix/whonixcheck/${IDENTIFIER}_message_x)"
      LOOP="0"
      SHOW_WAIT_MESSAGE_ONLY_ONCE="0"
   else
      ## Not done.

      if [ -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_cli" ]; then
         ## At least we got a waiting message.
         MESSAGE_CLI="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_cli")"
         if [ -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_x" ]; then
            MESSAGE_X="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_x")"
         else
            MESSAGE_X=""
         fi
         LOOP="1"
         HAD_WAITING_MESSAGE="1"

         if [ "$AUTOSTART" = "1" ]; then
            if [ "$STARTED_AUTOSTART_PROGRESS_BAR" = "1" ]; then
               true

               sleep "3" &
               wait "$!" || true
               show_output

            else
               STARTED_AUTOSTART_PROGRESS_BAR="1"

               MESSAGE="$MESSAGE_X"

               TITLE=${IDENTIFIER}

               if [ "$MESSAGE" = "" ]; then
                  true "MESSAGE is empty, skipping."
               else
                  ## Small hack.
                  ## It would be cleaner / more rich in features if the window position was defined by the upstream application
                  ## and if "whonixcheck" was not hardcoded here.
                  if [ "${IDENTIFIER}" = "whonixcheck" ]; then
                     ## Move windows to the left top, so they do not overlap.
                     $0 --identifier ${IDENTIFIER} --progressbar --icon "$ICON" --title "$TITLE" --message "$MESSAGE" --parentpid "$$" --lefttop &
                  else
                     $0 --identifier ${IDENTIFIER} --progressbar --icon "$ICON" --title "$TITLE" --message "$MESSAGE" --parentpid "$$" &
                  fi
               fi

               sleep "3" &
               wait "$!" || true

               $0 --identifier ${IDENTIFIER} --progress "5"

               show_output
               return 0
            fi
         fi

      else
         ## Haven't even got a waiting message yet. Let's make our own, unless we already have a waiting message.
         if [ ! "$HAD_WAITING_MESSAGE" = "1" ]; then
            if [ ! "$ONE_TIME_WAITING_ECHO" = "1" ]; then
               echo "Waiting for results from $IDENTIFIER..."
               ONE_TIME_WAITING_ECHO="1"
            fi
         fi
         sleep "3" &
         wait "$!" || true
         show_output
      fi
   fi

   if [ -e "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type" ]; then
      TYPE="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type")"
   else
      ## TODO
      #error "ERROR: No type stored."
      TYPE="info"
   fi

   local temp="?"
   if [ "$TYPE" = "error" ]; then
      local temp="ERROR"
      PASSIVE="0"
   fi
   if [ "$TYPE" = "warning" ]; then
      local temp="WARNING"
      PASSIVE="0"
   fi
   if [ "$TYPE" = "info" ]; then
      local temp="Info"
   fi

   if [ -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_title" ]; then
      local TITLE="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_title")"
      local TITLE="$temp $TITLE"
   else
      local TITLE="$temp"
   fi

   if [ "$SHOWPASSIVEQUEUEX" = "1" ]; then
      if [ ! -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_x" ];  then
         LOOP="1"
      else
         LOOP="0"
         MESSAGE_X="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_x")"
         passive_popup_tool "20" "$MESSAGE_X"
      fi
      if [ "$LOOP" = "1" ]; then
         sleep "3" &
         wait "$!" || true
         show_output
      fi
      return 0
   fi

   ## was started with --showcli
   ## (was automatically started by /etc/profile.d/)
   if [ "$SHOW_CLI" = "1" ]; then
      if [ "$SHOW_WAIT_MESSAGE_ONLY_ONCE" = "1" ]; then
         true
      else
         if [ "$MESSAGE_CLI" = "" ]; then
            true "MESSAGE_CLI is empty."
         else
            output_write_to_tty "$TITLE
$MESSAGE_CLI"
            SHOW_WAIT_MESSAGE_ONLY_ONCE="1"

            #if [ "$LOOP" = "0" ]; then
               #rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_cli"
            #fi
         fi
      fi

      if [ "$LOOP" = "1" ]; then
         sleep "3" &
         wait "$!" || true
         show_output
      fi
      return 0
   fi

   ## was started with --showx
   ## (was automatically started by /etc/xdg/autostart/)
   if [ "$SHOW_X" = "1" ]; then
      if [ "$SHOW_WAIT_MESSAGE_ONLY_ONCE" = "1" ]; then
         true
      else
         ## TODO?: || [ "$LOOP" = "1" ]
         if [ "$PASSIVE" = "1" ]; then
            passive_popup_tool "20" "$MESSAGE_X"
         else
            if [ "$MESSAGE_X" = "" ]; then
               true "MESSAGE_X is empty."
            else
               zenity \
                  --display="$display" \
                  --height=600 \
                  --width=800 \
                  --timeout 86400 \
                  --no-markup \
                  --window-icon "$ICON" \
                  --title="$TITLE" \
                  "--$TYPE" \
                    --text "$MESSAGE_X" \
                  >/dev/null 2>/dev/null &

               if [ "$LEFT_TOP" = "1" ]; then
                  output_wmctrl "$TITLE"
               fi
            fi
         fi
         SHOW_WAIT_MESSAGE_ONLY_ONCE="1"

         #if [ "$LOOP" = "0" ]; then
            #rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_x"
         #fi
      fi

      if [ "$LOOP" = "1" ]; then
         sleep "3" &
         wait "$!" || true
         show_output
      fi

      return 0
   fi
}

output_wmctrl() {
   ## Move windows to the left top, so they do not overlap.
   ## Thanks to: http://user.cavenet.com/rolandl/timer.txt

   trap "error_handler" ERR

   if [ "$NO_X" = "1" ]; then
      true "NO_X is set to 1, do not try wmctrl, return 0 from output_wmctrl."
      return 0
   fi

   local TITLE="${1+"$@"}"

   sleep .5

   if [ "$AUTOSTART" = "1" ]; then
      ## Runs in background anyway, waiting a bit longer does not hurt.
      local max_wait="120"
   else
      local max_wait="60"
   fi

   local counter="0"

   while true; do
      ## "2>/dev/null" to hide output "Can not open display.", when not yet available.
      local temp="$(wmctrl -l 2>/dev/null)"

      local grep_result="0"
      echo "$temp" | grep --quiet "$TITLE" || { local grep_result="$?" ; true; };

      if [ "$grep_result" = "0" ]; then
         break
      fi

      sleep "1" &
      wait "$!" || true

      local counter="$(expr "$counter" + "1")" || true

      if [ "$counter" -ge "$max_wait" ]; then
         true "Giving up on wmctrl. Break."
         break
      fi
   done

   wmctrl -r "$TITLE" -e 0,0,0,-1,-1 >/dev/null 2>/dev/null || true

   if [ "$PROGRESSBAR" = "1" ]; then
      true "Not maximizing progress bar."
   else
      ## Maximize window.
      wmctrl -r "$TITLE" -b toggle,maximized_vert,maximized_horz >/dev/null 2>/dev/null || true
   fi
}

forget_messages() {
   trap "error_handler" ERR

   if [ -p "/var/lib/whonix/whonixcheck/${IDENTIFIER}_fifo" ]; then
      local FIFO="/var/lib/whonix/whonixcheck/${IDENTIFIER}_fifo"

      if [ -f "/var/lib/whonix/whonixcheck/${IDENTIFIER}_zenity_progress_pid" ]; then
         ZENITY_PROGRESS_PID="$(cat "/var/lib/whonix/whonixcheck/${IDENTIFIER}_zenity_progress_pid")"

         ## Check if zenity is still running.
         local ps_return="0"
         ps -p "$ZENITY_PROGRESS_PID" >/dev/null 2>/dev/null || { local ps_return="$?"; true; };

         if [ "$ps_return" = "0" ]; then
            ## Zenity pid is still active.

            ## For extra security against freezing while trying to write to a non-existing pipe, let's use timeout.
            ## || true to catch an error if the pipe no longer exists.
            timeout 1 /bin/bash -c "echo "100" | sudo -u user tee "$FIFO" > /dev/null" || true
         fi
      fi
   fi

   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_x"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_cli"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_type"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_title"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_progress"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_x"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_cli"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passive"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_fifo"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_zenity_progress_pid"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_cli"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_passivequeue_x"
}

forget_wait() {
   trap "error_handler" ERR

   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_x"
   rm --force "/var/lib/whonix/whonixcheck/${IDENTIFIER}_message_waiting_cli"
}

parse_cmd_options ${1+"$@"}
fallbacks

if [ "$PROGRESSBAR" = "1" ]; then
   start_progress_bar
   exit 0
fi

if [ "$PROGRESS" = "" ]; then
   true
else
   progress_bar "$PROGRESS"
   exit 0
fi

if [ "$SHOW_CLI" = "1" ] || [ "$SHOW_X" = "1" ] || [ "$SHOWPASSIVEQUEUEX" = "1" ] ; then
   show_output
   exit 0
fi

if [ "$FORGET" = "1" ]; then
   forget_messages
   exit 0
fi

if [ "$FORGET_WAIT" = "1" ]; then
   forget_wait
   exit 0
fi

output
