run_timesanitycheck() {
   ## There is an exception in /etc/sudoers.d/timesanitycheck.
   sudo service timesanitycheck restart
}

check_htpdate_status() {
   trap "error_handler" ERR

   local pid_file="/var/run/htpdate/pid"
   local done_file="/var/run/htpdate/done"
   local success_file="/var/run/htpdate/success"
   
   if [ ! -f "$pid_file" ]; then
      HTPDATE_STATUS="NO_PID"
      return
   fi
   
   if [ -f "$success_file" ]; then
      HTPDATE_STATUS="SUCCESS"
      return
   fi
   
   if [ -f "$done_file" ]; then
      HTPDATE_STATUS="DONE"
      return
   fi
   
   HTPDATE_STATUS="RUNNING"
}

check_htpdate() {
   trap "error_handler" ERR
   
   local HELPTEXT="See logfile: tail -f -n 20 /var/log/htpdate.log
See status files: cd /var/run/htpdate && dir
Try again: Start menu -> Applications -> System -> Whonix Timesync
           or in Terminal: timesync
Last resort: manually set the clock! (In UTC!):
             sudo su
             date -s \"17 FEB 2012 24:00:00\" && hwclock -w"

   trap "" ERR
   ## There is an exception in /etc/sudoers.d/timesanitycheck.
   sudo service timesanitycheck status
   local TIMESANITYCHECK_STATUS="$?"
   trap "error_handler" ERR

   let "PROGRESS=$PROGRESS+1" || true
   progress_bar $PROGRESS

   TIME_END="$(date +%s)"
   TIME_DIFF="$(expr "$TIME_END" - "$TIME_START")" || true
   
   ## htpdate uses a timeout of 180 seconds per curl connection.
   ## There are three curl connections in total, which would equal 540 seconds in total.
   ## This timeout should not be hit often anyway. Only in case htpdate neither returns
   ## success nor failure.
   WAIT_MIN="580"

   #echo "check_htpdate debug info: expr $WAIT_MIN - $TIME_DIFF"
   WAIT_RESULT="$(expr "$WAIT_MIN" - "$TIME_DIFF")" || true
   #echo "check_htpdate debug info: WAIT_RESULT: $WAIT_RESULT"

   check_htpdate_status
   #echo "HTPDATE_STATUS: $HTPDATE_STATUS"
   
   if [ "$HTPDATE_STATUS" = "NO_PID" ]; then
      ## If there is no pid file after we restarted htpdate, it is a bug.
      local MSG="Network Time Synchronization (timesync) failed!!!
TIMESANITYCHECK_STATUS: "$TIMESANITYCHECK_STATUS"
pid_file does not exist. Please report this bug!

$HELPTEXT"
      output "--error" "ERROR" "$MSG" "both"
      return
   fi

   if [ "$HTPDATE_STATUS" = "SUCCESS" ]; then
      local success_file="/var/run/htpdate/success"
      local SUCCESS_TIME="$(date -r "$success_file")" 
      
      if [ "$TIMESANITYCHECK_STATUS" = 0 ]; then
         ## Ok.
         local MSG="Last run (on "$SUCCESS_TIME") of Network Time Synchronization (timesync) was successful."
         output "--info" "Info" "$MSG" "both"
         return
      else
         ## Something went wrong.
         local MSG="The clock is not sane,
although last run (on "$SUCCESS_TIME") of Network Time Synchronization (timesync) was successful.
Please report this bug!

Either timesync has a bug or this is an attack. Better manually set your clock!!!

$HELPTEXT"
         output "--error" "ERROR" "$MSG" "both"
         return
      fi
   fi
   
   if [ "$HTPDATE_STATUS" = "DONE" ]; then
      if [ "$TIMESANITYCHECK_STATUS" = 0 ]; then
         ## Htpdate done, but no success. The clock is sane. This should rarely happen,
         ## only in case the internet connection was down at this point.
         local MSG="Network Time Synchronization (timesync) done, but no success!!!
Is your internet connection down?

Test your internet connection: Start menu -> Applications -> System -> Whonixcheck
                               or in Terminal: whonixcheck
                               or in Terminal with debugging: whonixcheck -v

$HELPTEXT"
         output "--error" "ERROR" "$MSG" "both"
         return
      else
         local MSG="Network Time Synchronization (timesync) done, but no success!!!
Is your host clock slow or fast? If so, please power off, fix your host clock and restart.
If your host clock is sane, please report a bug.

$HELPTEXT"
         output "--error" "ERROR" "$MSG" "both"
         return      
      fi
   fi

   #echo "check_htpdate debug info: WAIT_RESULT: $WAIT_RESULT"

   if [ $WAIT_RESULT -gt 0 ]; then
      #echo "check_htpdate debug info: Not done. Waiting up to $WAIT_RESULT more seconds."
      sleep 7
      check_htpdate
      return
   fi

   ## This following code should get rarely hit, only in case of a bug,
   ## only in case htpdate does return neither success nor failure.
   ## Should not happen, because htpdate has its own timeout.  
   local MSG="Network Time Synchronization failed!!!
HTPDATE_STATUS: "$HTPDATE_STATUS"
TIMESANITYCHECK_STATUS: "$TIMESANITYCHECK_STATUS"
Please report this bug!

$HELPTEXT"
   output "--error" "ERROR" "$MSG" "both"
   return
}


