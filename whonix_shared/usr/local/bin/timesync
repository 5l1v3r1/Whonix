#!/bin/bash
# Will be copied into whonix_g/w: /usr/local/bin/timesync

# See LICENSE in root of Whonix source for copyright, license and authors.

#set -o errtrace
#set -o nounset
#set -o errexit

error_handler() {
   BUG="1"
   show_output
   
   ZENITY_MESSAGE=""
   
   local MSG="timesync script bug
Run: timesync -v
for verbose output. Clean the output and
please report this bug!
bash_commend: $BASH_COMMAND"
   echo "$MSG"
   output "--error" "ERROR" "$MSG"
   show_output
   
   exit 1
}



timesync_help() {
   trap "error_handler" ERR INT TERM

   echo "timesync by Whonix
$WHONIX_HOMEPAGE 

Available arguments,
-v for verbose output.
"
}



phrase_cmd_options() {
   trap "error_handler" ERR INT TERM

   # If timesync is run without command line arguments,
   # $1 will not exist.
   if [[ "$#" == "0" ]]; then
      TIMESYNC_VERBOSE="--output-file /dev/null"
   else
      if [[ "$1" = "-v" ]]; then
         set -x
         TIMESYNC_VERBOSE=""
         echo "Verbose output..."
         echo "Script running as $(whoami)"
      fi
      if [[ "$1" = "-help" ]]; then
         timesync_help
         exit 0
      fi
   fi
}



preparation() {
   trap "error_handler" ERR INT TERM

   # Initialize the variables.
   USERNAME="user"
   WHONIX_HOMEPAGE="http://whonix.sf.net"
   BUG="0"

   # Initialize more variables.
   COUNTER="0"
   PROGRESS="0"
   ZENITY_TYPE=""
   ZENITY_TITLE=""
   ZENITY_MESSAGE=""
   
   if [ -f "/usr/local/share/whonix/whonix_gateway" ]; then
      VM="Whonix-Gateway"
      GATEWAY_IP="127.0.0.1"
   elif [ -f "/usr/local/share/whonix/whonix_workstation" ]; then
      VM="Whonix-Workstation"
      GATEWAY_IP="192.168.0.10"
   else
      VM="timesync script could not determine if this is whonix_Gateway or whonix_Workstation. Please report this bug."
      GATEWAY_IP="192.168.0.10"
   fi

   # Check if zenity is installed.
   # - This is not the case for cli users.
   # - This is also not the case on Whonix-Gateway.
   if [ "`which zenity`" = "" ]; then
      # zenity is not installed.
      zenity() {
         #dummy
         true
      }
      zenity_progress() {
         echo "progress: $PROGRESS"
         true
      }
   else
      # zenity is installed.
      zenity_progress() {
         echo "progress: $PROGRESS"
         if [ "$DISPLAY" ]; then
            echo "$1" >&3
	     fi
      }
   fi
   
   ## this is not the most stable daemon...
   ## Not used as we switched from notify-send to zenity
   #if [ "$(pgrep -f notification-daemon)" = "" ]; then
   #   /usr/lib/notification-daemon/notification-daemon &
   #fi

   # check if notify-send is installed
   # that is not the case for cli users
   # this is also not the case on Whonix-Gateway
   #if [ `which notify-send` = "" ]; then
   #   notify-send() {
   #      #dummy
   #      true
   #   }
   #fi
}



kill_old_instances() {
  trap "error_handler" ERR INT TERM

  local PID="`pgrep -f "Running Secure Network Time Synchronization"`" || true
  if [ "$PID" != "" ]; then
    kill -9 "$PID" || true
  fi
  
  local PID="`pgrep -f "Running Secure Network Time Synchronization"`" || true
  if [ "$PID" != "" ]; then
    kill -9 "$PID" || true
  fi
}



output() {
   # (1) ZENITY_TYPE, (2) ZENITY_TITLE, (3) APPEND_MESSAGE
   #echo "output: $1 ||| $2 ||| $3 |||"
   
   trap "error_handler" ERR INT TERM

   if [ "$ZENITY_TYPE" = "--error" ]; then
      # Do not overwrite. Do nothing to the variables.
      true
   else
      ZENITY_TYPE="$1"
   fi

   if [ "$ZENITY_TITLE" = "ERROR" ]; then
      # Do not overwrite. Do nothing to the variables.
      true
   elif [ "$ZENITY_TITLE" = "WARNING" ]; then
      # Do not overwrite. Do nothing to the variables.
      true
   else
      ZENITY_TITLE="$2"
   fi

   ZENITY_MESSAGE="$ZENITY_MESSAGE

$3"
}



show_output() {
   if [ "$BUG" = "0" ]; then
      if [ "$ZENITY_TYPE" = "--info" ]; then
         local BITCOIN_ADDRESS="1JgzCCSox56Sh4NnQJqRiwoxKi8oVSZBEd"  
         local MSG="Please support the Whonix's hosting and development, donate Bitcoin to:
$BITCOIN_ADDRESS"
         echo "$MSG"
         output "--info" "Info" "$MSG"  
      fi
   fi
   if [ "$DISPLAY" ]; then
      zenity --display=:0.0 --height=600 --width=800 --timeout 86400 --no-markup \
      --window-icon /usr/local/share/whonix/timesync.ico \
      --title="$VM $INSTALLED_WHONIX_VERSION $ZENITY_TITLE `date`" "$ZENITY_TYPE" --text "$ZENITY_MESSAGE" &
   fi
}



welcome() {
   trap "error_handler" ERR INT TERM

   echo "timesync by Whonix
$WHONIX_HOMEPAGE
-help for help.
Running checks..."

   # Non-intrusive notification, that the checks are running in background.
   # TODO: After the timeout bug has been fixed upstream, --expire-time has to be set to 30.
   #notify-send --urgency low --expire-time 0 --app-name "Whonix" "$NOTIFY_MSG"
   local NOTIFY_MSG="Running Secure Network Time Synchronization...
This will happen in background and will take approximately 60 seconds."

   if [ "$DISPLAY" ]; then
      # The progress window will close automatically after 100% progress.
      exec 3> >(zenity --display=:0.0 --timeout 86400 --no-markup \
      --window-icon /usr/local/share/whonix/timesync.ico \
      --title="$VM $INSTALLED_WHONIX_VERSION Info `date`" "--progress" --auto-close --auto-kill --text "$NOTIFY_MSG")
   fi
}



disclaimer() {
   trap "error_handler" ERR INT TERM

   local MSG="Whonix is produced independently from the Tor (r) anonymity software and carries no guarantee from The Tor Project about quality, suitability or anything else.
Whonix is experimental software by means of concept and design. Do not rely on it for strong anonymity.
$WHONIX_HOMEPAGE"

   echo "$MSG"
   output "--info" "Info" "$MSG"   
}



run_htpdate() {
  trap "error_handler" ERR INT TERM

  let "PROGRESS=$PROGRESS+5"
  # The 5% indicate, that the check has begun.
  zenity_progress $PROGRESS

  sudo /etc/init.d/htpdate restart

  let "PROGRESS=$PROGRESS+1"
  zenity_progress $PROGRESS

  check_htpdate
}

check_htpdate() {

  let "COUNTER=$COUNTER+1"
  let "PROGRESS=$PROGRESS+1"
  zenity_progress $PROGRESS

  local pid_file="/var/run/htpdate/pid"
  local done_file="/var/run/htpdate/done"
  local success_file="/var/run/htpdate/success"

  if [ ! -f "$pid_file" ]; then
    local MSG='Network Time Synchronization failed!!! pid_file does not exist. Please report this bug!
See logfile: tail -f -n 20 /var/log/htpdate.log
See status files: cd /var/run/htpdate && dir
Try again: Start menu -> Applications -> System -> Whonix Timesync
           or in console: timesync
Last resort: manually set the clock! (In UTC!):
             sudo su
             date -s "17 FEB 2012 24:00:00" && hwclock -w'
    echo "$MSG"
    echo "System clock is set to: `date`"
    output "--error" "ERROR" "$MSG"
    return
  fi

  if [ -f "$success_file" ]; then
    local MSG="Network Time Synchronization successful."
    echo "$MSG"
    echo "System clock is set to: `date`"
    output "--info" "Info" "$MSG"
    zenity_progress 100
    show_output
    exit 0
  fi
  
  if [ -f "$done_file" ]; then
    local MSG='Network Time Synchronization done but no success.
Is your internet connection down?
Test your internet connection: Start menu -> Applications -> System -> Whonix
                               or in console: whonixcheck
                               or in console with debugging: whonixcheck -v

See logfile: tail -f -n 20 /var/log/htpdate.log
See status files: cd /var/run/htpdate && dir
Try again: Start menu -> System -> Whonix Timesync
           or in console: timesync
Last resort: manually set the clock! (In UTC!):
             sudo su
             date -s "17 FEB 2012 24:00:00" && hwclock -w'
    echo "$MSG"
    echo "System clock is set to: `date`"
    output "--error" "ERROR" "$MSG"

    zenity_progress 100
    show_output
    exit 0
  fi

  if [ "$COUNTER" -lt 19 ]; then
    sleep 5
    check_htpdate
    return
  fi
  
  local MSG='Network Time Synchronization failed!!!
See logfile: tail -f -n 20 /var/log/htpdate.log
See status files: cd /var/run/htpdate && dir
Try again: Start menu -> Applications -> System -> Whonix Timesync
           or in console: timesync
Last resort: manually set the clock! (In UTC!):
             sudo su
             date -s "17 FEB 2012 24:00:00" && hwclock -w'
  echo "$MSG"
  echo "System clock is set to: `date`"
  output "--error" "ERROR" "$MSG"

  zenity_progress 100
  show_output
  exit 0
}



timesync_main() {
  trap "error_handler" ERR INT TERM
  
  phrase_cmd_options $1
  preparation
  kill_old_instances
  welcome
  disclaimer

  run_htpdate
}

timesync_main $1

# End of timesync script.