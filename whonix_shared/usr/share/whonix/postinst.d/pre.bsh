#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## {{{ pre.bsh 0.2

## bash script fragment

TEMP_DIR_WHONIX_SCRIPT="$(mktemp --directory)"

[ -o xtrace ]
## returns:
## - 0, if -x is set
## - 1, if -x is not set
MINUS_X_SET="$?"

set -o pipefail

## {{ Colors

## Thanks to:
## http://mywiki.wooledge.org/BashFAQ/037
## Variables for terminal requests.
[[ -t 2 ]] && {
    alt=$(      tput smcup  || tput ti      ) # Start alt display
    ealt=$(     tput rmcup  || tput te      ) # End   alt display
    hide=$(     tput civis  || tput vi      ) # Hide cursor
    show=$(     tput cnorm  || tput ve      ) # Show cursor
    save=$(     tput sc                     ) # Save cursor
    load=$(     tput rc                     ) # Load cursor
    bold=$(     tput bold   || tput md      ) # Start bold
    stout=$(    tput smso   || tput so      ) # Start stand-out
    estout=$(   tput rmso   || tput se      ) # End stand-out
    under=$(    tput smul   || tput us      ) # Start underline
    eunder=$(   tput rmul   || tput ue      ) # End   underline
    reset=$(    tput sgr0   || tput me      ) # Reset cursor
    blink=$(    tput blink  || tput mb      ) # Start blinking
    italic=$(   tput sitm   || tput ZH      ) # Start italic
    eitalic=$(  tput ritm   || tput ZR      ) # End   italic
[[ $TERM != *-m ]] && {
    red=$(      tput setaf 1|| tput AF 1    )
    green=$(    tput setaf 2|| tput AF 2    )
    yellow=$(   tput setaf 3|| tput AF 3    )
    blue=$(     tput setaf 4|| tput AF 4    )
    magenta=$(  tput setaf 5|| tput AF 5    )
    cyan=$(     tput setaf 6|| tput AF 6    )
}
    white=$(    tput setaf 7|| tput AF 7    )
    default=$(  tput op                     )
    eed=$(      tput ed     || tput cd      )   # Erase to end of display
    eel=$(      tput el     || tput ce      )   # Erase to end of line
    ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
    ewl=$eel$ebl                                # Erase whole line
    draw=$(     tput -S <<< '   enacs
                                smacs
                                acsc
                                rmacs' || { \
                tput eA; tput as;
                tput ac; tput ae;         } )   # Drawing characters
    back=$'\b'
} 2>/dev/null ||:

## }}

disable_echo() {
   exec 5>&1 1>> "$TEMP_DIR_WHONIX_SCRIPT/output"
   exec 6>&2 2>> "$TEMP_DIR_WHONIX_SCRIPT/output"
}

enable_echo() {
   exec 1>&5
   exec 2>&6
}

if [ "$MINUS_X_SET" = "0" ]; then
   true "INFO: Setting WHONIX_DEB_DEBUG to 1, because -x is set."
   WHONIX_DEB_DEBUG="1"
fi

if [ "$WHONIX_DEB_DEBUG" = "1" ]; then
   set -x
   OUT_CMD_WHONIX_SCRIPT="true"
else
   OUT_CMD_WHONIX_SCRIPT="echo"
   disable_echo
fi

force_echo() {
   if [ ! "$WHONIX_DEB_DEBUG" = "1" ]; then
      enable_echo
   fi

   if [ ! "$WHONIX_DEB_DEBUG" = "1" ]; then
      echo "$@"
   fi
   ## No need to use "true" or "echo" in case WHONIX_DEB_DEBUG is set to 1,
   ## because in that case we saw the output anyway, because set -x was set.

   if [ ! "$WHONIX_DEB_DEBUG" = "1" ]; then
      disable_echo
   fi
}

error_handler() {
   local exit_code="$?"
   local last_err="$BASH_COMMAND"

   if [ ! "$WHONIX_DEB_DEBUG" = "1" ]; then
      local output
      output="$(cat "$TEMP_DIR_WHONIX_SCRIPT/output")"
   fi

   if [ "$output" = "" ]; then
      output="## See above."
   fi

   if [ ! "$WHONIX_DEB_DEBUG" = "1" ]; then
      exec 1>&5
      exec 2>&6
   fi

   force_echo "
####################################################################
## ${red}${bold}BEGIN ERROR in $0 detected!${reset}
##
## ${under}ERROR LOG${reset}:
$output
##
## ${under}BASH_COMMAND${reset}: $BASH_COMMAND
## ${under}EXIT_CODE${reset}: $exit_code
##
## ${red}${bold}END ERROR in $0 detected!${reset}
## ${red}${bold}Please report this Whonix bug!${reset}
####################################################################
" 1>&2

   exit 1
}

trap "error_handler" ERR

own_filename="$(basename $0)"
case $WHONIX_BUILD_SKIP_SCRIPTS in
   *$own_filename*) force_echo "INFO: Skipping $own_filename, because WHONIX_BUILD_SKIP_SCRIPTS includes it."
                    exit 0
                    ;;
esac

## }}}
