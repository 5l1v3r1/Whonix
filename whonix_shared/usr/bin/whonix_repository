#!/bin/bash

SCRIPTNAME="$(basename $0)"

error_handler() {
   BUG="1"
   show_output
  
   local MSG="\
###############################################################################
## $SCRIPTNAME script bug.
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
##
## Experts only:
## $SCRIPTNAME --verbose
## for verbose output. Clean the output and
## submit to Whonix developers.
###############################################################################\
"
   echo "$MSG"
   exit 1
} 

trap "error_handler" ERR

root_check() {
   if [ "$(id -u)" != "0" ]; then
      echo "ERROR: This must be run as root (sudo)!"
      exit 1
   else
      true "INFO: Script running as root."
   fi
}

parse_cmd_options() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   local HELP_MSG="See:
man $SCRIPTNAME"

   ## defaults, in case run by postinst script, can
   ## be overruled with the DISTRUST_WHONIX_DEB_REPO variable,
   ## see: man $SCRIPTNAME
   ENABLE="1"
   DISABLE="0"
   
   while :
   do
       case $1 in
           -h | --help | -\?)
               echo "$HELP_MSG"
               exit 0
               ;;               
           -v | --verbose)
               echo "$SCRIPTNAME verbose output..."
               set -x
               VERBOSE="1"
               shift
               ;;
           -e | --enable)
               ENABLE="1"
               DISABLE="0"               
               shift
               ;;
           -d | --disable)
               DISABLE="1"
               ENABLE="0"              
               shift
               ;;               
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done   

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.  
}

add_keys() {
   echo "$0: Adding from signing keys from "$1"."
   apt-key add $1 #>/dev/null 2>/dev/null
}

revoke_keys() {
   GPG_TMP="$(mktemp --directory)"

   mkdir --parents "$GPG_TMP"
   chmod 700 "$GPG_TMP"

   gpg \
      --homedir "$GPG_TMP" \
      --no-default-keyring \
      --import $1 \
      2>/dev/null   
   
   gpg \
      --homedir "$GPG_TMP" \
      --no-default-keyring \
      --keyid-format "0xlong" \
      --fingerprint \
      2>/dev/null \
      | \
         
         while read LINE; do     
            local FIRST_WORD="$(echo $LINE | awk '{print $1}')"

            if [ ! "$FIRST_WORD" = "pub" ]; then
               continue
            fi
            
            ## Ex: 4096R/0x9C131AD3713AAEEF
            MIDDLE_WORD="$(echo $LINE | awk '{print $2}')"
            
            FINGERPRINT="$(echo "$MIDDLE_WORD" | awk -F"/" '{ print $2 }')"  
      
            apt-key del "$FINGERPRINT" #>/dev/null 2>/dev/null
         done
}

main_function() {
   root_check

   parse_cmd_options ${1+"$@"}

   if [ "$DISTRUST_WHONIX_DEB_REPO" = "1" ]; then
      echo "INFO $0: Environment variable DISTRUST_WHONIX_DEB_REPO is set to 1, revoking all Whonix apt keys in /usr/share/whonix/keys/whonix-keys.d/* and /usr/share/whonix/keys/whonix-keys-revoked.d/*..."
      ENABLE="0"
      DISABLE="1"
   fi
   
   if [ "$DISABLE" = "1" ]; then   
      echo "INFO $0: Revoking all Whonix apt keys in /usr/share/whonix/keys/whonix-keys.d/* and /usr/share/whonix/keys/whonix-keys-revoked.d/*..."   
      revoke_keys "/usr/share/whonix/keys/whonix-keys.d/*"
      revoke_keys "/usr/share/whonix/keys/whonix-keys-revoked.d/*"
      echo "INFO $0: Revoked all Whonix apt keys. Feel free to manually verify using \"sudo apt-key finger\". Showing output of \"apt-key finger\"..."
      echo " "
   else
      add_keys "/usr/share/whonix/keys/whonix-keys.d/*"
      revoke_keys "/usr/share/whonix/keys/whonix-keys-revoked.d/*"
   fi

   apt-key finger
}

main_function ${1+"$@"}

