#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## {{ Upstream APT Repository

## Set which /etc/apt/sources.list will be used for building Whonix.
## The whonix_build_on_operating_system variable is provided by the help-steps/variables script,
## created using lsb_release.
if [ "$whonix_build_on_operating_system" = "ubuntu" ]; then
   ## For Travis CI systems.
   if [ "$whonix_build_sources_list" = "" ]; then
      whonix_build_sources_list="build_sources/ubuntu_current.list"
   fi

   ## Required for python-stem download.
   if [ "$whonix_build_sources_list_newer" = "" ]; then
      whonix_build_sources_list_newer="build_sources/ubuntu_newer.list"
   fi

   if [ "$whonix_build_apt_stable_release" = "" ]; then
      whonix_build_apt_stable_release="precise"
   fi
   if [ "$whonix_build_apt_newer_release_codename" = "" ]; then
      whonix_build_apt_newer_release_codename="utopic"
   fi
elif [ "$whonix_build_on_operating_system" = "debian" ]; then
   ## Required for python-stem download.
   if [ "$whonix_build_sources_list_newer" = "" ]; then
      whonix_build_sources_list_newer="build_sources/debian_testing_frozen.list"
   fi

   #if [ "$whonix_build_sources_list" = "" ]; then
      ## Current Debian testing repository.
      #whonix_build_sources_list="build_sources/debian_testing_current.list"
   #fi

   #if [ "$whonix_build_sources_list" = "" ]; then
      ## Frozen Debian testing repository.
      #whonix_build_sources_list="build_sources/debian_testing_frozen.list"
   #fi

   if [ "$whonix_build_sources_list" = "" ]; then
      ## Frozen Debian stable repository.
      whonix_build_sources_list="build_sources/debian_stable_frozen.list"
   fi

   if [ "$whonix_build_apt_stable_release" = "" ]; then
      whonix_build_apt_stable_release="stable"
   fi
   if [ "$whonix_build_apt_newer_release_codename" = "" ]; then
      whonix_build_apt_newer_release_codename="testing"
   fi
else
   if [ ! "$whonix_build_on_operating_system_detect_skip" = "1" ]; then
      ## TODO
      error "Neither Debian nor Ubuntu detected."
   fi
fi

## Set which repository and release codename grml-debootstrap should use.
## (Build step: build-steps.d/1300_create-debian-raw)
## Only interested for VM builds. Not in use for physically isolated builds.
if [ "$whonix_build_on_operating_system" = "ubuntu" ]; then
   if [ "$whonix_build_apt_sources_mirror" = "" ]; then
      whonix_build_apt_sources_mirror="http://us.archive.ubuntu.com/ubuntu"
   fi
elif [ "$whonix_build_on_operating_system" = "debian" ]; then
   #if [ "$whonix_build_apt_sources_mirror" = "" ]; then
      ## Current repository.
      #whonix_build_apt_sources_mirror="http://ftp.us.debian.org/debian"
   #fi

   if [ "$whonix_build_apt_sources_mirror" = "" ]; then
      ## Frozen repository.
      #whonix_build_apt_sources_mirror="http://snapshot.debian.org/archive/debian/20140412T223206Z/"
      whonix_build_apt_sources_mirror="$(grep -oP '(?<=deb ).*(?= stable )' "$whonix_build_sources_list")"
      ## Example whonix_build_apt_sources_mirror:
      ## http://snapshot.debian.org/archive/debian/20140412T223206Z/
      ## Debugging:
      #echo "whonix_build_apt_sources_mirror: XXX${whonix_build_apt_sources_mirror}XXX"
   fi
else
   if [ ! "$whonix_build_on_operating_system_detect_skip" = "1" ]; then
      ## TODO
      error "Neither Debian nor Ubuntu detected."
   fi
fi

## }}

## {{ apt_sourcelist_empty apt_sourceparts

## Using short option -o instead of long option --option, because aptitude does
## (used by grml-debootstrap) not support that.

## The EMPTY_DIR variable is provided by the help-steps/variables script.
## export, so chroot-scripts-post.d can read it. It defaults to /tmp/empty.
## You can leave it as is.
if [ "$apt_sourcelist_empty" = "" ]; then
   export apt_sourcelist_empty=" -o Dir::Etc::sourcelist=$EMPTY_DIR "
fi

## The WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER variable is provided by the help-steps/variables script.
## You can leave it as is.
if [ "$apt_sourceparts" = "" ]; then
   export apt_sourceparts=" -o Dir::Etc::sourceparts=$WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER "
fi

## }}

## {{ apt_verify_opts

## We need to ignore valid-until and handle expired gpg keys, so we can build
## from frozen Debian package repository, i.e. from snapshot.debian.org. This
## is useful to prevent breakage of the build script due to removed packages
## from Debian repositories. Also a prerequisite for verifiable builds.

## Debugging hint:
## We can simulate building Whonix in a few years by making our system clock
## 10 years faster. There is no frozen torproject repository, so we're not
## using apt_verify_opts there. When simulating this, don't wonder when post
## chroot scripts connecting to torproject's repository fail due to no an
## invalid valid-until field in its release file.

## Debugging.
#export apt_verify_opts+=" -o Debug::Acquire::gpgv=true "

## Check if variable apt_verify_opts is still unset. The builder could have set
## it using -current-sources already.
if [ -z "$apt_verify_opts" ]; then
   ## Variable apt_verify_opts still unset, setting it...

   ## Ignoring valid-until.
   ## Otherwise apt-get will show an error message looking like this.
   ##     E: Release file for http://snapshot.debian.org/archive/debian-security/20130919T215514Z/dists/testing/updates/InRelease is expired (invalid since 4d 2h 13min 31s). Updates for this repository will not be applied.
   export apt_verify_opts+=" -o Acquire::Check-Valid-Until=false "

   ## Handling expired gpg key.
   ## Otherwise apt-get will show an error message looking like this.
   ##     "W: GPG error: http://snapshot.debian.org wheezy InRelease: The following signatures were invalid: KEYEXPIRED 1520281423"
   ##
   ## Simple, insecure fix: skip gpg verification.
   ##     --allow-unauthenticated
   ##     This will still show this error message, but apt-get will exit 0.
   ##
   ## Possibly more secure fix: Checking the signature, but ignore it being invalid.
   ## - apt-get does seem to have no option to accept outdated keys?
   ## - adding options to apt-get's gpgv seems broken in apt-get?
   ## - gpgv itself does have no option to ignore expired (just checking validity)?
   ##
   ## Not using this yet. Not yet required and insecure.
   #export apt_verify_opts+=" --allow-unauthenticated "
fi

## }}

## {{ apt_timeout_opts

## export, so chroot-scripts-post.d can read it
export apt_timeout_opts+=" -o Acquire::http::Timeout=180 "
export apt_timeout_opts+=" -o Acquire::ftp::Timeout=180 "
export apt_timeout_opts+=" -o Acquire::Retries=3 "

## }}
