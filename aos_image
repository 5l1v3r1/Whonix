#!/bin/bash
# build script: /home/user/aos/aos_image

# Version: aos 0.3.0-developers-only

# Copyright: adrelanos (aka proper)
#
# License: GPL v3 or any later
#
# Any changes you pull changes into this source will be also licensed
# under GPL v3 or any later. Additionally you grant adrelanos the right to
# re-license your work under a different license. If that is not acceptable,
# you can either fork this source under GPL v3 or any later or contact
# adrelanos. Contact adrelanos, if you require this source code under
# different license.

AOS_SOURCE_FOLDER="/home/user/aos"

TorBOX_DEBUG="0"

script_help() {
echo \
"
# FLAGS / WORKFLOW:
# -tg-mount
# Mounts the VM image.
#
# -tg-copyinto
# Copies TorBOX_Gateway and torcheck script into VM image.
#
# -tg-unmount
# Unmounts the VM image.
#
# -tw-mount
# -tw-copyinto
# -tw-unmount
"
}



# Enable debugging.
set -x

# Exit if there is an error
set -e



USERNAME="user"



##############################################################################################
# error_handler
##############################################################################################
error_handler() {
echo "
#!!! ERROR in TorBOX_Image !!!#
#!!! ERROR in TorBOX_Image !!!#
#!!! ERROR in TorBOX_Image !!!#
"

echo "TorBOX_Image: unmount_vm_image..."
unmount_vm_image
echo "TorBOX_Image: Done."

touch /home/$USERNAME/TorBOX_binary/TORBOX_BUILD_FAILED
exit 1
}



root_check() {
######################################################
# Checking script environment
######################################################
# Check if we are root
if [ "$(id -u)" != "0" ]; then
     echo "ERROR: This must be run as root (sudo)!"
     exit 1
else
     echo "INFO: Script running as root."
fi
}



mount_vm_image() {
   trap "error_handler" ERR INT TERM

   # Ensure powered is off. Otherwise disk corruption is at high risk.
   sudo -u $USERNAME VBoxManage controlvm "$VMNAME" poweroff || true

   # Make sure required module to mount vdi images is installed.
   modprobe nbd

   # Create loopback dev for the image.
   qemu-nbd -c /dev/nbd0 "/home/$USERNAME/VirtualBox VMs/""$VMNAME"/"$VMNAME".vdi

   # Folder has to exist to mount the image.
   mkdir -p $CHROOT_FOLDER

   # Mount the partitions, that are exposed as /dev/nbd0pXXX.
   mount -o noatime /dev/nbd0p1 $CHROOT_FOLDER
}



copy_into_vm_image() {
   trap "error_handler" ERR INT TERM

   # Make a backup of rc.local.
   cp -n /etc/rc.local /etc/rc.local.backup

   # Automatically start VM script after booting.
   cp $AOS_SOURCE_FOLDER $CHROOT_FOLDER/etc/rc.local

   # Copy VM script into VM image and make it executable.
   cp "$AOS_SOURCE_FOLDER"/aos_gateway/usr/local/bin/"$VMSCRIPT" $CHROOT_FOLDER/usr/local/bin/
   chmod +x $CHROOT_FOLDER/usr/local/bin/$VMSCRIPT

   # Copy torcheck script into VM image and make it executable.
   cp $AOS_SOURCE_FOLDER"/aos_shared/usr/local/bin/torcheck $CHROOT_FOLDER/usr/local/bin/
   chmod +x $CHROOT_FOLDER/usr/local/bin/torcheck

   # Delete old log, otherwise the VM script would not get executed.
   # See rc.local above.
   rm $CHROOT_FOLDER/home/user/torboxinstalllog || true

   ##########
   # Backup #
   ##########
   cp -n /etc/sudoers /etc/sudoers.backup
   chmod 0440 /etc/sudoers.backup

   cp -n /home/$USERNAME/.bashrc.backup /home/$USERNAME/.bashrc
   #Better no backup of localtime.
   # cp -n /etc/localtime /etc/localtime.backup
   cp -n /etc/apt/sources.list /etc/apt/sources.list.backup
   cp -n /etc/default/grub /etc/default/grub.backup
   cp -n /etc/sysctl.conf /etc/sysctl.conf.backup
   cp -n /etc/network/interfaces /etc/network/interfaces.backup
   cp -n /home/$USERNAME/.bashrc /home/$USERNAME/.bashrc.backup
   cp -n /etc/init/tty1.conf /etc/init/tty1.conf.backup
   cp -n /etc/init/failsafe.conf /etc/init/failsafe.conf.backup

   #########################
   # aos-Gateway Copy Pre  #
   #########################

   cp "$AOS_SOURCE_FOLDER"/aos_gateway/usr/share/aos/apt.conf "$CHROOT_FOLDER"/usr/share/aos/apt.conf

   # create arm wrapper script to start arm
   cp "$AOS_SOURCE_FOLDER"/aos_gateway/usr/local/bin/arm "$CHROOT_FOLDER"/usr/local/bin/arm
   chmod +x "$CHROOT_FOLDER"/usr/local/bin/arm

   # aos helpfile
   cp "$AOS_SOURCE_FOLDER"/aos_gateway/usr/local/bin/aos "$CHROOT_FOLDER"/usr/local/bin/aos
   chmod +x "$AOS_SOURCE_FOLDER"/usr/local/bin/aos

   # fstab
   cp "$AOS_SOURCE_FOLDER"/home/user/aos/aos_shared/etc/fstab "$CHROOT_FOLDER"/etc/fstab

   # firewall script
   cp "$AOS_SOURCE_FOLDER"/home/user/aos/aos_gateway/usr/local/bin/aos_firewall "$CHROOT_FOLDER"/usr/local/bin/aos_firewall
   chmod +x "$CHROOT_FOLDER"/usr/local/bin/aos_firewall

   # Create folder for vidalia.
   sudo -u $USERNAME \
   mkdir -p "$CHROOT_FOLDER"/home/$USERNAME/.vidalia

   # Setup Vidalia to use Cookie Authentication.
   sudo -u $USERNAME \
   cp "$AOS_SOURCE_FOLDER"/aos_gateway/home/user/vidalia/vidalia.conf "$CHROOT_FOLDER"/home/user/vidalia/vidalia.conf

   # Copy aos-Gateway leaktest script into vm and make it executable.
   cp "$AOS_SOURCE_FOLDER"/aos_gateway/usr/local/bin/leaktest "$CHROOT_FOLDER"/usr/local/bin/leaktest
   chmod +x "$CHROOT_FOLDER"/usr/local/bin/leaktest

   #########################
   # aos-Gateway Copy Post #
   #########################

   # Backup torrc.
   cp -n /etc/tor/torrc /etc/tor/torrc.backup

   # torrc
   cp "$AOS_SOURCE_FOLDER"/aos_gateway/etc/tor/torrc "$CHROOT_FOLDER"/etc/tor/torrc

   # autologin tty1.conf
   cp "$AOS_SOURCE_FOLDER"/aos_gateway/etc/init/tty1.conf "$CHROOT_FOLDER"/etc/init/tty1.conf

   # /etc/rc.local was (ab)used by aos-Image -tX-copyinto-pre
   # to run aos_$VM script once. That is because aos_$VM
   # scripts get executed inside the VM. We restore /etc/rc.local
   # here. A new aos-Image -tX-copyinto would overwrite it
   # again.
   cp $AOS_SOURCE_FOLDER"/aos_gateway/etc/rc.local "$CHROOT_FOLDER"/etc/rc.local

   # Delete /etc/resolv.conf to work around some strange bug
   # "Operation not supported While reading flags on" while
   # trying to set -i on /etc/resolv.conf.
   # Override trap function, if /etc/resolv.conf does not
   # exist or is write protected (+i).
   rm /etc/resolv.conf || true

   # Remove write protection from resolv.conf.
   # Override trap function, if /etc/resolv.conf does not exist.
   chattr -i /etc/resolv.conf || true

   # Delete file to keep care of potential leaks.
   # Override trap function, if /etc/resolv.conf does not exist.
   rm /etc/resolv.conf || true

   # Set nameserver to localhost.
   # iptables redirects any of aos-Gateways DNS requests to DNS_PORT_AOSG
   # Do not override trap function, this step is essential.
   # resolv.conf
   cp $AOS_SOURCE_FOLDER"/aos_gateway/etc/resolv.conf "$CHROOT_FOLDER"/etc/resolv.conf

   # Add write protection to resolv.conf to prevent DNS leaks by getting
   # edited by DHCP.
   # Do not override trap function, this step is essential.
   chattr +i /etc/resolv.conf

   ###############
   # Copy shared #
   ###############

   # policy-rc.d prevent daemons from starting while using apt-get.
   cp $AOS_SOURCE_FOLDER"/aos_shared/usr/sbin/policy-rc.d "$CHROOT_FOLDER"/usr/sbin/policy-rc.d
   chmod 755 "$CHROOT_FOLDER"/usr/sbin/policy-rc.d

   # Ensure timezone is UTC. Just to be safe, already done with preseed install.
   cp "$CHROOT_FOLDER"/usr/share/zoneinfo/UTC "$CHROOT_FOLDER"/etc/localtime

   # Fixes the long dhcp timeout bug.
   cp "$AOS_SOURCE_FOLDER"/aos_shared/etc/failsafe.conf "$CHROOT_FOLDER"/etc/failsafe.conf

   # This is required because preseed without network connection will mess up /etc/apt/sources.list.
   cp "$AOS_SOURCE_FOLDER"/aos_shared/etc/apt/sources.list "$CHROOT_FOLDER"/etc/apt/sources.list.


   # Ensure changes get written before unmounting.
   sync
}



unmount_vm_image() {
sync

# Shutdown the ndb.
qemu-nbd -d /dev/nbd0

# In the end unmount.
umount $CHROOT_FOLDER

# Delete temporary folder.
# It did not contain anything. It was only a mount point.
rm -r $CHROOT_FOLDER
}



################################################################ 
# -tg-mount                                                    #
################################################################ 
if [[ "$1" = "-tg-mount" ]]; then
   root_check
   VMNAME="TorBOX-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/TorBOX_binary/"$VMNAME"_image
   mount_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./TorBOX_Image -tg-copyinto"
   exit 0
fi



################################################################ 
# -tg-copyinto                                                 #
################################################################ 
if [[ "$1" = "-tg-copyinto" ]]; then
   root_check
   VMNAME="TorBOX-Gateway"
   VMSCRIPT="TorBOX_Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/TorBOX_binary/"$VMNAME"_image
   copy_into_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./TorBOX_CreateVM -tg-unmount"
   exit 0
fi



################################################################ 
# -tg-unmount                                                  #
################################################################ 
if [[ "$1" = "-tg-unmount" ]]; then
   root_check
   VMNAME="TorBOX-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/TorBOX_binary/"$VMNAME"_image
   unmount_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./TorBOX_CreateVM -tg-install-script"
   exit 0
fi



################################################################ 
# -tw-mount                                                    #
################################################################ 
if [[ "$1" = "-tw-mount" ]]; then
   root_check
   VMNAME="TorBOX-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/TorBOX_binary/"$VMNAME"_image
   mount_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./TorBOX_Image -tw-copyinto"
   exit 0
fi



################################################################ 
# -tw-copyinto                                                 #
################################################################ 
if [[ "$1" = "-tw-copyinto" ]]; then
   root_check
   VMNAME="TorBOX-Workstation"
   VMSCRIPT="TorBOX_Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/TorBOX_binary/"$VMNAME"_image
   copy_into_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./TorBOX_CreateVM -tw-unmount"
   exit 0
fi



################################################################ 
# -tw-unmount                                                  #
################################################################ 
if [[ "$1" = "-tw-unmount" ]]; then
   root_check
   VMNAME="TorBOX-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/TorBOX_binary/"$VMNAME"_image
   unmount_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./TorBOX_CreateVM -tw-install-script"
   exit 0
fi



################################################################ 
# -help                                                        #
################################################################ 
if [[ "$1" = "-help" ]]; then
   script_help
   exit 0
fi



################################################################ 
# no option chosen                                             #
################################################################ 
echo "No option choosen. Use -help for help."
touch /home/$USERNAME/TorBOX_binary/TORBOX_BUILD_FAILED
exit 1
