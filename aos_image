#!/bin/bash
# build script: /home/user/aos/aos_image

# See LICENSE in root of aos source for copyright, license and authors.

AOS_SOURCE_FOLDER="/home/user/aos"

script_help() {
echo \
"
# FLAGS / WORKFLOW:

# 1. Install operating system using: sudo ./aos_createvm -tg-install-os

#
# 2. -tg-copyinto-pre
#    Copies files.

# 3. Run vm script using: sudo ./aos_createvm -tg-install-script

# 4. -tg-copyinto-post
#    Copies files.

# -tw...

# Same for aos-workstation. Use -tw instant of -tg.

# DEBUGGING ONLY:

# -tg-mount
# Mounts the VM image.

# -tg-unmount
# Unmounts the VM image.
"
}



# Enable debugging.
set -x

# Stop on error.
set -x

USERNAME="user"

##############################################################################################
# error_handler
##############################################################################################
error_handler() {
echo "
#!!! ERROR in aos_image !!!#
#!!! ERROR in aos_image !!!#
#!!! ERROR in aos_image !!!#
"

echo "aos_image: unmount_vm_image..."
unmount_vm_image_force
echo "aos_image: Done."

touch /home/$USERNAME/aos_binary/AOS_BUILD_FAILED
exit 1
}

trap "error_handler" ERR INT TERM



root_check() {
######################################################
# Checking script environment
######################################################
# Check if we are root
if [ "$(id -u)" != "0" ]; then
     echo "ERROR: This must be run as root (sudo)!"
     exit 1
else
     echo "INFO: Script running as root."
fi
}



int_copy_source() {
   . $AOS_SOURCE_FOLDER/int_copy_shared
   . $AOS_SOURCE_FOLDER/int_copy_gateway
   . $AOS_SOURCE_FOLDER/int_copy_workstation
}



mount_vm_image() {
   # Ensure powered is off. Otherwise disk corruption is at high risk.
   sudo -u $USERNAME VBoxManage controlvm "$VMNAME" poweroff || true

   # Make sure required module to mount vdi images is installed.
   modprobe nbd

   # Create loopback dev for the image.
   qemu-nbd -c /dev/nbd0 "/home/$USERNAME/VirtualBox VMs/""$VMNAME"/"$VMNAME".vdi

   # Folder has to exist to mount the image.
   mkdir -p $CHROOT_FOLDER

   # Mount the partitions, that are exposed as /dev/nbd0pXXX.
   mount -o noatime /dev/nbd0p1 $CHROOT_FOLDER
}



copy_into_vm_image_aos_gateway_pre() {
   backup_shared_pre
   copy_shared_pre
   append_shared_pre
   copy_gateway_pre
   append_gateway_pre
   # Ensure changes get written before unmounting.
   sync
}

copy_into_vm_image_aos_gateway_post() {
   copy_shared_post
   copy_gateway_post
   # Ensure changes get written before unmounting.
   sync
}

copy_into_vm_image_aos_workstation_pre() {
   backup_shared_pre
   copy_shared_pre
   append_shared_pre
   copy_workstation_pre
   append_workstation_pre
   # Ensure changes get written before unmounting.
   sync
}

copy_into_vm_image_aos_workstation_post() {
   copy_shared_post
   copy_workstation_post
   append_workstation_post
   # Ensure changes get written before unmounting.
   sync
}



unmount_vm_image_force() {
# Will be called if there is an error.
# || true to avoid more errors and to ensure
# clean unmount.

# Ensure changes get written.
sync || true

# Shutdown the ndb.
qemu-nbd -d /dev/nbd0 || true

# In the end unmount.
umount $CHROOT_FOLDER || true

# Delete temporary folder.
# It did not contain anything. It was only a mount point.
rm -r $CHROOT_FOLDER || true
}



unmount_vm_image() {
# Called after copying into vm.
# Should not trow any errors.

# Ensure changes get written.
sync

# Shutdown the ndb.
qemu-nbd -d /dev/nbd0

# In the end unmount.
umount $CHROOT_FOLDER

# Delete temporary folder.
# It did not contain anything. It was only a mount point.
rm -r $CHROOT_FOLDER
}



################################################################ 
# -tg-mount                                                    #
################################################################ 
if [[ "$1" = "-tg-mount" ]]; then
   root_check
   VMNAME="aos-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/aos_binary/"$VMNAME"_image
   mount_vm_image
   echo "INFO: mount done."
   exit 0
fi



################################################################ 
# -tg-copyinto-pre                                             #
################################################################ 
if [[ "$1" = "-tg-copyinto-pre" ]]; then
   root_check
   VMNAME="aos-Gateway"
   VMSCRIPT="aos_gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/aos_binary/"$VMNAME"_image
   int_copy_source
   mount_vm_image
   copy_into_vm_image_aos_gateway_pre
   unmount_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./aos_createvm -tg-unmount"
   exit 0
fi



################################################################ 
# -tg-copyinto-post                                            #
################################################################ 
if [[ "$1" = "-tg-copyinto-post" ]]; then
   root_check
   VMNAME="aos-Gateway"
   VMSCRIPT="aos_gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/aos_binary/"$VMNAME"_image
   int_copy_source
   mount_vm_image
   copy_into_vm_image_aos_gateway_post
   unmount_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./aos_createvm -tg-unmount"
   exit 0
fi



################################################################ 
# -tg-unmount                                                  #
################################################################ 
if [[ "$1" = "-tg-unmount" ]]; then
   root_check
   VMNAME="aos-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/aos_binary/"$VMNAME"_image
   unmount_vm_image
   echo "INFO: unmount done."
   exit 0
fi



################################################################ 
# -tw-mount                                                    #
################################################################ 
if [[ "$1" = "-tw-mount" ]]; then
   root_check
   VMNAME="aos-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/aos_binary/"$VMNAME"_image
   mount_vm_image
   echo "INFO: mount done."
   exit 0
fi



################################################################ 
# -tw-copyinto-pre                                             #
################################################################ 
if [[ "$1" = "-tw-copyinto-pre" ]]; then
   root_check
   VMNAME="aos-Workstation"
   VMSCRIPT="aos_workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/aos_binary/"$VMNAME"_image
   int_copy_source
   mount_vm_image
   copy_into_vm_image_aos_workstation_pre
   unmount_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./aos_createvm -tw-unmount"
   exit 0
fi



################################################################ 
# -tw-copyinto-post                                            #
################################################################ 
if [[ "$1" = "-tw-copyinto-post" ]]; then
   root_check
   VMNAME="aos-Workstation"
   VMSCRIPT="aos_workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/aos_binary/"$VMNAME"_image
   int_copy_source
   mount_vm_image
   copy_into_vm_image_aos_workstation_post
   unmount_vm_image
   echo "BUILD INFO: Done, if success, next stept should be sudo ./aos_createvm -tw-unmount"
   exit 0
fi



################################################################ 
# -tw-unmount                                                  #
################################################################ 
if [[ "$1" = "-tw-unmount" ]]; then
   root_check
   VMNAME="aos-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/aos_binary/"$VMNAME"_image
   unmount_vm_image
   echo "INFO: unmount done."
   exit 0
fi



################################################################ 
# -help                                                        #
################################################################ 
if [[ "$1" = "-help" ]]; then
   script_help
   exit 0
fi



################################################################ 
# no option chosen                                             #
################################################################ 
echo "No option choosen. Use -help for help."
touch /home/$USERNAME/aos_binary/AOS_BUILD_FAILED || true
exit 1
