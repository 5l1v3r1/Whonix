#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## example usage:
## TODO: always check packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list first!
## sudo -E ./build-steps.d/1200_create-debian-packages --build --allow-untagged true --allow-uncommitted true --internalrun --target root --function get_tpo_packages

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

VMNAME="internalrun"

source pre
source colors
source variables

cd "$MYDIR"
cd ..

get_backports_packages() {
   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   true "${cyan}$BASH_SOURCE INFO: Getting backports packages... ${reset}"

   rm --recursive --force "$WHONIX_BINARY/$FUNCNAME"
   sudo $SUDO_OPTS mkdir --parents "$WHONIX_BINARY/$FUNCNAME"
   pushd "$WHONIX_BINARY/$FUNCNAME"

   ## Update $whonix_build_sources_list_primary package list while keeping
   ## previously updated regular package lists. In other words, prevent
   ## needlessly updating regular package lists.
   $apt_get_update_wrapper_source_path_full \
      ${APTGETOPT[@]} \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
      -o Dir::Etc::sourceparts="-" \
      -o APT::Get::List-Cleanup="0" \
      update

   ## spectre-meltdown-checker download can be disabled once Whonix is based on
   ## Debian 10 / buster.

   ## Download backports packages from Debian backports repository.
   sudo $SUDO_OPTS \
      apt-get source --yes \
         ${APTGETOPT[@]} \
         $apt_unattended_opts \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         -t "${whonix_build_apt_stable_release}-backports" \
         spectre-meltdown-checker

   sudo $SUDO_OPTS \
      apt-get download --yes \
         ${APTGETOPT[@]} \
         $apt_unattended_opts \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         -t "${whonix_build_apt_stable_release}-backports" \
         spectre-meltdown-checker

   local file_name package_absolute_path

   for file_name in ./*.deb ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedeb "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   for file_name in ./*.dsc ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedsc "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   ## Get rid of $whonix_build_sources_list_primary package list, while keeping
   ## regular package lists. In other words, prevent needlessly forgetting
   ## about regular package lists.
   apt-get update \
      --no-download \
      --list-cleanup

   popd

   true "${cyan}$BASH_SOURCE INFO: Got $FUNCNAME. ${reset}"
}

get_virtualbox_packages() {
   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   true "${cyan}$BASH_SOURCE INFO: Getting extra packages... ${reset}"

   rm --recursive --force "$WHONIX_BINARY/temp_extra_packages"
   sudo $SUDO_OPTS mkdir --parents "$WHONIX_BINARY/temp_extra_packages"
   pushd "$WHONIX_BINARY/temp_extra_packages"

   local architecture_list architecture
   local package_list_architecture_specific pkg

   architecture_list="amd64 i386"

   package_list_architecture_specific="virtualbox-guest-utils virtualbox-guest-x11"

   ## Use dpkg multiarch so we can download other architectures than the build host's one using apt-get.
   for architecture in $architecture_list ; do
      dpkg --add-architecture "$architecture"
   done

   ## Update $whonix_build_sources_list_primary package list while keeping
   ## previously updated regular package lists. In other words, prevent
   ## needlessly updating regular package lists.
   $apt_get_update_wrapper_source_path_full \
      ${APTGETOPT[@]} \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
      -o Dir::Etc::sourceparts="-" \
      -o APT::Get::List-Cleanup="0" \
      update

   ## Download VirtualBox guest additions from $whonix_build_sources_list_primary.
   sudo $SUDO_OPTS \
      apt-get source --yes \
         ${APTGETOPT[@]} \
         $apt_unattended_opts \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11

   sudo $SUDO_OPTS \
      apt-get download --yes \
         ${APTGETOPT[@]} \
         $apt_unattended_opts \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         virtualbox-guest-dkms

   for architecture in $architecture_list ; do
      for pkg in $package_list_architecture_specific ; do
         sudo $SUDO_OPTS \
            apt-get download --yes \
               ${APTGETOPT[@]} \
               $apt_unattended_opts \
               -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
               -o Dir::Etc::sourceparts="-" \
               "$pkg:$architecture"
      done
   done

   local file_name package_absolute_path

   for file_name in ./*.deb ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedeb "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   for file_name in ./*.dsc ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedsc "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   ## Get rid of $whonix_build_sources_list_primary package list, while keeping
   ## regular package lists. In other words, prevent needlessly forgetting
   ## about regular package lists.
   apt-get update \
      --no-download \
      --list-cleanup

   popd

   true "${cyan}$BASH_SOURCE INFO: Got extra packages. ${reset}"
}

get_tpo_packages() {
   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   true "${cyan}$BASH_SOURCE INFO: Getting TPO packages... ${reset}"

   rm --recursive --force "$WHONIX_BINARY/temp_tpo_packages"
   sudo $SUDO_OPTS mkdir --parents "$WHONIX_BINARY/temp_tpo_packages"
   pushd "$WHONIX_BINARY/temp_tpo_packages"

   local architecture_list architecture
   local package_list_architecture_specific pkg
   local gpg_temp_dir

   ## All architectures currently provided by deb.torproject.org at time of writing.
   architecture_list="armel armhf i386 amd64 arm64"

   ## Selected packages we want to mirror from deb.torproject.org to Whonix local/remote repository.
   package_list_architecture_specific="tor"
   package_list_architecture_generic="tor-geoipdb deb.torproject.org-keyring"

   ## Use dpkg multiarch so we can download other architectures than the build host's one using apt-get.
   for architecture in $architecture_list ; do
      dpkg --add-architecture "$architecture"
   done

   apt_source_key="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/usr/share/anon-shared-build-apt-sources-tpo/tpoarchive-keys.d/torprojectarchive.asc"
   apt_target_key="/etc/apt/trusted.gpg.d/tpo-temp.gpg"

   ## Sanity tests.
   test -f "$apt_source_key"
   test -f "$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list"

   ## TODO: Dir::Etc::trusted does not work anymore in Debian stretch.
   ## TODO: see https://lists.debian.org/deity/2017/01/msg00055.html
   rm -f "$apt_target_key"
   apt-key --keyring "$apt_target_key" add "$apt_source_key"

   rm -r -f "$apt_state_dir"
   mkdir -p "$apt_state_dir"
   chown -R "_apt:root" "$apt_state_dir"

   ## Update tpo package list while keeping
   ## previously updated regular package lists. In other words, prevent
   ## needlessly updating regular package lists.
   $apt_get_update_wrapper_source_path_full \
      ${APTGETOPT[@]} \
      -o Dir::State="$apt_state_dir" \
      -o Dir::Etc::trusted="$gpg_temp_dir/pubring.gpg" \
      -o Dir::Etc::trusted.d="-" \
      -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
      -o Dir::Etc::sourceparts="-" \
      -o APT::Get::List-Cleanup="0" \
      update

   ## Download packages from tpo repository.

   for pkg in $package_list_architecture_generic ; do
      sudo $SUDO_OPTS \
         apt-get source --yes \
            ${APTGETOPT[@]} \
            $apt_unattended_opts \
            -o Dir::State="$apt_state_dir" \
            -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
            -o Dir::Etc::sourceparts="-" \
            "$pkg"

      sudo $SUDO_OPTS \
         apt-get download --yes \
            ${APTGETOPT[@]} \
            $apt_unattended_opts \
            -o Dir::State="$apt_state_dir" \
            -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
            -o Dir::Etc::sourceparts="-" \
            "$pkg:all"
   done

   for pkg in $package_list_architecture_specific ; do
      sudo $SUDO_OPTS \
         apt-get source --yes \
            ${APTGETOPT[@]} \
            $apt_unattended_opts \
            -o Dir::State="$apt_state_dir" \
            -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
            -o Dir::Etc::sourceparts="-" \
            "$pkg"

      for architecture in $architecture_list ; do
         sudo $SUDO_OPTS \
            apt-get download --yes \
               ${APTGETOPT[@]} \
               $apt_unattended_opts \
               -o Dir::State="$apt_state_dir" \
               -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
               -o Dir::Etc::sourceparts="-" \
               "$pkg:$architecture"
      done
   done

   local file_name package_absolute_path

   for file_name in ./*.deb ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedeb "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   for file_name in ./*.dsc ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedsc "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   ## Get rid of tpo package list, while keeping
   ## regular package lists. In other words, prevent needlessly forgetting
   ## about regular package lists.
   apt-get update \
      --no-download \
      --list-cleanup

   ## TODO: same as above
   rm -f "$apt_target_key"

   popd

   true "${cyan}$BASH_SOURCE INFO: Got tpo packages. ${reset}"
}

create_whonix_debian_packages() {
   true "${cyan}$BASH_SOURCE INFO: Creating Whonix Debian Packages... ${reset}"

   local number_folders_total number_folder_current benchmark_time_start benchmark_took_time
   ## Thanks to: l0b0 - http://unix.stackexchange.com/a/20855/49297
   number_folders_total="$(find "$WHONIX_SOURCE_FOLDER/packages" -mindepth 1 -maxdepth 1 -type d -printf '\n' | wc -l)" || true
   number_folder_current="0"

   shopt -s nullglob
   shopt -s dotglob

   for item in $pkg_list; do
      item="$WHONIX_SOURCE_FOLDER/packages/$item"
      if [ ! -d "$item" ]; then
         true "INFO: Not a folder: $item"
         continue
      fi
      pushd "$item"
      number_folder_current="$(( number_folder_current + 1 ))"
      local base_name
      base_name="${item##*/}"
      if [ "$base_name" = "whonix-developer-meta-files" ]; then
         true "${cyan}INFO: Skipping $base_name as expected.${reset}"
         popd
         continue
      fi
      if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
         if [ "$(echo "$base_name" | grep "apparmor-profile-")" ]; then
            true "${cyan}INFO: Building apparmor profile: $base_name ${reset}"
         else
            true "${cyan}INFO${reset}: Skipping $base_name as expected because using whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only."
            popd
            continue
         fi
      fi
      true "${cyan}INFO: Will build now package ($number_folder_current / $number_folders_total): $base_name ${reset}"
      benchmark_time_start="$(date +%s)" || true
      ## The make_use_lintian is supported by the generic Makefile.
      #if [ "$base_name" = "qubes-whonix" ]; then
         #lintian_use_maybe="false"
      #else
      lintian_use_maybe="$make_use_lintian"
      #fi
      local make_file="Makefile"
      test -f "$make_file"
      sudo $SUDO_OPTS -E make -f "$make_file" reprepro-remove
      ## Using -E so environment variables make_use_lintian, make_use_cowbuilder, WHONIX_BUILD_APT_CODENAME gets passed.
      sudo $SUDO_OPTS -E make -f "$make_file" "$genmkfile_make_cmd"
      sudo $SUDO_OPTS -E make -f "$make_file" reprepro-add
      benchmark_took_time="$(benchmarktimeend "$benchmark_time_start")" || true
      popd
      true "${cyan}INFO: Done with build of package ($number_folder_current / $number_folders_total) (benchmark: $benchmark_took_time): $base_name ${reset}"
   done

   true "${cyan}$BASH_SOURCE INFO: Created Whonix Debian Packages. ${reset}"
}

create-debian-packages() {
   if [ "$WHONIX_BUILD_APT_CODENAME" = "" ]; then
      error "Variable WHONIX_BUILD_APT_CODENAME is empty!"
   fi
   true "${cyan}$BASH_SOURCE INFO: Going to update ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"
   sleep 3

   if [ ! "$FUNCTION" = "" ]; then
      eval $FUNCTION
      return 0
   fi

   source "$WHONIX_SOURCE_HELP_STEPS_FOLDER/git_sanity_test"

   git_sanity_test_main "$@"
   signing_key "$@"

   if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      get_virtualbox_packages "$@"
   fi

   ## It is possible this fails.
   ## This happened in past when both deb.torproject.org as well as
   ## packages.debian.org were tor (0.2.9.9-1) and apt considered
   ## packages.debian.org newer. In that case the following command has to be
   ## out commented.
   get_tpo_packages "$@"

   create_whonix_debian_packages "$@"
}

main() {
   root_check "$@"
   if [ "$WHONIX_BUILD_FLAVOR" = "whonix-custom-workstation" ]; then
      true "${cyan}INFO: Skipping creation of packages for custom workstation.${reset}"
   else
      create-debian-packages "$@"
   fi
}

main "$@"
