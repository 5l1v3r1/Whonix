#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

set -x

true "Currently running script: $0"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

WHONIX_BUILD_PARSED="1"
ROOT_CHECK="0"
VMNAME="internalrun"

source pre
source variables

cd "$MYDIR"
cd ..

create-debian-packages() {
   trap "error_handler_general" ERR INT TERM

   ## We need to create a local signing key for signing our local APT repository. Otherwise,
   ## apt-get would complain, that the package can not be verified. In theory, signing is not
   ## required, because the local APT repository never touches any networks. However, ignoring
   ## this warning while installing the meta package, which pull the other packages, could
   ## make apt-get ignore if those packages can not be verified either. Shipping an already
   ## created gpg snake oil (because known to the public) secret key is no option either,
   ## because anyone could get this key, which also needs to be added to apt-key. In that case,
   ## anyone could sign packages with this snake oil key. Therefore we play it safe and
   ## create a local signing key on the build machine.

   ## We only automatically create am auto local signing key, in case the builder did not
   ## provide a custom folder for WHONIX_LOCAL_SIGNING_KEY_FOLDER. This is determined in
   ## help-steps/variables.
   if [ "$WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY" = "1" ]; then
      true "${cyan}$0 INFO: Using ${under}auto local signing key method${eunder}... ${reset}"

      ## Check, if we previously already created a local OpenPGP signing key.
      if [ ! -f "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"/done ]; then
         true "${cyan}$0 INFO: We do not yet have a local OpenPGP signing key for our local APT repository. Creating one... ${reset}"

         sudo -E -u "$USERNAME" mkdir --parents "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"

         ## chmod 700, so gpg will not complain about folder permissions
         sudo -E -u "$USERNAME" chmod 700 "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"

         ## http://www.gnupg.org/documentation/manuals/gnupg-devel/Unattended-GPG-key-generation.html

         echo "
            Key-Type: RSA
            Key-Length: 4096
            Subkey-Type: RSA
            Subkey-Length: 4096
            Name-Real: Whonix auto generated local APT signing key
            Name-Email: whonix@local-signing.key
            Expire-Date: 0
            Preferences: SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
         " | sudo -E -u "$USERNAME" gpg \
                                    --no-default-keyring \
                                    --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
                                    --batch \
                                    --gen-key

         sudo -E -u "$USERNAME" touch "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"/done

         true "${cyan}$0 INFO: Created local OpenPGP signing key for our local APT repository. ${reset}"
      else
         true "${cyan}$0 INFO: We already have a local OpenPGP signing key for our local APT repository. ${reset}"
      fi
   else
      true "${cyan}$0 INFO: Using ${under}custom signing key method${eunder}... ${reset}"
   fi

   ## Just output list of secret keys in that very folder in case that ever breaks and someone ever sends
   ## a build log, this will help with debugging.
   sudo -E -u "$USERNAME" gpg \
                          --no-default-keyring \
                          --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
                          --keyid-format "0xlong" \
                          --fingerprint \
                          --list-secret-keys

   if [ "$whonix_build_new_changelog_version" = "$whonix_build_old_changelog_version" ]; then
      true "${bold}${cyan}$0 INFO: whonix_build_new_changelog_version equals whonix_build_old_changelog_version, not creating new Debian packages. ${reset}"
      exit 0
   fi

   if [ -n "$(git status --porcelain)" ]; then
      true "${bold}${red}$0 ERROR: Git reports uncommitted changes! ${reset}"
      true "${cyan}$0 INFO: Running \"git status\" for your convenience. ${reset}"
      git status
      true "${cyan}$0 INFO: Running git \"clean --dry-run -d --force --force\" for your convenience. ${reset}"
      git clean --dry-run -d --force --force

      true "${cyan}$0 You most likely like to revert debian/changelog to run:${reset}
    git checkout -- debian/changelog
    "$WHONIX_SOURCE_HELP_STEPS_FOLDER/cleanup-files"
${cyan}or if you know what you are doing:${reset}
    git clean --dry-run -d --force --force
    git reset --hard"

      error "Uncommitted changes! See above!"
   fi

   true "${cyan}$0 INFO: Going to update ${under}"$WHONIX_BUILD_APT_CODENAME"${eunder} APT repository... ${reset}"
   sleep 3

   cd "$MYDIR"
   cd ..

   true "${cyan}$0 INFO: Cleaning old packages... ${reset}"

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/cleanup-files"

   true "${cyan}$0 INFO: Cleaned old packages. ${reset}"

   true "${cyan}$0 INFO: Automatically bumping version number in debian/changelog... ${reset}"

   ## debchange in Ubuntu somehow does not support --vendor, only --distributor.
   ## Small workaround for travis-ci (using Ubuntu).
   if [ "$whonix_build_on_operating_system" = "ubuntu" ]; then
      ## Using --distributor when Ubuntu is detected.
      debchange_vendor_cmd="--distributor"
   else
      ## Otherwise fall back to --vendor.
      debchange_vendor_cmd="--vendor"
   fi

   ## Debugging.
   faketime --version
   ls -la ./debian/changelog || true

   ## bump changelog version numbers
   ## whonix is written in lower case,
   ## because that's the name of the file in /etc/dpkg/origins/
   sudo -E -u "$USERNAME" \
      faketime "2013-08-15T11:02:35" \
         debchange \
            $debchange_vendor_cmd "whonix" \
            --create \
            --package "whonix" \
            --distribution "$WHONIX_BUILD_APT_CODENAME" \
            --newversion "$whonix_build_new_changelog_version" \
            "This is an auto-generated file."

   sudo -E -u "$USERNAME" \
      faketime "2013-08-15T11:02:35" \
         debchange \
            --append \
            "Local auto bump version. Build from:"

   sudo -E -u "$USERNAME" \
      faketime "2013-08-15T11:02:35" \
         debchange \
            --append \
            "whonix_build_current_git_head: $whonix_build_current_git_head"

   sudo -E -u "$USERNAME" \
      faketime "2013-08-15T11:02:35" \
         debchange \
            --append \
            "whonix_build_new_changelog_version: $whonix_build_new_changelog_version"

   sudo -E -u "$USERNAME" \
      faketime "2013-08-15T11:02:35" \
         debchange \
            --append \
            "whonix_build_closest_git_tag: $whonix_build_closest_git_tag"

   ## Debugging.
   ls -la ./debian/changelog || true
   cat ./debian/changelog

   true "${cyan}$0 INFO: Bumped version number in debian/changelog. ${reset}"

   ## Creating upstream tarball, because we are creating a non-native Debian package.
   true "${cyan}$0 INFO: Creating upstream tarball... ${reset}"

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/make-debian-package-upstream-tarball"

   true "${cyan}$0 INFO: Created upstream tarball. ${reset}"

   true "${cyan}$0 INFO: Creating deb packages... ${reset}"

   #sudo -E -u "$USERNAME" \
      #debuild -p"gpg --no-default-keyring --homedir $WHONIX_LOCAL_SIGNING_KEY_FOLDER --default-key $DEBEMAIL"

   ## --rootcmd as per https://wiki.debian.org/ReproducibleBuilds#How_to_build_a_deb_using_faketime
   ##
   ## -p (**-p**sign-command) is understood by dpkg-buildpackage.
   ## See also man dpkg-buildpackage.
   ##
   ## -sa is understood by dpkg-buildpackage, it forces the inclusion of the original source
   ## See also http://www.debian.org/doc/manuals/maint-guide/upload.en.html.
   sudo -E -u "$USERNAME" \
      faketime "2013-08-15T11:02:35" \
         debuild \
            --rootcmd="$WHONIX_SOURCE_HELP_STEPS_FOLDER/gain-root-command" \
            -p"gpg \
               --no-default-keyring \
               --digest-algo sha512 \
               --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
               --default-key "$DEBEMAIL"
               " \
            -sa

   ## Debugging.
   ls -la ./debian/changelog || true

   true "${cyan}$0 INFO: Created deb packages. ${reset}"

   if [ "$WHONIX_BUILD_APT_CODENAME" = "local" ]; then
      true "${cyan}$0 INFO: Purging ${under}local${eunder} APT repository... ${reset}"

      sudo -E -u "$USERNAME" \
         reprepro \
            -V \
            -V \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            removematched "$WHONIX_BUILD_APT_CODENAME" "*"

      true "${cyan}$0 INFO: Done, purged ${under}"$WHONIX_BUILD_APT_CODENAME"${eunder} APT repository. ${reset}"
   else
      true "${cyan}$0 INFO: Not purging APT repository, because distribution is ${under}"$WHONIX_BUILD_APT_CODENAME"${eunder}. ${reset}"
   fi

   true "${cyan}$0 INFO: Creating ${under}"$WHONIX_BUILD_APT_CODENAME"${eunder} APT repository... ${reset}"
   true "${cyan}$0 INFO: Importing .dsc file... ${reset}"

   sudo -E -u "$USERNAME" \
      reprepro \
         -V \
         -V \
         $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
         includedsc "$WHONIX_BUILD_APT_CODENAME" ../*.dsc

   true "${cyan}$0 INFO: Done, imported .dsc file. ${reset}"

   true "${cyan}$0 INFO: Importing .changes file... ${reset}"

   sudo -E -u "$USERNAME" \
      reprepro \
         -V \
         -V \
         $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
         include "$WHONIX_BUILD_APT_CODENAME" ../*.changes

   true "${cyan}$0 INFO: Done, imported .changes file. ${reset}"

## Old method. We do not need to import .deb files for now.
#   sudo -E -u "$USERNAME" \
#      reprepro \
#         --gnupghome "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
#         --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
#         $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
#         includedeb "$WHONIX_BUILD_APT_CODENAME" ../*.deb

   true "${cyan}$0 INFO: Done, created ${under}"$WHONIX_BUILD_APT_CODENAME"${eunder} APT repository. ${reset}"
}

true "${bold}INFO: Currently running script: $0 ${reset}"
create-debian-packages
true "${bold}INFO: End of: $0 No error detected.${reset}"
