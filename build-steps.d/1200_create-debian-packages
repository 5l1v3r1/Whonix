#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

whonix_build_one_parsed="1"
VMNAME="internalrun"

source pre
source colors
source variables

root_check

cd "$MYDIR"
cd ..

signing_key() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   true "INFO: GPG_AGENT_INFO: $GPG_AGENT_INFO"
   if [ "$WHONIX_BUILD_SIGN_LOCAL_REPOSITORY" = "false" ]; then
      true
   else
      if [ "$GPG_AGENT_INFO" = "" ]; then
         true "${cyan}${bold}INFO: Variable GPG_AGENT_INFO is not set. gnupg-agent will not be available. Did you forget adding -E to sudo?${reset}"
      fi
      ## Eventually letting builder cache its gpg passwords early, so we do not
      ## pause the build process later when reprepro creates the local apt
      ## repository.
      sudo -E -u "$user_name" \
         "$WHONIX_SOURCE_HELP_STEPS_FOLDER/gpg_test_sign"
   fi
}

check_for_untagged_commits() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   git_tag_nearest="$(git describe --always --abbrev=0)"
   git_tag_current="$(git describe --always --abbrev=1000000000)"

   ## Example git_tag_nearest:
   ## 9.6

   ## Example git_tag_current:
   ## 10.0.0.3.7-developers-only-6-g505c39d44d2a08451f7ff53ce67d78745e05816b

   true "${cyan}$BASH_SOURCE INFO: git_tag_nearest: $git_tag_nearest ${reset}"
   true "${cyan}$BASH_SOURCE INFO: git_tag_current: $git_tag_current ${reset}"

   if [ "$git_tag_nearest" == "$git_tag_current" ]; then
      true "${cyan}$BASH_SOURCE INFO: Git reports tagged commit. ${reset}"
   else
      if [ "$whonix_build_ignore_untagged" = "true" ]; then
         true "${bold}${cyan}$BASH_SOURCE INFO: Git reports a untagged commit! But you requested to ignore untagged commits, continuing... ${reset}"
      else
         true "${bold}${red}---------------------------------------------------------------------${reset}"
         true "${bold}${red}$BASH_SOURCE ERROR: Git reports a untagged commit! ${reset}"
         true "${cyan}$BASH_SOURCE INFO: (And you are not using ${under}--allow-untagged true${eunder}, \
which you also should not do for security reasons, unless you are a developer or advanced user and know what you are doing. \
Such as in case you added custom commits.) ${reset}"
         true "${cyan}$BASH_SOURCE INFO: (As a developer or advanced user you might want to use:
${under}--allow-untagged true${eunder} ${under}--allow-uncommitted true${eunder}). ${reset}"
         true "${cyan}$BASH_SOURCE INFO: (See build documentation on how to verify and checkout git tags.)${reset}"
         true "${bold}${red}---------------------------------------------------------------------${reset}"

         error "Untagged commit! See above!"
         true
      fi
   fi
}

check_for_uncommitted_changes() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   if [ -n "$(git status --porcelain)" ]; then
      if [ "$whonix_build_ignore_uncommitted" = "true" ]; then
         true "${bold}${cyan}$BASH_SOURCE INFO: Git reports uncommitted changes! But you requested to ignore uncommitted changes, continuing... ${reset}"
         true "${cyan}$BASH_SOURCE INFO: Running \"git status\" for debugging. ${reset}"
         git status
         true "${cyan}$BASH_SOURCE INFO: Running git \"clean -d --force --force --dry-run\" for debugging. ${reset}"
         git clean -d --force --force --dry-run
         true
      else
         true "${bold}${red}---------------------------------------------------------------------${reset}"
         true "${bold}${red}$BASH_SOURCE ERROR: Git reports uncommitted changes! ${reset}"
         true "${cyan}$BASH_SOURCE INFO: (And you are not using ${under}--allow-uncommitted true${eunder}, \
which you also should not do for security reasons, unless you are a developer or advanced user and know what you are doing. \
Such as in case you added custom code.) ${reset}"
         true "${cyan}$BASH_SOURCE INFO: (As a developer or advanced user you might want to use:
${under}--allow-untagged true${eunder} ${under}--allow-uncommitted true${eunder}). ${reset}"
         true "${cyan}$BASH_SOURCE INFO: Running \"git status\" for your convenience. ${reset}"
         git status
         true "${cyan}$BASH_SOURCE INFO: Running git \"clean -d --force --force --dry-run\" for your convenience. ${reset}"
         git clean -d --force --force --dry-run
         true "${cyan}$BASH_SOURCE You most likely like to run:${reset}
    ${under}$WHONIX_SOURCE_HELP_STEPS_FOLDER/cleanup-files${eunder}
${cyan}or if you know what you are doing:${reset}
    ${under}git clean -d --force --force${eunder}
    ${under}git reset --hard${eunder}
"
         true "${bold}${red}---------------------------------------------------------------------${reset}"

         error "Uncommitted changes! See above!"
         true
      fi
   fi
}

cleanup_old_packages() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   true "${cyan}$BASH_SOURCE INFO: Cleaning old packages... ${reset}"

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/cleanup-files"

   true "${cyan}$BASH_SOURCE INFO: Cleaned old packages. ${reset}"
}

get_extra_packages() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   true "${cyan}$BASH_SOURCE INFO: Getting extra packages... ${reset}"

   rm --recursive --force "$WHONIX_BINARY/temp_extra_packages"
   sudo -E -u "$user_name" mkdir --parents "$WHONIX_BINARY/temp_extra_packages"
   cd "$WHONIX_BINARY/temp_extra_packages"

   ## Implemented in help-steps/pre.
   aptcachemaybeenable

   ## Update $whonix_build_sources_list_newer package list while keeping
   ## previously updated regular package lists. In other words, prevent
   ## needlessly updating regular package lists.
   $apt_get_update_wrapper_source_path_full \
      $apt_timeout_opts \
      $apt_verify_opts \
      $apt_get_gpgv_opts \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_newer" \
      -o Dir::Etc::sourceparts="-" \
      -o APT::Get::List-Cleanup="0" \
      update

   ## Download python-stem from $whonix_build_sources_list_newer.
   sudo -E -u "$user_name" \
      apt-get download --yes \
         $apt_timeout_opts \
         $apt_verify_opts \
         $apt_unattended_opts \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_newer" \
         -o Dir::Etc::sourceparts="-" \
         --target-release "$whonix_build_apt_newer_release_codename" \
         python-stem

   true "INFO: apt-get download exit code: $?"

   ## Get rid of $whonix_build_sources_list_newer package list, while keeping
   ## regular package lists. In other words, prevent needlessly forgetting
   ## about regular package lists.
   apt-get update \
      --no-download \
      --list-cleanup

   ## Implemented in help-steps/pre.
   aptcachedisable

   true "${cyan}$BASH_SOURCE INFO: Got extra packages. ${reset}"
}

create_whonix_debian_packages_without_building_system() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   true "${cyan}$BASH_SOURCE INFO: Creating Whonix Debian Packages... ${reset}"

   shopt -s nullglob
   shopt -s dotglob

   for item in "$WHONIX_SOURCE_FOLDER/packages/"*; do
      if [ ! -d "$item" ]; then
         true "INFO: Not a folder: $item"
         continue
      fi
      cd "$item"
      local base_name
      base_name="${item##*/}"
      if [ "$base_name" = "whonix-developer-meta-files" ]; then
         true "INFO: Skipping $base_name as expected."
         continue
      fi
      if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
         if [ "$(echo "$base_name" | grep "apparmor-profile-")" ]; then
            true "${cyan}INFO: Building apparmor profile: $base_name ${reset}"
         else
            true "${cyan}INFO${reset}: Skipping $base_name as expected because using whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only."
            continue
         fi
      fi
      ## The make_use_lintian is supported by the generic Makefile.
      if [ "$base_name" = "qubes-whonix" ]; then
         ## Workaround for qubes-whonix package.
         ## Skip lintian fail until these are fixed.
         ## https://phabricator.whonix.org/T186
         make_use_lintian="false"
      else
         make_use_lintian="true"
      fi
      export make_use_lintian
      local make_file="Makefile"
      test -f "$make_file"
      if [ "$CI" = "true" ]; then
         ## Hiding,
         ## "ERROR: ld.so: object '/usr/$LIB/faketime/libfaketime.so.1' from LD_PRELOAD cannot be preloaded: ignored."
         ## on CI systems because otherwise, "Maximum output exceeded".
         sudo -E -u "$user_name" \
            make -f "$make_file" deb-pkg >/dev/null 2>&1
      else
         sudo -E -u "$user_name" \
            make -f "$make_file" deb-pkg
      fi
   done

   true "${cyan}$BASH_SOURCE INFO: Created Whonix Debian Packages. ${reset}"
}

create_whonix_debian_packages_using_cowbuilder() {
   trap "error_handler_general" ERR INT TERM

   ## Implemented in help-steps/pre.
   maybe_enable_apt_cache

   ## TODO
   package_build_result_temp_folder="$WHONIX_BINARY/packages_temp/build_result"
   package_build_pkg_src_temp_folder="$WHONIX_BINARY/packages_temp/pkg_src"

   sudo -E -u "$user_name" mkdir --parents "$package_build_result_temp_folder"
   sudo -E -u "$user_name" mkdir --parents "$package_build_pkg_src_temp_folder"

   ## TODO
   #create_or_update="--create"
   create_or_update="--update"

   ## TODO:
   ## Install config-package-dev from jessie as build dependency into wheezy base.cow.

   cowbuilder \
      $create_or_update \
      --distribution "$whonix_build_apt_stable_release" \
      --mirror "$whonix_build_apt_sources_mirror" \
      --extrapackages "$whonix_build_script_build_dependency" \
      --buildresult "$package_build_result_temp_folder"

   for item in "$WHONIX_SOURCE_FOLDER/packages/"*; do
      true "item: $item"
      if [ ! -d "$item" ]; then
         true "INFO: Not a folder: $item"
         continue
      fi

      ## Change directory to package folder, so get_variables works.
      cd "$item"

      ## Source make-helper.bsh to get function make_get_variables.
      source make-helper.bsh

      ## Sets:
      ## - make_main_package_name
      ## - make_pkg_version
      ## - make_pkg_revision
      make_get_variables

      ## Required to configure output path for "make dist" and "make debdist".
      export DISTDIR="$package_build_pkg_src_temp_folder"

      ## Create upstream_tarball.
      sudo -E -u "$user_name" \
         make dist

      ## Create debian_source_tarball.
      sudo -E -u "$user_name" \
         make debdist

      unset DISTDIR

      ## Change directory to $package_build_pkg_src_temp_folder so dpkg-source
      ## will create the .dsc file within that folder.
      cd "$package_build_pkg_src_temp_folder"

      local upstream_tarball debian_source_control_file
      upstream_tarball="$package_build_pkg_src_temp_folder/${make_main_package_name}_${make_pkg_version}.orig.tar.gz"
      debian_source_tarball="$package_build_pkg_src_temp_folder/${make_main_package_name}_${make_pkg_version}-${make_pkg_revision}.debian.tar.gz"
      debian_source_control_file="$package_build_pkg_src_temp_folder/${make_main_package_name}_${make_pkg_version}-${make_pkg_revision}.dsc"

      ## Sanity tests.
      test -f "$debian_source_tarball"
      test -f "$upstream_tarball"

      ## Create debian_source_control_file.
      sudo -E -u "$user_name" \
         dpkg-source \
            -c"$item/debian/control" \
            -l"$item/debian/changelog" \
            --format="3.0 (custom)" \
            --target-format="3.0 (quilt)" \
            -b / \
            "$debian_source_tarball" \
            "$upstream_tarball"

      ## Sanity test.
      test -f "$debian_source_control_file"

      cd "$item"

      ## TODO: Obsolete? "cowbuilder does not like exported bash functions for
      ## some reason. Not preserving environment to get rid of exported bash
      ## functions." - Should not require "sudo" anymore. Likely it has been
      ## fixed by:
      ## https://github.com/Whonix/Whonix/issues/367
      cowbuilder \
         --build "$debian_source_control_file" \
         --distribution "$whonix_build_apt_stable_release" \
         --mirror "$whonix_build_apt_sources_mirror" \
         --extrapackages "$whonix_build_script_build_dependency" \
         --buildresult "$package_build_result_temp_folder"
   done

   ## Implemented in help-steps/pre.
   disable_apt_cache
}

create_whonix_repository() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   if [ "$WHONIX_BUILD_APT_CODENAME" = "local" ]; then
      true "${cyan}$BASH_SOURCE INFO: Purging ${under}local${eunder} APT repository... ${reset}"
      sudo -E -u "$user_name" \
         reprepro \
            -V \
            -V \
            $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            removematched "$WHONIX_BUILD_APT_CODENAME" "*"
      true "${cyan}$BASH_SOURCE INFO: Done, purged ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository. ${reset}"
   else
      true "${cyan}$BASH_SOURCE INFO: Not purging APT repository, because distribution is ${under}${WHONIX_BUILD_APT_CODENAME}${eunder}. ${reset}"
   fi

   true "${cyan}$BASH_SOURCE INFO: Creating ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"

   shopt -s dotglob
   shopt -s nullglob
   local file_name

   true "${cyan}$BASH_SOURCE INFO: Importing .deb files... ${reset}"
   for file_name in "$WHONIX_SOURCE_FOLDER/packages/"*".deb"; do
      sudo -E -u "$user_name" \
         reprepro \
            --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
            $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            includedeb "$WHONIX_BUILD_APT_CODENAME" "$file_name"
   done
   true "${cyan}$BASH_SOURCE INFO: Imported .deb files. ${reset}"

   true "${cyan}$BASH_SOURCE INFO: Importing temp_extra_packages .deb files... ${reset}"
   for file_name in "$WHONIX_BINARY/temp_extra_packages/"*".deb"; do
      sudo -E -u "$user_name" \
         reprepro \
            --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
            $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            includedeb "$WHONIX_BUILD_APT_CODENAME" "$file_name"
   done
   true "${cyan}$BASH_SOURCE INFO: Imported temp_extra_packages .deb files. ${reset}"

   true "${cyan}$BASH_SOURCE INFO: Done, created ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository. ${reset}"
}

create-debian-packages() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   cleanup_old_packages
   check_for_untagged_commits
   check_for_uncommitted_changes

   true "${cyan}$BASH_SOURCE INFO: Going to update ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"
   sleep 3

   signing_key

   ## TODO: enable
   #get_extra_packages

   ## TODO: cmd option
   #create_whonix_debian_packages_without_building_system

   ## TODO: cmd option
   create_whonix_debian_packages_using_cowbuilder

   ## TODO: enable
   ## TODO: adjust path when using create_whonix_debian_packages_using_cowbuilder
   #create_whonix_repository
}

parse_cmd() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   while :
   do
       case $1 in
           --flavor)
               if [ "$2" = "whonix-custom-workstation" ]; then
                  WHONIX_BUILD_CUSTOM_WORKSTATION="1"
               fi
               shift 2
               ;;
           --allow-untagged)
               if [ "$2" = "false" ]; then
                  true "${cyan}INFO: Would stop if building form untagged commits.${reset}"
               elif [ "$2" = "true" ]; then
                  true "${cyan}INFO: Would build form untagged commits.${reset}"
                  export whonix_build_ignore_untagged="true"
               else
                  echo "${red}${bold}ERROR: supported options for --allow-untagged are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --allow-uncommitted)
               if [ "$2" = "false" ]; then
                  true "${cyan}INFO: Would stop if uncommitted changes detected.${reset}"
               elif [ "$2" = "true" ]; then
                  true "${cyan}INFO: Would ignore if uncommitted changes detected.${reset}"
                  export whonix_build_ignore_uncommitted="true"
               else
                  echo "${red}${bold}ERROR: supported options for --allow-uncommitted are 'true' or 'false'.${reset}"
                  exit 1
               fi
               shift 2
               ;;
           --apparmor)
               whonix_build_pkg_apparmor_only="true"
               shift
               ;;
           *)
               break
               ;;
       esac
   done
}

true "${bold}${under}INFO: Currently running script: $BASH_SOURCE ${1+"$@"}${reset}"
parse_cmd ${1+"$@"}
if [ "$WHONIX_BUILD_CUSTOM_WORKSTATION" = "1" ]; then
   true "${cyan}INFO: Skipping creation of packages for custom workstation.${reset}"
else
   create-debian-packages
fi
benchmarktimeend ## sets benchmark_took_time (implemented in help-steps/pre)
true "${bold}${under}INFO: End of: $BASH_SOURCE ${1+"$@"} | $whonix_build_error_counter error(s) detected. (benchmark: $benchmark_took_time)${reset}"
