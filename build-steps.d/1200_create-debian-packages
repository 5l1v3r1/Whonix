#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

whonix_build_one_parsed="1"
VMNAME="internalrun"

source pre
source colors
source variables

cd "$MYDIR"
cd ..

signing_key() {
   true "INFO: GPG_AGENT_INFO: $GPG_AGENT_INFO"
   if [ "$WHONIX_BUILD_SIGN_LOCAL_REPOSITORY" = "false" ]; then
      true
   else
      if [ "$GPG_AGENT_INFO" = "" ]; then
         true "${cyan}${bold}INFO: Variable GPG_AGENT_INFO is not set. gnupg-agent will not be available. Did you forget adding -E to sudo?${reset}"
      fi
      ## Eventually letting builder cache its gpg passwords early, so we do not
      ## pause the build process later when reprepro creates the local apt
      ## repository.
      sudo -E -u "$user_name" \
         "$WHONIX_SOURCE_HELP_STEPS_FOLDER/gpg_test_sign"
   fi
}

cleanup_old_packages() {
   true "${cyan}$BASH_SOURCE INFO: Cleaning old packages... ${reset}"

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/cleanup-files"

   true "${cyan}$BASH_SOURCE INFO: Cleaned old packages. ${reset}"
}

get_extra_packages() {
   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   true "${cyan}$BASH_SOURCE INFO: Getting extra packages... ${reset}"

   rm --recursive --force "$WHONIX_BINARY/temp_extra_packages"
   sudo -E -u "$user_name" mkdir --parents "$WHONIX_BINARY/temp_extra_packages"
   cd "$WHONIX_BINARY/temp_extra_packages"

   ## Implemented in help-steps/pre.
   aptcachemaybeenable

   ## Update $whonix_build_sources_list_newer package list while keeping
   ## previously updated regular package lists. In other words, prevent
   ## needlessly updating regular package lists.
   $apt_get_update_wrapper_source_path_full \
      $apt_timeout_opts \
      $apt_verify_opts \
      $apt_get_gpgv_opts \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_newer" \
      -o Dir::Etc::sourceparts="-" \
      -o APT::Get::List-Cleanup="0" \
      update

   ## Download python-stem from $whonix_build_sources_list_newer.
   sudo -E -u "$user_name" \
      apt-get download --yes \
         $apt_timeout_opts \
         $apt_verify_opts \
         $apt_unattended_opts \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_newer" \
         -o Dir::Etc::sourceparts="-" \
         --target-release "$whonix_build_apt_newer_release_codename" \
         python-stem

   true "INFO: apt-get download exit code: $?"

   ## Get rid of $whonix_build_sources_list_newer package list, while keeping
   ## regular package lists. In other words, prevent needlessly forgetting
   ## about regular package lists.
   apt-get update \
      --no-download \
      --list-cleanup

   ## Implemented in help-steps/pre.
   aptcachedisable

   true "${cyan}$BASH_SOURCE INFO: Got extra packages. ${reset}"
}

create_whonix_debian_packages_without_building_system() {
   true "${cyan}$BASH_SOURCE INFO: Creating Whonix Debian Packages... ${reset}"

   ## TODO: lintian warnings when building packages on jessie - https://phabricator.whonix.org/T281
   #[ -n "$make_use_lintian" ] || make_use_lintian="true"
   [ -n "$make_use_lintian" ] || make_use_lintian="open"

   shopt -s nullglob
   shopt -s dotglob

   for item in "$WHONIX_SOURCE_FOLDER/packages/"*; do
      if [ ! -d "$item" ]; then
         true "INFO: Not a folder: $item"
         continue
      fi
      cd "$item"
      local base_name
      base_name="${item##*/}"
      if [ "$base_name" = "whonix-developer-meta-files" ]; then
         true "${cyan}INFO: Skipping $base_name as expected.${reset}"
         continue
      fi
      if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
         if [ "$(echo "$base_name" | grep "apparmor-profile-")" ]; then
            true "${cyan}INFO: Building apparmor profile: $base_name ${reset}"
         else
            true "${cyan}INFO${reset}: Skipping $base_name as expected because using whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only."
            continue
         fi
      fi
      true "${cyan}INFO: Will build now package: $base_name ${reset}"
      ## The make_use_lintian is supported by the generic Makefile.
      if [ "$base_name" = "qubes-whonix" ]; then
         ## Workaround for qubes-whonix package.
         ## Skip lintian fail until these are fixed.
         ## https://phabricator.whonix.org/T186
         lintian_use_maybe="false"
      else
         lintian_use_maybe="$make_use_lintian"
      fi
      local make_file="Makefile"
      test -f "$make_file"
      if [ "$CI" = "true" ]; then
         ## Hiding,
         ## "ERROR: ld.so: object '/usr/$LIB/faketime/libfaketime.so.1' from LD_PRELOAD cannot be preloaded: ignored."
         ## on CI systems because otherwise, "Maximum output exceeded".
         sudo -E -u "$user_name" \
            make_use_lintian="$lintian_use_maybe" make -f "$make_file" deb-pkg >/dev/null 2>&1
      else
         sudo -E -u "$user_name" \
            make_use_lintian="$lintian_use_maybe" make -f "$make_file" deb-pkg
      fi
      true "${cyan}INFO: Done with build of package: $base_name ${reset}"
   done

   true "${cyan}$BASH_SOURCE INFO: Created Whonix Debian Packages. ${reset}"
}

create_whonix_repository() {
   if [ "$WHONIX_BUILD_APT_CODENAME" = "local" ]; then
      true "${cyan}$BASH_SOURCE INFO: Purging ${under}local${eunder} APT repository... ${reset}"
      sudo -E -u "$user_name" \
         reprepro \
            -V \
            -V \
            $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            removematched "$WHONIX_BUILD_APT_CODENAME" "*"
      true "${cyan}$BASH_SOURCE INFO: Done, purged ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository. ${reset}"
   else
      true "${cyan}$BASH_SOURCE INFO: Not purging APT repository, because distribution is ${under}${WHONIX_BUILD_APT_CODENAME}${eunder}. ${reset}"
   fi

   true "${cyan}$BASH_SOURCE INFO: Creating ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"

   shopt -s dotglob
   shopt -s nullglob
   local file_name

   true "${cyan}$BASH_SOURCE INFO: Importing .deb files... ${reset}"
   for file_name in "$WHONIX_SOURCE_FOLDER/packages/"*".deb"; do
      sudo -E -u "$user_name" \
         reprepro \
            --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
            $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            includedeb "$WHONIX_BUILD_APT_CODENAME" "$file_name"
   done
   true "${cyan}$BASH_SOURCE INFO: Imported .deb files. ${reset}"

   true "${cyan}$BASH_SOURCE INFO: Importing temp_extra_packages .deb files... ${reset}"
   for file_name in "$WHONIX_BINARY/temp_extra_packages/"*".deb"; do
      sudo -E -u "$user_name" \
         reprepro \
            --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
            $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            includedeb "$WHONIX_BUILD_APT_CODENAME" "$file_name"
   done
   true "${cyan}$BASH_SOURCE INFO: Imported temp_extra_packages .deb files. ${reset}"

   true "${cyan}$BASH_SOURCE INFO: Done, created ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository. ${reset}"
}

create-debian-packages() {
   cleanup_old_packages

   source "$WHONIX_SOURCE_HELP_STEPS_FOLDER/git_sanity_test" ${1+"$@"}
   git_sanity_test_main ${1+"$@"}

   true "${cyan}$BASH_SOURCE INFO: Going to update ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"
   sleep 3

   signing_key
   #get_extra_packages
   create_whonix_debian_packages_without_building_system
   create_whonix_repository
}

parse_cmd() {
   while :
   do
       case $1 in
           --flavor)
               if [ "$2" = "whonix-custom-workstation" ]; then
                  WHONIX_BUILD_CUSTOM_WORKSTATION="1"
               fi
               shift 2
               ;;
           --apparmor)
               whonix_build_pkg_apparmor_only="true"
               shift
               ;;
           *)
               break
               ;;
       esac
   done
}

main() {
   root_check
   parse_cmd ${1+"$@"}
   if [ "$WHONIX_BUILD_CUSTOM_WORKSTATION" = "1" ]; then
      true "${cyan}INFO: Skipping creation of packages for custom workstation.${reset}"
   else
      create-debian-packages ${1+"$@"}
   fi
}

main ${1+"$@"}
