#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source variables

create-debian-raw-image() {
   trap "error_handler_general" ERR INT TERM

   mkdir --parents "$WHONIX_BINARY/"
   chown --recursive "$user_name:$user_name" "$WHONIX_BINARY/"

   ## If whonix_build is run with --fast1 switch.
   if [ "$WHONIX_BUILD_FAST1" = "1" ]; then
      echo "${bold}${cyan}INFO: run with --fast1 switch, skipping $BASH_SOURCE. ${reset}"
      exit 0
   fi

   ARCH="$(uname --machine)"
   true "${cyan}$BASH_SOURCE INFO: Architecture $ARCH detected.${reset}"
   true "${cyan}INFO: BUILD_TARGET_ARCH set to: $BUILD_TARGET_ARCH${reset}"

   mkdir --parents "/etc/debootstrap/etc/apt/"
   cp "$whonix_build_sources_list" "/etc/debootstrap/etc/apt/sources.list"

   ## Info.
   true "${cyan}INFO: Using the following /etc/apt/sources.list for grml-debootstrap: ${reset}"
   cat "/etc/debootstrap/etc/apt/sources.list"

   ## {{ grml-debootstrap environment variables

   ## grml-debootstrap variables are documented in /etc/debootstrap/config and
   ## https://github.com/grml/grml-debootstrap/blob/master/config

   ## Using export, so grml-debootstrap can read it.

   export DPKG_OPTIONS="$apt_timeout_opts $apt_verify_opts"

   ## Not using grml-debootstrap to install a kernel. A chroot-post.d script
   ## will take care of that.
   export KERNEL="none"

   ## Do not install non-Free software.
   export COMPONENTS='main'

   ## Integrity test.
   export FSCK='yes'

   ## Set time zone to UTC. Not that important, we will install our own
   ## /etc/timezone file later anyway. Just in case.
   export TIMEZONE='UTC'

   ## Do not clean APT cache after installation is finished to safe time. We do
   ## this later in a chroot-post.d script.
   export RM_APTCACHE='no'

   ## We do not need to upgrade the image, because when we create an image,
   ## we end up with the most current versions from the repository we are using
   ## anyway. We also do not install any other packages or use any other
   ## repositories, just use grml-debootstrap to create a minimal image.
   ## Would be also no good idea to rely on grml-debootstrap's upgrade
   ## function, because grml-debootstrap does not honor our apt options. (For
   ## higher network timeouts, ignore valid-until, since we are building from
   ## the frozen snapshot.debian.org repository. See also
   ## buildconfig-d/30_apt.) https://github.com/grml/grml-debootstrap/issues/8
   ## Even if we wanted to upgrade the system, we'd be better off using our own
   ## build-step for that.
   export UPGRADE_SYSTEM='no'

   ## Use fixed disk identifier. For verifiable builds.
   ## grml-debootstrap sets it to:
   ## 26ada0c0-1165-4098-884d-aafd2220c2c6
   export FIXED_DISK_IDENTIFIERS='yes'

   ## We later install a kernel ourselves.
   export NOKERNEL="true"

   ## We later install /etc/network/interfaces ourselves.
   export NOINTERFACES="true"

   ## Verbose output.
   #export DEBUG="true"

   ## See also /etc/debootstrap/config or
   ## https://github.com/grml/grml-debootstrap/blob/master/config to learn
   ## about other grml-debootstrap options and defaults.

   ## Implemented in help-steps/pre.
   maybe_enable_apt_cache

   grml-debootstrap \
      --debopt "--verbose" \
      --arch "$BUILD_TARGET_ARCH" \
      --filesystem ext4 \
      --force \
      --hostname host \
      --password changeme \
      --release "$whonix_build_apt_stable_release" \
      --keep_src_list \
      --verbose \
      --vmfile \
      --vmsize "$VMSIZE" \
      --packages "$WHONIX_SOURCE_FOLDER/grml_packages" \
      --target "$binary_image_raw" \
      --mirror "$whonix_build_apt_sources_mirror"

   ## Implemented in help-steps/pre.
   disable_apt_cache

   chown --recursive "$user_name:$user_name" "$WHONIX_BINARY/"
}

create-empty-raw-image() {
   trap "error_handler_general" ERR INT TERM

   qemu-img create -f raw "$binary_image_raw" "$VMSIZE"
}

if [ "$BARE_METAL" = "1" ]; then
   true "${green}INFO: Skipping $BASH_SOURCE, because BARE_METAL is set to 1.${reset}"
else
   true "${bold}${under}INFO: Currently running script: $BASH_SOURCE ${1+"$@"}${reset}"
   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      create-debian-raw-image
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      create-debian-raw-image
   elif [ "$WHONIX_BUILD_CUSTOM_WORKSTATION" = "1" ]; then
      create-empty-raw-image
   else
      bug "ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!"
   fi
   benchmark_time_end ## sets benchmark_took_time (implemented in help-steps/pre)
   true "${bold}${under}INFO: End of: $BASH_SOURCE No error detected. (benchmark: $benchmark_took_time)${reset}"
fi
