#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

WHONIX_BUILD_INTERNALRUN="1"
## lsb-release may not be installed yet.
whonix_build_on_operating_system_detect_skip="1"

whonix_build_no_unset_xtrace="true"
no_git="1"
true "INFO $0: BEGIN sourcing pre..."
source pre
true "INFO $0: END sourcing pre."
true "INFO $0: BEGIN sourcing colors..."
source colors
true "INFO $0: END sourcing colors."
true "INFO $0: BEGIN sourcing variables..."
source variables
true "INFO $0: END sourcing variables."

unset whonix_build_no_unset_xtrace
unset no_git

unset whonix_build_on_operating_system_detect_skip

check-virtualbox-vm-exists() {
   if [ "$VMNAME" = "internalrun" ]; then
      true "${cyan}INFO: VNNAME is set to internalrun, skipping check, ok.${reset}"
      return 0
   fi

   ## {{ Checking, if a VM named $VMNAME already exists in VirtualBox.

   local command_v_exit_code="0"
   command -v VBoxManage >/dev/null || { command_v_exit_code="$?" ; true; }

   if [ ! "$command_v_exit_code" = "0" ]; then
      true "${cyan}INFO: VBoxManage command not yet available, ok.${reset}"
      return 0
   fi

   true "${cyan}INFO: Checking, if a VirtualBox VM named $VMNAME already exists...${reset}"

   ## For example, we are checking if there is a VM named Whonix-Gateway or
   ## Whonix-Workstation in VirtualBox. There must be for example no VM named
   ## Whonix-Gateway in Virtual Box, because in the create-vbox-vm step we will
   ## create a VM named Whonix-Gateway. This would not be possible, if a VM
   ## with that name would be already in VirtualBox.

   ## We are checking this here and not in the create-vbox-vm step, because it
   ## is better to break the build at this early stage rather than after the
   ## majority of the build time, which would be demotivating for the builder.

   local vboxmanage_exit_code
   vboxmanage_exit_code="0"
   ## Do not use sudo -E or it will fail.
   sudo -u "$user_name" VBoxManage showvminfo "$VMNAME" >/dev/null 2>/dev/null || { vboxmanage_exit_code="$?" ; true; };

   if [ "$vboxmanage_exit_code" = "0" ]; then
      true "${bold}${red}$BASH_SOURCE ERROR: $VMNAME already exists! ${reset}"
      true "${cyan}$BASH_SOURCE You most likely want to delete already existing Virtual Machines.
(Feel free to comment this check out, if you know what you are doing.)
To delete $VMNAME, run:${reset}
    sudo ./whonix_build --flavor $WHONIX_BUILD_FLAVOR -- --clean --target virtualbox

To delete both virtual machines, use:

    sudo ./whonix_build --flavor whonix-gateway --flavor whonix-workstation -- --target virtualbox --clean

${bold}${red}WARNING${reset}: This will delete the virtual machine(s) from VirtualBox as well!"
      error "A VirtualBox VM named $VMNAME already exists!"
   else
      true "${cyan}INFO: Done, no VirtualBox VM named $VMNAME does exist, ok.${reset}"
   fi

   true "${cyan}INFO: Checking, if an VirtualBox ova file $binary_image_ova already exists...${reset}"

   ## For example, we are checking if there is a VirtualBox ova file
   ## /home/user/whonix_binary/Whonix-Gateway-8.6.6.4.ova already exists. There
   ## must be no such file, because otherwise the build would fail later.

   ## We are checking this here and not in the create-vbox-vm step, because it
   ## is better to break the build at this early stage rather than after the
   ## majority of the build time, which would be demotivating for the builder.

   ## Although the above test using "VBoxManage showvminfo" already passed at
   ## this point, it could be the case, that the builder manually deleted the
   ## VirtualBox VM but forgot to delete the ova from whonxi_binary folder.

   if [ -e "$binary_image_ova" ]; then
      true "${bold}${red}$BASH_SOURCE ERROR: VirtualBox ova file $binary_image_ova already exists! ${reset}"
      true "${cyan}$BASH_SOURCE You most likely want to delete already existing ova files.
(Feel free to comment this check out, if you know what you are doing.)
To delete $VMNAME, run:${reset}
    sudo ./whonix_build --flavor $WHONIX_BUILD_FLAVOR -- --clean --target virtualbox

To delete both virtual machines, use:

    sudo ./whonix_build --flavor whonix-gateway --flavor whonix-workstation -- --clean --target virtualbox

${bold}${red}WARNING${reset}: This will delete the virtual machine(s) from VirtualBox as well!"
      error "A VirtualBox ova file $binary_image_ova already exists!"
   else
      true "${cyan}INFO: Done, no VirtualBox ova file $binary_image_ova exist, ok.${reset}"
   fi

   ## }}
}

main() {
   root_check

   if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      ## VirtualBox might not be installed at this point.
      ## Trying anyway, in case this script has already been run and installed
      ## VirtualBox beforehand.
      check-virtualbox-vm-exists
   fi

   ## If whonix_build is run with --fast1 switch.
   if [ "$WHONIX_BUILD_FAST1" = "1" ]; then
      true "${bold}${cyan}INFO: run with --fast 1 switch, skipping $BASH_SOURCE. ${reset}"
      exit 0
   fi

   ## Debugging.
   true "${bold}${cyan}INFO: PWD: $PWD ${reset}"

   ## {{ Checking if Whonix's source folder has been obtained (git cloned) as user or root.

   stat_output_owner="$(stat -c %U "$BASH_SOURCE")"
   stat_output_group="$(stat -c %G "$BASH_SOURCE")"

   if [ "$stat_output_owner" = "root" ]; then
      error "${bold}${red}ERROR $BASH_SOURCE: Is owned by root user! Instructions say you should get Whonix's source code as user, not root! \
Please delete Whonix's source code folder and get it again as user, not root!${reset}"
   fi

   if [ "$stat_output_group" = "root" ]; then
      error "${bold}${red}ERROR $BASH_SOURCE: Is owned by root group! Instructions say you should get Whonix's source code as user, not root! \
Please delete Whonix's source code folder and get it again as user, not root!${reset}"
   fi

   ## }}

   ## {{ users and groups

   ## Check if user "$user_name" already exist.
   local id_exit_code
   id_exit_code="0"
   id "$user_name" || { id_exit_code="$?" ; true; };
   if [ "$id_exit_code" = "1" ]; then
      true 'INFO: Creating user "$user_name" with password "changeme", because some things have to be run as "$user_name".'
      ## setting password of user "user" to changeme
      ##
      ## How this password was created:
      ## sudo apt-get install whois
      ## mkpasswd
      ## changeme
      ## Resulted in: aTayYxVyw5kDo
      useradd --password aTayYxVyw5kDo --user-group --create-home --shell /bin/bash "$user_name"
   elif [ "$id_exit_code" = "0" ]; then
      true "${cyan}INFO: Not creating user \"$user_name\" with password \"changeme\", because it already exists.${reset}"
   else
      true "${red}${bold}ERROR: id_exit_code was neither 1 or 0, it was: ${id_exit_code}${reset}"
      error "See above!"
   fi

   ## Add user to sudo group.
   addgroup "$user_name" sudo

   ## }}

   if [ ! "$WHONIX_BUILD_UNATTENDED_PKG_INSTALL" = "1" ]; then
      ## Always keep old configuration file. Do not prompt to install new config files.
      local apt_unattended_opts="--option Dpkg::Options=--force-confold"
   fi

   true "${cyan}INFO: Using longer timeout to allow more reliably downloading using apt-get over Tor. Feel free to out comment apt_timeout_opts in help-steps/variables.${reset}"

   $apt_get_update_wrapper_source_path_full $apt_timeout_opts $apt_get_gpgv_opts $apt_misc_opts update

   apt-get $apt_timeout_opts $apt_unattended_opts $apt_misc_opts --yes install git time

   ## Debugging.
   true 'INFO: Benchmarking "sudo -u "$user_name" echo "This is a test echo." using "time"...'
   time sudo -u "$user_name" echo "This is a test echo."

   true "INFO: Updating git sub modules..."

   sudo -u "$user_name" git submodule sync
   sudo -u "$user_name" git submodule update --init --recursive

   true "INFO: Updated git sub modules."

   if [ ! "$WHONIX_BUILD_UPGRADE_BUILD_MACHINE" = "0" ]; then
      ## Update package lists and upgrade.
      apt-get $apt_unattended_opts $apt_timeout_opts $apt_misc_opts --yes dist-upgrade
   fi

   ###############################################
   ## Build Dependencies for Whonix Build Script #
   ###############################################
   apt-get $apt_timeout_opts $apt_unattended_opts $apt_misc_opts --yes install $whonix_build_script_build_dependency

   if [ "$eatmydata_install" = "true" ]; then
      true "INFO: Installing eatmydata, because using '--unsafe-io true'."
      apt-get $apt_timeout_opts $apt_unattended_opts $apt_misc_opts --yes install eatmydata
   else
      true "INFO: Not installing eatmydata, because not using '--unsafe-io true'."
   fi

   ## {{{ whonix_build_on_operating_system

   ## lsb-release and git will now be installed. source variables again to set
   ## whonix_build_on_operating_system
   MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   cd "$MYDIR"
   cd ..
   cd help-steps
   whonix_build_no_unset_xtrace="true"
   source variables

   ## }}}

   if [ "$WHONIX_BUILD_QUBES" = "true" ]; then
      true "INFO: No need to install bare_metal_basic_package_list on for Qubes builds. (WHONIX_BUILD_QUBES is set to $WHONIX_BUILD_QUBES)"
   elif [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      ###########################################
      ## Build Dependency for Bare Metal Builds #
      ###########################################
      local bare_metal_basic_package_list
      bare_metal_basic_package_list="$(grep -vE "^\s*#" "$WHONIX_SOURCE_FOLDER/grml_packages" | tr "\n" " ")"
      apt-get \
         $apt_timeout_opts \
         $apt_unattended_opts \
         $apt_misc_opts \
         --yes \
         install \
         $bare_metal_basic_package_list
   else
      ##################################################################
      ## Build Dependencies for creating Virtual Machine Images (.raw) #
      ##################################################################
      ## - for grml-debootstrap
      ##      grml-debootstrap kpartx mksh parted qemu-utils
      ## - for converting images (qemu-img)
      ##      qemu-utils
      ## - for creating VirtualBox VM images
      ##      virtualbox
      ## - required for mounting vdi images
      ##   libguestfs-tools is not required in CI/VM.
      ##      libguestfs-tools
      apt-get $apt_timeout_opts $apt_unattended_opts $apt_misc_opts --no-install-recommends --yes install \
         qemu-utils \
         grml-debootstrap \
         parted \
         kpartx \
         mksh \
         libguestfs-tools

      if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
         #######################################################################
         ## Build Dependencies for creating VirtualBox Images (.vdi and .ova)  #
         #######################################################################
         true "${cyan}\
INFO${reset}: Attempting to install linux headers...
Linux headers have to be installed so VirtualBox kernel modules can be
compiled. When linux headers are not installed, the following
warning will be shown.
   [....] Starting VirtualBox kernel modules [....]
   No suitable module for running kernel found ... [ FAIL ]
   invoke-rc.d: initscript virtualbox, action \"restart\" failed.
The build would still complete, because the build script does not start
VirtualBox, hence does not affect the build. The build script only
uses \`VBoxManage\` for creation of virtual machine description files
and that tool does not need VirtualBox kernel modules. However, without
kernel modules, the user might wonder why Whonix virtual machines
cannot be started after building Whonix. Hence, we attempt to install them.
If it succeeds, good. If not, we fail open, i.e. no need to break the build
at this point. (This is useful for builders who currently have not started
a linux kernel.)"

         local linux_headers
         linux_headers="linux-headers-$(uname -r)" || true
         apt-get $apt_timeout_opts $apt_unattended_opts $apt_misc_opts --yes install \
            "$linux_headers" || true

         apt-get $apt_timeout_opts $apt_unattended_opts $apt_misc_opts --yes install \
            virtualbox || true

         ## VirtualBox will be be installed at this point.
         check-virtualbox-vm-exists
      fi
   fi

   true "INFO: Installing genmkfile..."
   pushd "$WHONIX_SOURCE_FOLDER/packages/genmkfile"
   sudo -u "$user_name" make deb-pkg
   make deb-install
   sudo -u "$user_name" make deb-cleanup
   popd
   true "INFO: Done. installed genmkfile."

   ## Debugging.
   cat /usr/sbin/policy-rc.d || true

   ## Debugging.
   #cat /proc/devices
}

main ${1+"$@"}
