#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

WHONIX_BUILD_INTERNALRUN="1"
## lsb-release may not be installed yet.
whonix_build_on_operating_system_detect_skip="1"

whonix_build_no_unset_xtrace="true"
no_git="1"
true "INFO $0: BEGIN sourcing pre..."
source pre
true "INFO $0: END sourcing pre."
true "INFO $0: BEGIN sourcing colors..."
source colors
true "INFO $0: END sourcing colors."
true "INFO $0: BEGIN sourcing variables..."
source variables
true "INFO $0: END sourcing variables."

unset whonix_build_no_unset_xtrace
unset no_git

unset whonix_build_on_operating_system_detect_skip

check-virtualbox-vm-exists() {
   if [ "$VMNAME" = "internalrun" ]; then
      true "${cyan}INFO: VNNAME is set to internalrun, skipping check, ok.${reset}"
      return 0
   fi

   ## {{ Checking, if a VM named $VMNAME already exists in VirtualBox.

   local command_v_exit_code="0"
   command -v VBoxManage >/dev/null || { command_v_exit_code="$?" ; true; }

   if [ ! "$command_v_exit_code" = "0" ]; then
      true "${cyan}INFO: VBoxManage command not yet available, ok.${reset}"
      return 0
   fi

   true "${cyan}INFO: Checking, if a VirtualBox VM named $VMNAME already exists...${reset}"

   ## For example, we are checking if there is a VM named Whonix-Gateway or
   ## Whonix-Workstation in VirtualBox. There must be for example no VM named
   ## Whonix-Gateway in Virtual Box, because in the create-vbox-vm step we will
   ## create a VM named Whonix-Gateway. This would not be possible, if a VM
   ## with that name would be already in VirtualBox.

   ## We are checking this here and not in the create-vbox-vm step, because it
   ## is better to break the build at this early stage rather than after the
   ## majority of the build time, which would be demotivating for the builder.

   local vboxmanage_exit_code
   vboxmanage_exit_code="0"
   ## Do not use sudo -E or it will fail.
   sudo $SUDO_OPTS VBoxManage showvminfo "$VMNAME" >/dev/null 2>/dev/null || { vboxmanage_exit_code="$?" ; true; };

   if [ "$vboxmanage_exit_code" = "0" ]; then
      true "${bold}${red}$BASH_SOURCE ERROR: $VMNAME already exists! ${reset}"
      true "${cyan}$BASH_SOURCE You most likely want to delete already existing Virtual Machines.
(Feel free to comment this check out, if you know what you are doing.)
To delete $VMNAME, run:${reset}
    sudo ./whonix_build --clean --target virtualbox --flavor $WHONIX_BUILD_FLAVOR

To delete both virtual machines, use:

    sudo ./whonix_build --clean --target virtualbox --flavor whonix-gateway
    sudo ./whonix_build --clean --target virtualbox --flavor whonix-workstation

${bold}${red}WARNING${reset}: This will delete the virtual machine(s) from VirtualBox as well!"
      error "A VirtualBox VM named $VMNAME already exists!"
   else
      true "${cyan}INFO: Done, no VirtualBox VM named $VMNAME does exist, ok.${reset}"
   fi

   true "${cyan}INFO: Checking, if an VirtualBox ova file $binary_image_ova already exists...${reset}"

   ## For example, we are checking if there is a VirtualBox ova file
   ## /home/user/whonix_binary/Whonix-Gateway-8.6.6.4.ova already exists. There
   ## must be no such file, because otherwise the build would fail later.

   ## We are checking this here and not in the create-vbox-vm step, because it
   ## is better to break the build at this early stage rather than after the
   ## majority of the build time, which would be demotivating for the builder.

   ## Although the above test using "VBoxManage showvminfo" already passed at
   ## this point, it could be the case, that the builder manually deleted the
   ## VirtualBox VM but forgot to delete the ova from whonxi_binary folder.

   if [ -e "$binary_image_ova" ]; then
      true "${bold}${red}$BASH_SOURCE ERROR: VirtualBox ova file $binary_image_ova already exists! ${reset}"
      true "${cyan}$BASH_SOURCE You most likely want to delete already existing ova files.
(Feel free to comment this check out, if you know what you are doing.)
To delete $VMNAME, run:${reset}
    sudo ./whonix_build --flavor $WHONIX_BUILD_FLAVOR -- --clean --target virtualbox

To delete both virtual machines, use:

    sudo ./whonix_build --flavor whonix-gateway --flavor whonix-workstation -- --clean --target virtualbox

${bold}${red}WARNING${reset}: This will delete the virtual machine(s) from VirtualBox as well!"
      error "A VirtualBox ova file $binary_image_ova already exists!"
   else
      true "${cyan}INFO: Done, no VirtualBox ova file $binary_image_ova exist, ok.${reset}"
   fi

   ## }}
}

cowbuilder_setup() {
   true "${bold}${green}INFO${reset}: Setting up cowbuilder..."

   if [ "$whonix_build_unsafe_io" = "true" ]; then
      eatmydata_maybe_install="eatmydata"
   fi

   if mount | grep /var/cache/pbuilder | grep tmpfs ; then
      true "INFO: /var/cache/pbuilder already tmpfs."
   else
      mount -t tmpfs -o size=2G none /var/cache/pbuilder
   fi

   ## Debugging.
   cat "$whonix_build_pbuilder_config_file"

   ## TODO: change that folder
   cow_folder="/var/cache/pbuilder/base.cow"

   if [ ! -d "$cow_folder" ]; then
      $COWBUILDER_PREFIX \
         cowbuilder \
            --create \
            --configfile "$whonix_build_pbuilder_config_file" \
            --distribution "$whonix_build_apt_stable_release" \
            --mirror "$whonix_build_apt_sources_mirror" \
            --extrapackages "sudo devscripts debhelper strip-nondeterminism fakeroot apt-transport-tor python $eatmydata_maybe_install"
   fi

   mkdir -p "$cow_folder/home/$user_name"
   if [ "$cow_folder/home/$user_name/genmkfile" = "/home/$user_name/genmkfile" ]; then
      error
   else
      rm -r -f "$cow_folder/home/$user_name/genmkfile"
   fi
   cp -r "$WHONIX_SOURCE_FOLDER/packages/genmkfile" "$cow_folder/home/$user_name/genmkfile"

   cp "$whonix_build_sources_list_primary" "$cow_folder/etc/apt/sources.list"
   mkdir -p "$cow_folder/$(dirname $apt_get_update_wrapper_bin_path_full)"
   cp "$apt_get_update_wrapper_source_path_full" "$cow_folder/$apt_get_update_wrapper_bin_path_full"
   cp "$apt_get_update_sanity_test__source_path_full" "$cow_folder/$apt_get_update_sanity_test_bin_path_full"
   cp "$whonix_build_pbuilder_config_file" "$cow_folder/home/$user_name/pbuilder_config_file"

   $COWBUILDER_PREFIX \
      cowbuilder \
      --execute "$whonix_build_pbuilder_chroot_script" \
      --configfile "$whonix_build_pbuilder_config_file" \
      --save-after-login

   true "${bold}${green}INFO${reset}: cowbuilder setup done."
}

build_machine_setup() {
   root_check
   signing_key

   if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      ## VirtualBox might not be installed at this point.
      ## Trying anyway, in case this script has already been run and installed
      ## VirtualBox beforehand.
      check-virtualbox-vm-exists
   fi

   ## If whonix_build is run with --fast1 switch.
   if [ "$WHONIX_BUILD_FAST1" = "1" ]; then
      true "${bold}${cyan}INFO: run with --fast 1 switch, skipping $BASH_SOURCE. ${reset}"
      exit 0
   fi

   ## Debugging.
   true "${bold}${cyan}INFO: PWD: $PWD ${reset}"

   ## {{ Checking if Whonix's source folder has been obtained (git cloned) as user or root.

   stat_output_owner="$(stat -c %U "$BASH_SOURCE")"
   stat_output_group="$(stat -c %G "$BASH_SOURCE")"

   if [ "$stat_output_owner" = "root" ]; then
      error "${bold}${red}ERROR $BASH_SOURCE: Is owned by root user! Instructions say you should get Whonix's source code as user, not root! \
Please delete Whonix's source code folder and get it again as user, not root!${reset}"
   fi

   if [ "$stat_output_group" = "root" ]; then
      error "${bold}${red}ERROR $BASH_SOURCE: Is owned by root group! Instructions say you should get Whonix's source code as user, not root! \
Please delete Whonix's source code folder and get it again as user, not root!${reset}"
   fi

   ## }}

   ## {{ users and groups

   ## Check if user "$user_name" already exist.
   local id_exit_code
   id_exit_code="0"
   id "$user_name" || { id_exit_code="$?" ; true; };
   if [ "$id_exit_code" = "1" ]; then
      true 'INFO: Creating user "$user_name" with password "changeme", because some things have to be run as "$user_name".'
      if command -v qubesdb-read >/dev/null 2>&1 ; then
         password=""
      else
         ## setting password of user clearnet to changeme
         ##
         ## How this password was created:
         ## sudo apt-get install whois
         ## mkpasswd
         ## changeme
         ## Resulted in: aTayYxVyw5kDo
         password="aTayYxVyw5kDo"
      fi
      useradd --password "$password" --user-group --create-home --shell /bin/bash "$user_name"
   elif [ "$id_exit_code" = "0" ]; then
      true "${cyan}INFO: Not creating user \"$user_name\" with password \"changeme\", because it already exists.${reset}"
   else
      true "${red}${bold}ERROR: id_exit_code was neither 1 or 0, it was: ${id_exit_code}${reset}"
      error "See above!"
   fi

   ## Add user to sudo group.
   addgroup "$user_name" sudo

   ## }}

   if [ ! "$WHONIX_BUILD_UNATTENDED_PKG_INSTALL" = "1" ]; then
      ## Always keep old configuration file. Do not prompt to install new config files.
      local apt_unattended_opts="--option Dpkg::Options=--force-confold"
   fi

   apt-get \
      ${APTGETOPT[@]} \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
      -o Dir::Etc::sourceparts="-" \
      $apt_unattended_opts \
      --yes \
      install \
      git time

   ## Debugging.
   true 'INFO: Benchmarking "sudo $SUDO_OPTS echo "This is a test echo." using "time"...'
   time sudo $SUDO_OPTS echo "This is a test echo."

   true "INFO: Updating git sub modules..."

   sudo $SUDO_OPTS git submodule sync --recursive
   sudo $SUDO_OPTS git submodule update --init --recursive --jobs=200

   true "INFO: Updated git sub modules."

   ## Run after git submodule fetching, so $apt_get_update_wrapper_source_path_full will be available.
   $apt_get_update_wrapper_source_path_full \
      ${APTGETOPT[@]} \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
      -o Dir::Etc::sourceparts="-" \
      update

   if [ ! "$WHONIX_BUILD_UPGRADE_BUILD_MACHINE" = "0" ]; then
      ## Update package lists and upgrade.
      apt-get \
         ${APTGETOPT[@]} \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         $apt_unattended_opts \
         --yes \
         dist-upgrade
   fi

   ###############################################
   ## Build Dependencies for Whonix Build Script #
   ###############################################
   apt-get \
      ${APTGETOPT[@]} \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
      -o Dir::Etc::sourceparts="-" \
      $apt_unattended_opts
      --yes \
      install \
      $whonix_build_script_build_dependency

   if [ "$eatmydata_install" = "true" ]; then
      true "INFO: Installing eatmydata, because using '--unsafe-io true'."
      apt-get \
         ${APTGETOPT[@]} \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         $apt_unattended_opts \
         --yes \
         install \
            eatmydata
   else
      true "INFO: Not installing eatmydata, because not using '--unsafe-io true'."
   fi

   ## {{{ whonix_build_on_operating_system

   ## lsb-release and git will now be installed. source variables again to set
   ## whonix_build_on_operating_system
   MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   cd "$MYDIR"
   cd ..
   cd help-steps
   whonix_build_no_unset_xtrace="true"
   source variables

   ## }}}

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      ###########################################
      ## Build Dependency for Bare Metal Builds #
      ###########################################
      local bare_metal_basic_package_list
      bare_metal_basic_package_list="$(grep -vE "^\s*#" "$WHONIX_SOURCE_FOLDER/grml_packages" | tr "\n" " ")"
      apt-get \
         ${APTGETOPT[@]} \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         $apt_unattended_opts \
         --yes \
         install \
            $bare_metal_basic_package_list
   else
      ##################################################################
      ## Build Dependencies for creating Virtual Machine Images (.raw) #
      ##################################################################
      ## - for grml-debootstrap
      ##      grml-debootstrap kpartx mksh parted qemu-utils
      ## - for converting images (qemu-img)
      ##      qemu-utils
      ## - for creating VirtualBox VM images
      ##      virtualbox
      ## - for shrinking images
      ##      zerofree
      apt-get \
         ${APTGETOPT[@]} \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         $apt_unattended_opts \
         --no-install-recommends \
         --yes \
         install \
            qemu-utils \
            grml-debootstrap \
            parted \
            kpartx \
            mksh \
            zerofree

      ##################################################################
      ## Build Dependencies for Raspberry PI (RPI)                     #
      ##################################################################
      ## binfmt-support
      ## qemu
      ## qemu-user-static
      if [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-rpi" ]; then
         apt-get \
            ${APTGETOPT[@]} \
            -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
            -o Dir::Etc::sourceparts="-" \
            $apt_unattended_opts \
            --no-install-recommends \
            --yes \
            install \
               binfmt-support \
               qemu \
               qemu-user-static
      fi

      if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
         #######################################################################
         ## Build Dependencies for creating VirtualBox Images (.vdi and .ova)  #
         #######################################################################
         ## uname -r returns on Qubes:
         ## 4.4.31-11.pvops.qubes.x86_64
         local linux_headers
         if command -v qubesdb-read >/dev/null 2>&1 ; then
            linux_headers="linux-headers-amd64"
         else
            linux_headers="linux-headers-$(uname -r)"
         fi
         apt-get \
            ${APTGETOPT[@]} \
            -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
            -o Dir::Etc::sourceparts="-" \
            $apt_unattended_opts \
            --yes \
            install \
               "$linux_headers"

         true "INFO: Checking if VirtualBox is already installed..."
         if virtualbox_version_installed="$(dpkg-query --show --showformat='${Version}' "virtualbox")" ; then
            true "INFO: VirtualBox is already installed."

            virtualbox_version_minium="5.2.18"

            true "INFO: Checking if $virtualbox_version_installed is not lower than $virtualbox_version_minium..."
            if dpkg --compare-versions "$virtualbox_version_installed" lt $virtualbox_version_minium 2>/dev/null ; then
               true "INFO: Installed VirtualBox version is lower than $virtualbox_version_installed."
               install_virtualbox="true"
            else
               true "INFO: Installed VirtualBox version is recent enough."
            fi
         else
            true "INFO: VirtualBox is not yet installed. Installing..."
            install_virtualbox="true"
         fi

         if [ "$install_virtualbox" = "true" ]; then
            true "INFO: Installing VirtualBox using $whonix_build_sources_list_primary..."

            ## Enable stretch-backports Debian apt repository.
            $apt_get_update_wrapper_source_path_full \
               ${APTGETOPT[@]} \
               -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
               -o Dir::Etc::sourceparts="-" \
               -o APT::Get::List-Cleanup="0" \
               update

            apt-get \
               ${APTGETOPT[@]} \
               -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
               -o Dir::Etc::sourceparts="-" \
               $apt_unattended_opts \
               -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
               -o Dir::Etc::sourceparts="-" \
               --yes \
               install \
                  virtualbox

            ## Get rid of $whonix_build_sources_list_primary package list, while keeping
            ## regular package lists. In other words, prevent needlessly forgetting
            ## about regular package lists.
            apt-get update \
               --no-download \
               --list-cleanup

            true "INFO: Done, installed VirtualBox."
         fi

         ## VirtualBox will be be installed at this point.
         check-virtualbox-vm-exists
      fi
   fi

   ## Debugging.
   cat /usr/sbin/policy-rc.d || true

   ## Debugging.
   #cat /proc/devices
}

genmkfile_installation() {
   pushd "/var/cache/pbuilder/base.cow/home/$user_name/genmkfile"
   make_use_cowbuilder=false make deb-install
   popd
}

main() {
   build_machine_setup "$@"
   cowbuilder_setup "$@"
   genmkfile_installation "$@"
}

main "$@"
