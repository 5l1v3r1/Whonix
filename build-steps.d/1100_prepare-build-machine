#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

VMNAME="internalrun"

source pre
source colors
source variables

cd "$MYDIR"
cd ..

check-virtualbox-vm-exists() {
   if [ "$VMNAME" = "internalrun" ]; then
      true "${cyan}INFO: VNNAME is set to internalrun, skipping check, ok.${reset}"
      return 0
   fi

   ## {{ Checking, if a VM named $VMNAME already exists in VirtualBox.

   local command_v_exit_code="0"
   command -v VBoxManage >/dev/null || { command_v_exit_code="$?" ; true; }

   if [ ! "$command_v_exit_code" = "0" ]; then
      true "${cyan}INFO: VBoxManage command not yet available, ok.${reset}"
      return 0
   fi

   true "${cyan}INFO: Checking, if a VirtualBox VM named $VMNAME already exists...${reset}"

   ## For example, we are checking if there is a VM named Whonix-Gateway or
   ## Whonix-Workstation in VirtualBox. There must be for example no VM named
   ## Whonix-Gateway in Virtual Box, because in the create-vbox-vm step we will
   ## create a VM named Whonix-Gateway. This would not be possible, if a VM
   ## with that name would be already in VirtualBox.

   ## We are checking this here and not in the create-vbox-vm step, because it
   ## is better to break the build at this early stage rather than after the
   ## majority of the build time, which would be demotivating for the builder.

   local vboxmanage_exit_code
   vboxmanage_exit_code="0"
   ## Do not use sudo -E or it will fail.
   sudo $SUDO_OPTS VBoxManage showvminfo "$VMNAME" >/dev/null 2>/dev/null || { vboxmanage_exit_code="$?" ; true; };

   if [ "$vboxmanage_exit_code" = "0" ]; then
      true "${bold}${red}$BASH_SOURCE ERROR: $VMNAME already exists! ${reset}"
      true "${cyan}$BASH_SOURCE You most likely want to delete already existing Virtual Machines.
(Feel free to comment this check out, if you know what you are doing.)
To delete $VMNAME, run:${reset}
    sudo ./whonix_build --clean --target virtualbox --flavor $WHONIX_BUILD_FLAVOR

To delete both virtual machines, use:

    sudo ./whonix_build --clean --target virtualbox --flavor whonix-gateway
    sudo ./whonix_build --clean --target virtualbox --flavor whonix-workstation

${bold}${red}WARNING${reset}: This will delete the virtual machine(s) from VirtualBox as well!"
      error "A VirtualBox VM named $VMNAME already exists!"
   else
      true "${cyan}INFO: Done, no VirtualBox VM named $VMNAME does exist, ok.${reset}"
   fi

   true "${cyan}INFO: Checking, if an VirtualBox ova file $binary_image_ova already exists...${reset}"

   ## For example, we are checking if there is a VirtualBox ova file
   ## /home/user/whonix_binary/Whonix-Gateway-8.6.6.4.ova already exists. There
   ## must be no such file, because otherwise the build would fail later.

   ## We are checking this here and not in the create-vbox-vm step, because it
   ## is better to break the build at this early stage rather than after the
   ## majority of the build time, which would be demotivating for the builder.

   ## Although the above test using "VBoxManage showvminfo" already passed at
   ## this point, it could be the case, that the builder manually deleted the
   ## VirtualBox VM but forgot to delete the ova from whonxi_binary folder.

   if [ -e "$binary_image_ova" ]; then
      true "${bold}${red}$BASH_SOURCE ERROR: VirtualBox ova file $binary_image_ova already exists! ${reset}"
      true "${cyan}$BASH_SOURCE You most likely want to delete already existing ova files.
(Feel free to comment this check out, if you know what you are doing.)
To delete $VMNAME, run:${reset}
    sudo ./whonix_build --flavor $WHONIX_BUILD_FLAVOR -- --clean --target virtualbox

To delete both virtual machines, use:

    sudo ./whonix_build --flavor whonix-gateway --flavor whonix-workstation -- --clean --target virtualbox

${bold}${red}WARNING${reset}: This will delete the virtual machine(s) from VirtualBox as well!"
      error "A VirtualBox ova file $binary_image_ova already exists!"
   else
      true "${cyan}INFO: Done, no VirtualBox ova file $binary_image_ova exist, ok.${reset}"
   fi

   ## }}
}

cowbuilder_setup() {
   if cowbuilder_setup_do ; then
      true "$FUNCNAME: success"
   else
      true "$FUNCNAME: try again"
      cowbuilder_setup_do
   fi
}

cowbuilder_setup_do() {
   true "${bold}${green}INFO${reset}: Setting up cowbuilder..."

   whonix_build_sources_list_primary_contents="$(cat "$whonix_build_sources_list_primary")"
   export whonix_build_sources_list_primary_contents

   if [ "$whonix_build_unsafe_io" = "true" ]; then
      eatmydata_maybe_install="eatmydata"
   fi

   if ! test -f /etc/hostname ; then
      ## mmdebstrap requires /etc/hostname to exist.
      touch /etc/hostname
   fi

   if mount | grep /var/cache/pbuilder | grep tmpfs ; then
      true "INFO: /var/cache/pbuilder already tmpfs."
   else
      mount -t tmpfs -o size=2G none /var/cache/pbuilder
   fi

   ## Debugging.
   cat "$whonix_build_pbuilder_config_file"

   for whonix_build_multiarch_package_item in $make_cross_build_platform_list ; do
      export whonix_build_multiarch_package_item

      ## TODO: change that folder
      cow_folder="/var/cache/pbuilder/cow.cow_${whonix_build_multiarch_package_item}"
      base_folder="/var/cache/pbuilder/base.cow_${whonix_build_multiarch_package_item}"

      if [ -d "$base_folder" ]; then
         "$WHONIX_SOURCE_HELP_STEPS_FOLDER/umount_kill.sh" "$base_folder/"
         rm --recursive --force "$base_folder"
      fi

      local cowbuilder_exit_code
      cowbuilder_exit_code=0

      ## '--mirror "$whonix_build_apt_sources_mirror"' should be only cosmetic,
      ## because of pbuilder-debootstrap-command-filter and hooks.
      ##
      ## Duplicate --extrapackages to prevent removal by pbuilder.
      $COWBUILDER_PREFIX \
      SOURCE_DATE_EPOCH="$SOURCE_DATE_EPOCH" \
         cowbuilder \
            --create \
            --host-arch "$whonix_build_multiarch_package_item" \
            --basepath "$base_folder" \
            --buildplace "$cow_folder" \
            --configfile "$whonix_build_pbuilder_config_file" \
            --distribution "$whonix_build_apt_stable_release" \
            --mirror "$whonix_build_apt_sources_mirror" \
            --debootstrap "$WHONIX_SOURCE_HELP_STEPS_FOLDER/pbuilder-debootstrap-command-filter" \
            --hookdir "$WHONIX_SOURCE_HELP_STEPS_FOLDER/pbuilder-hooks" \
            --extrapackages "sudo devscripts debhelper strip-nondeterminism fakeroot apt-transport-tor apt-transport-https python eatmydata aptitude cowdancer" \
            || { cowbuilder_exit_code="$?" ; true; };

      if [ -d "$base_folder" ]; then
         "$WHONIX_SOURCE_HELP_STEPS_FOLDER/umount_kill.sh" "$base_folder/"
      fi

      if [ ! "$cowbuilder_exit_code" = "0" ]; then
         return "$cowbuilder_exit_code"
      fi

      ## help-steps/pbuilder-hooks/G10sources_list_restore.bsh should have restored it already.
      ## `pbuilder` component `/usr/lib/pbuilder/pbuilder-createbuildenv`
      ## unfortunately runs function `installaptlines` after `${DEBOOTSTRAP}`,
      ## which uses a different sources list. This pbuilder hook script restores
      ## Whonix build APT sources list.
      true "Sanity test. Security critical. Comparing Whonix build sources list with chroot sources list."
      diff "$whonix_build_sources_list_primary" "$base_folder/etc/apt/sources.list"

      cp "$whonix_build_sources_list_primary" "$base_folder/etc/apt/sources.list"
      mkdir -p "$base_folder/$(dirname $apt_get_update_wrapper_bin_path_full)"
      cp "$apt_get_update_wrapper_source_path_full" "$base_folder/$apt_get_update_wrapper_bin_path_full"
      cp "$apt_get_update_sanity_test__source_path_full" "$base_folder/$apt_get_update_sanity_test_bin_path_full"
      mkdir -p "$base_folder/home/$user_name"
      cp "$whonix_build_pbuilder_config_file" "$base_folder/home/$user_name/pbuilder_config_file"

      mkdir -p "$base_folder/home/$user_name"
      if [ "$base_folder/home/$user_name/genmkfile" = "/home/$user_name/genmkfile" ]; then
         error
      else
         rm -r -f "$base_folder/home/$user_name/genmkfile"
      fi
      cp -r "$WHONIX_SOURCE_FOLDER/packages/genmkfile" "$base_folder/home/$user_name/genmkfile"
      chown --recursive $user_name:$user_name "$base_folder/home/$user_name"

      cowbuilder_exit_code=0
      $COWBUILDER_PREFIX \
         cowbuilder \
            --execute "$whonix_build_pbuilder_chroot_script" \
            --basepath "$base_folder" \
            --buildplace "$cow_folder" \
            --configfile "$whonix_build_pbuilder_config_file" \
            --save-after-login \
            || { cowbuilder_exit_code="$?" ; true; };

      if [ -d "$base_folder" ]; then
         "$WHONIX_SOURCE_HELP_STEPS_FOLDER/umount_kill.sh" "$base_folder/"
      fi

      if [ ! "$cowbuilder_exit_code" = "0" ]; then
         return "$cowbuilder_exit_code"
      fi
   done

   true "${bold}${green}INFO${reset}: cowbuilder setup done."
}

build_machine_setup() {
   root_check

   local required_packages_list required_package_item
   local required_packages_list="git time curl apt-cacher-ng lsb-release fakeroot"

   for required_package_item in $required_packages_list ; do
      if ! dpkg-query --show --showformat='${Version}' "$required_package_item" ; then
         error "${bold}${red}ERROR $BASH_SOURCE: Requried package $required_package_item missing. Run:

sudo apt-get update

sudo apt-get install $required_packages_list${reset}"
      fi
   done

   signing_key

   if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      ## VirtualBox might not be installed at this point.
      ## Trying anyway, in case this script has already been run and installed
      ## VirtualBox beforehand.
      check-virtualbox-vm-exists
   fi

   ## If whonix_build is run with --fast1 switch.
   if [ "$WHONIX_BUILD_FAST1" = "1" ]; then
      true "${bold}${cyan}INFO: run with --fast 1 switch, skipping $BASH_SOURCE. ${reset}"
      exit 0
   fi

   ## Debugging.
   true "${bold}${cyan}INFO: PWD: $PWD ${reset}"

   ## {{ Checking if Whonix's source folder has been obtained (git cloned) as user or root.

   stat_output_owner="$(stat -c %U "$BASH_SOURCE")"
   stat_output_group="$(stat -c %G "$BASH_SOURCE")"

   if [ "$stat_output_owner" = "root" ]; then
      error "${bold}${red}ERROR $BASH_SOURCE: Is owned by root user! Instructions say you should get Whonix's source code as user, not root! \
Please delete Whonix's source code folder and get it again as user, not root!${reset}"
   fi

   if [ "$stat_output_group" = "root" ]; then
      error "${bold}${red}ERROR $BASH_SOURCE: Is owned by root group! Instructions say you should get Whonix's source code as user, not root! \
Please delete Whonix's source code folder and get it again as user, not root!${reset}"
   fi

   ## }}

   ## {{ users and groups

   ## Check if user "$user_name" already exist.
   local id_exit_code
   id_exit_code="0"
   id "$user_name" || { id_exit_code="$?" ; true; };
   if [ "$id_exit_code" = "1" ]; then
      true 'INFO: Creating user "$user_name" with password "changeme", because some things have to be run as "$user_name".'
      if command -v qubesdb-read >/dev/null 2>&1 ; then
         password=""
      else
         ## setting password of user clearnet to changeme
         ##
         ## How this password was created:
         ## sudo apt-get install whois
         ## mkpasswd
         ## changeme
         ## Resulted in: aTayYxVyw5kDo
         password="aTayYxVyw5kDo"
      fi
      useradd --password "$password" --user-group --create-home --shell /bin/bash "$user_name"
   elif [ "$id_exit_code" = "0" ]; then
      true "${cyan}INFO: Not creating user \"$user_name\" with password \"changeme\", because it already exists.${reset}"
   else
      true "${red}${bold}ERROR: id_exit_code was neither 1 or 0, it was: ${id_exit_code}${reset}"
      error "See above!"
   fi

   ## Add user to sudo group.
   addgroup "$user_name" sudo

   ## }}

   if [ ! "$WHONIX_BUILD_UNATTENDED_PKG_INSTALL" = "1" ]; then
      ## Always keep old configuration file. Do not prompt to install new config files.
      local apt_unattended_opts="--option Dpkg::Options=--force-confold"
   fi

   ## Debugging.
   true 'INFO: Benchmarking "sudo $SUDO_OPTS echo "This is a test echo." using "time"...'
   time sudo $SUDO_OPTS echo "This is a test echo."

   true "INFO: Updating git sub modules..."

   sudo $SUDO_OPTS git submodule sync --recursive
   sudo $SUDO_OPTS git submodule update --init --recursive --jobs=200

   true "INFO: Updated git sub modules."

   ## Run after git submodule fetching, so $apt_get_update_wrapper_source_path_full will be available.
   $apt_get_update_wrapper_source_path_full \
      ${APTGETOPT[@]} \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
      -o Dir::Etc::sourceparts="-" \
      update

   if [ ! "$WHONIX_BUILD_UPGRADE_BUILD_MACHINE" = "0" ]; then
      ## Update package lists and upgrade.
      apt-get \
         ${APTGETOPT[@]} \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         $apt_unattended_opts \
         --no-install-recommends \
         --yes \
            dist-upgrade
   fi

   ###############################################
   ## Build Dependencies for Whonix Build Script #
   ###############################################
   local packages_to_be_installed
   packages_to_be_installed+=" $whonix_build_script_build_dependency "

   if [ "$eatmydata_install" = "true" ]; then
      true "INFO: Installing eatmydata, because using '--unsafe-io true'."
      packages_to_be_installed+=" $eatmydata "
   else
      true "INFO: Not installing eatmydata, because not using '--unsafe-io true'."
   fi

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      ###########################################
      ## Build Dependency for Bare Metal Builds #
      ###########################################
      local bare_metal_basic_package_list
      bare_metal_basic_package_list="$(grep -vE "^\s*#" "$WHONIX_SOURCE_FOLDER/grml_packages" | tr "\n" " ")"
      packages_to_be_installed+=" $bare_metal_basic_package_list "
   else
      ##################################################################
      ## Build Dependencies for creating Virtual Machine Images (.raw) #
      ##################################################################
      ## - for grml-debootstrap
      ##      grml-debootstrap kpartx mksh parted qemu-utils
      ## - for converting images (qemu-img)
      ##      qemu-utils
      ## - for creating VirtualBox VM images
      ##      virtualbox
      ## - for shrinking images
      ##      zerofree
      packages_to_be_installed+=" \
            qemu-utils \
            grml-debootstrap \
            parted \
            kpartx \
            mksh \
            zerofree "

      ##################################################################
      ## Build Dependencies for Raspberry PI (RPI)                     #
      ##################################################################
      ## binfmt-support
      ## qemu
      ## qemu-user-static
      if [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-rpi" ]; then
         packages_to_be_installed+=" \
               binfmt-support \
               qemu \
               qemu-user-static "
      fi

      if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
         #######################################################################
         ## Build Dependencies for creating VirtualBox Images (.vdi and .ova)  #
         #######################################################################
         ## uname -r returns on Qubes:
         ## 4.4.31-11.pvops.qubes.x86_64
         local linux_headers
         if command -v qubesdb-read >/dev/null 2>&1 ; then
            linux_headers="linux-headers-amd64"
         else
            linux_headers="linux-headers-$(uname -r)"
         fi
         packages_to_be_installed+=" $linux_headers "

         true "INFO: Checking if VirtualBox is already installed..."
         if virtualbox_version_installed="$(dpkg-query --show --showformat='${Version}' "virtualbox-qt")" ; then
            true "INFO: VirtualBox is already installed."

            virtualbox_version_minium="5.2.18"

            true "INFO: Checking if $virtualbox_version_installed is not lower than $virtualbox_version_minium..."
            if dpkg --compare-versions "$virtualbox_version_installed" lt $virtualbox_version_minium 2>/dev/null ; then
               true "INFO: Installed VirtualBox version is lower than $virtualbox_version_installed."
               install_virtualbox="true"
            else
               true "INFO: Installed VirtualBox version is recent enough."
            fi
         else
            true "INFO: VirtualBox is not yet installed. Installing..."
            install_virtualbox="true"
         fi

         if [ "$install_virtualbox" = "true" ]; then
            ## Cross builds considerations:
            ## - virtualbox-source cannot be installed in Qubes.
            ## - virtualbox-dkms can be installed in Qubes.
            packages_to_be_installed+=" virtualbox-source "
            ## The cli package which provides 'VBoxManage'.
            packages_to_be_installed+=" virtualbox "
            ## The gui package which provides 'virtualbox'.
            ## Not required for build but makes sense to have installed for everyone who wants to run their own builds.
            packages_to_be_installed+=" virtualbox-qt "
         fi

      fi

      if [ "$WHONIX_BUILD_ISO" = "true" ]; then
         ## xorriso
         packages_to_be_installed+=" xorriso "
         ## mksquashfs
         packages_to_be_installed+=" squashfs-tools "
         ## grub-mkimage
         packages_to_be_installed+=" grub-common "
         ## /usr/lib/ISOLINUX/isolinux.bin
         packages_to_be_installed+=" isolinux "
      fi
   fi

   apt-get \
      ${APTGETOPT[@]} \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_primary" \
      -o Dir::Etc::sourceparts="-" \
      $apt_unattended_opts \
      --no-install-recommends \
      --yes \
      install \
      $packages_to_be_installed

   if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      ## VirtualBox will be be installed at this point.
      check-virtualbox-vm-exists
   fi

   ## Debugging.
   cat /usr/sbin/policy-rc.d || true

   ## Debugging.
   #cat /proc/devices
}

genmkfile_installation() {
   pushd "$WHONIX_SOURCE_FOLDER/packages/genmkfile"
   make_use_cowbuilder=false make deb-cleanup
   sudo $SUDO_OPTS make_use_cowbuilder=false make deb-pkg
   make_use_cowbuilder=false make deb-install
   make_use_cowbuilder=false make deb-cleanup
   popd
}

main() {
   build_machine_setup "$@"
   cowbuilder_setup "$@"
   genmkfile_installation
}

main "$@"
