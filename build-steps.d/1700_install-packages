#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source colors
source variables

root_check

## Debugging function.
apt_get_parse_unmet_dependency() {
   local pkg_unmet
   pkg_unmet="$1"
   true "INFO: Running \"dpkg -l | grep $pkg_unmet\"..."
   $CHROOT dpkg -l | grep "$pkg_unmet" || true
   $CHROOT apt-cache policy "$pkg_unmet" || true

   local line

   ## Thanks to:
   ## http://blog.edwards-research.com/2010/01/quick-bash-trick-looping-through-output-lines/

   set +x

   declare -A -g remember_pkg

   while read -r -d $'\n' line; do
      local unmet_dependency=""
      unmet_dependency="$(echo "$line" | grep -o "Depends:.*" | awk '{print $2}')" || true
      if [ "$unmet_dependency" = "" ]; then
         ## no match
         continue
      else
         ## match
         if [ "${remember_pkg[$unmet_dependency]}" = "true" ]; then
            continue
         fi
         echo "${bold}${cyan}INFO: Found unmet dependency: $unmet_dependency. \
Will try to manually install it for debugging...${reset}"
         remember_pkg[$unmet_dependency]="true"
         set -x
         true "INFO: Running \"dpkg -l | grep $unmet_dependency\"..."
         $CHROOT dpkg -l | grep "$unmet_dependency" || true
         $CHROOT apt-cache policy "$unmet_dependency" || true
         pkg-install-maybe "$unmet_dependency" || true
         set +x
         echo "${bold}${cyan}INFO: Attempt to install unmet_dependency: $unmet_dependency done.${reset}"
         continue
      fi
   done < <( echo "$apt_get_output" )

   set -x
}

pkg-install-maybe() {
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   local pkg_install
   pkg_install="$1"
   local skip_package
   for skip_package in $whonix_build_script_skip_package_install; do
      if [ "$skip_package" = "$pkg_install" ]; then
         unset skip_package
         true "${bold}${cyan}INFO: Skipping $pkg_install, because whonix_build_script_skip_package_install includes it.${reset}"
         return 0
      fi
   done
   unset skip_package

   true "${cyan}INFO: Installing $pkg_install, because whonix_build_script_skip_package_install does not include it... \
This may take a while...${reset}"

   ## apt: no way to view dpkg commandline and still run dpkg
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=52670
   local apt_get_exit_code="0"
   $CHROOT \
      apt-get \
         ${APTGETOPT[@]} \
         $apt_sourcelist_empty \
         $apt_sourceparts \
         $apt_unattended_opts \
         --yes \
         --no-install-recommends \
         install \
         "$pkg_install" \
         || { apt_get_exit_code="$?" ; true; };

   local apt_get_exit_code="0"
   $CHROOT \
      apt-get \
         ${APTGETOPT[@]} \
         $apt_sourcelist_empty \
         $apt_sourceparts \
         $apt_unattended_opts \
         --yes \
         --no-install-recommends \
         install \
         "$pkg_install" \
         || { apt_get_exit_code="$?" ; true; };

   $CHROOT sync
   sync

   if [ "$apt_get_exit_code" = "0" ]; then
      true "${cyan}INFO: Installed $pkg_install, no error detected.${reset}"
      return 0
   fi

   true "${bold}${red}ERROR: Failed to install $pkg_install. (apt_get_exit_code: $apt_get_exit_code) \
Attempting to gather debug output to diagnose the problem...${reset}"

   true "${bold}${cyan}INFO: Read output of apt-get trying to install $pkg_install into a \
variable for debugging. This may take a while...${reset}"

   local apt_get_exit_code="0"
   apt_get_output=" \
         $( \
            $CHROOT \
               apt-get \
                  ${APTGETOPT[@]} \
                  $apt_sourcelist_empty \
                  $apt_sourceparts \
                  $apt_unattended_opts \
                  --yes \
                  --no-install-recommends \
                  install \
                  "$pkg_install" \
                  2>&1 \
         ) \
      " \
      || { apt_get_exit_code="$?" ; true; };

   $CHROOT sync
   sync

   if [ "$apt_get_exit_code" = "0" ]; then
      true "${bold}${red}ERROR: Second attempt installing $pkg_install did not fail?!?${reset}"
      error "See above!"
      return 0
   fi

   true "${bold}${red}ERROR: As expected, failed again to install $pkg_install. (apt_get_exit_code: $apt_get_exit_code) \
Trying to diagnose the problem using function apt_get_parse_unmet_dependency...${reset}"

   apt_get_parse_unmet_dependency "$pkg_install"

   true "INFO: Tried to diagnose the problem using function apt_get_parse_unmet_dependency."

   error "See above!"
   return 0
}

install-packages() {
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   sync

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/mount-raw"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/prevent-daemons-from-starting"

   sync

   ## Sanity tests.
   $CHROOT sync

   sync

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/create-local-temp-apt-repo"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/chroot-raw"

   ## Debugging.
   $CHROOT ls -la /mnt/initialdeb/dists/local/ || true
   $CHROOT ls -la /mnt/initialdeb/dists/local/main/binary-*/ || true

   ## XXX
   ## Make the wrapper available.
   mkdir -p "$CHROOT_FOLDER/usr/lib/security-misc"
   cp "$apt_get_update_wrapper_source_path_full" "$CHROOT_FOLDER/$apt_get_update_wrapper_bin_path_full"
   cp "$apt_get_update_sanity_test__source_path_full" "$CHROOT_FOLDER/$apt_get_update_sanity_test_bin_path_full"

   $CHROOT $apt_get_update_wrapper_bin_path_full ${APTGETOPT[@]} $apt_sourcelist_empty $apt_sourceparts $apt_unattended_opts update

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unchroot-raw"

   ## {{ controversy of: /etc/resolv.conf /etc/hosts /etc/hostname,
   ##    see help-steps/chroot-raw for more information.

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/create-local-temp-apt-repo"
   export WHONIX_CHROOT_MOUNT_RESOLV_CONF="0"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/chroot-raw"

   if [ "$WHONIX_BUILD_TYPE" = "gateway" ]; then
      pkg-install-maybe whonix-gateway-packages-dependencies-pre
   elif [ "$WHONIX_BUILD_TYPE" = "workstation" ]; then
      pkg-install-maybe whonix-workstation-packages-dependencies-pre
   elif [ "$WHONIX_BUILD_TYPE" = "debian-vm" ]; then
      true "INFO: $WHONIX_BUILD_FLAVOR (WHONIX_BUILD_TYPE: $WHONIX_BUILD_TYPE) therefore skipping dependencies-pre, ok."
   elif [ "$WHONIX_BUILD_TYPE" = "hardened-debian" ]; then
      true "INFO: $WHONIX_BUILD_FLAVOR (WHONIX_BUILD_TYPE: $WHONIX_BUILD_TYPE) therefore skipping dependencies-pre, ok."
   else
      error "ERROR: Invalid WHONIX_BUILD_FLAVOR $WHONIX_BUILD_FLAVOR. Please report this bug!"
   fi

   unset WHONIX_CHROOT_MOUNT_RESOLV_CONF
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unchroot-raw"

   ## }}

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/create-local-temp-apt-repo"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/chroot-raw"

   ## Reading Debian apt repository and local repository containing Whonix's packages.
   $CHROOT $apt_get_update_wrapper_bin_path_full ${APTGETOPT[@]} $apt_sourcelist_empty $apt_sourceparts $apt_unattended_opts update

   ## Debugging.
   $CHROOT apt-get ${APTGETOPT[@]} $apt_sourceparts $apt_unattended_opts clean
   $CHROOT apt-get ${APTGETOPT[@]} $apt_sourceparts $apt_unattended_opts autoclean
   $CHROOT apt-get ${APTGETOPT[@]} $apt_sourceparts $apt_unattended_opts --fix-broken --yes install
   $CHROOT apt-get ${APTGETOPT[@]} $apt_sourceparts $apt_unattended_opts --fix-missing --yes install
   $CHROOT apt-get ${APTGETOPT[@]} $apt_sourceparts $apt_unattended_opts --fix-broken --fix-missing --yes install
   $CHROOT dpkg --configure -a
   $CHROOT dpkg --audit
   $CHROOT apt-get ${APTGETOPT[@]} $apt_sourcelist_empty $apt_sourceparts $apt_unattended_opts --yes dist-upgrade

   if [ "$whonix_build_script_skip_package_install" = "" ]; then
      true "${bold}${cyan}INFO $BASH_SOURCE: Variable whonix_build_script_skip_package_install is empty. \
No packages will be excluded from installation. This information is relevant for builders using custom configurations, \
skipping packages such as Terminal-Only.${reset}"
   else
      true "${bold}${cyan}INFO $BASH_SOURCE: List of packages to be excluded from installation. This information is relevant for \
builders using custom configurations, skipping packages such as Terminal-Only. whonix_build_script_skip_package_install: \
$whonix_build_script_skip_package_install${reset}"
   fi

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true "${bold}${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set to 1. Skipping kernel installation (one should already be installed), ok.${reset}"
   else
      if [ "$BUILD_KERNEL_PKGS" = "none" ]; then
         true "${bold}${cyan}INFO: BUILD_KERNEL_PKGS: ${BUILD_KERNEL_PKGS} - Skipping kernel installation.${reset}"
      else
         true "${bold}${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set not set to 1. Starting kernel installation...${reset}"
         true "${bold}${cyan}INFO: BUILD_KERNEL_PKGS: ${BUILD_KERNEL_PKGS}${reset}"
         local build_kernel
         for build_kernel in $BUILD_KERNEL_PKGS; do
            pkg-install-maybe "$build_kernel"
         done
      fi
      if [ "$BUILD_HEADER_PKGS" = "none" ]; then
         true "${bold}${cyan}INFO: BUILD_HEADER_PKGS: ${BUILD_HEADER_PKGS} - Skipping kernel header installation.${reset}"
      else
         true "${bold}${cyan}INFO: kernel installation done.${reset}"
         true "${bold}${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set not set to 1. Starting kernel header installation...${reset}"
         true "${bold}${cyan}INFO: BUILD_HEADER_PKGS: ${BUILD_HEADER_PKGS}${reset}"
         local build_header
         for build_header in $BUILD_HEADER_PKGS; do
            pkg-install-maybe "$build_header"
         done
         true "${bold}${cyan}INFO: kernel header installation done.${reset}"
      fi
   fi

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true "${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set to 1, skipping installation of grub-screen-resolution and grub-output-verbose, ok.${reset}"
   elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-gateway-rpi" ]; then
      true "${cyan}INFO: Building $WHONIX_BUILD_FLAVOR, skipping installation of grub-screen-resolution and grub-output-verbose, ok.${reset}"
   elif [ "$WHONIX_BUILD_FLAVOR" = "whonix-workstation-rpi" ]; then
      true "${cyan}INFO: Building $WHONIX_BUILD_FLAVOR, skipping installation of grub-screen-resolution and grub-output-verbose, ok.${reset}"
   else
      pkg-install-maybe grub-screen-resolution
      pkg-install-maybe grub-output-verbose
   fi

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true "${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set to 1, skipping installation of weak recommended guest additions packages, ok.${reset}"
   else
      ## Weak recommended packages. No other package depends on it. Can be
      ## easily uninstalled. For better usability.
      if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
         ## virtualbox-guest-dkms is required VirtualBox guest addtions module
         ## building. Need to manually install it, because we are
         ## using --no-install-recommends and because neither
         ## virtualbox-guest-x11 nor virtualbox-guest-utils depends on it.
         pkg-install-maybe virtualbox-guest-dkms
         pkg-install-maybe virtualbox-guest-x11
      else
         true "${cyan}INFO: skipping installation of weak recommended guest additions package virtualbox-guest-x11, because not using --target virtualbox, ok.${reset}"
      fi
      if [ "$WHONIX_BUILD_QCOW2" = "true" ]; then
         pkg-install-maybe spice-vdagent
      else
         true "${cyan}INFO: skipping installation of weak recommended guest additions packages spice-vdagent because not using --target qcow2, ok.${reset}"
      fi
   fi

   if [ "$install_package" = "none" ]; then
      true "${cyan}INFO: $install_package is set to 'none', skipping.${reset}"
   else
      pkg-install-maybe "$install_package"
   fi

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/remove-local-temp-apt-repo"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unprevent-daemons-from-starting"

   ## Forget about local repository containing Whonix's packages.
   #$CHROOT apt-get --no-download --list-cleanup update

   $CHROOT sync
   sync

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unchroot-raw"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unmount-raw"

   sync
}

main() {
   if [ "$WHONIX_BUILD_FLAVOR" = "whonix-custom-workstation" ]; then
      true "${cyan}INFO: Skipping installing packages for $VMNAME.${reset}"
   else
      install-packages
   fi
}

main "$@"
