#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source variables

## Debugging function.
parse_apt_get_unmet_dependency() {
   ## no error handler

   true "INFO: Running \"dpkg -l | grep $pkg\"..."
   dpkg -l | grep "$pkg"
   apt-cache policy "$pkg"

   local line

   ## Thanks to:
   ## http://blog.edwards-research.com/2010/01/quick-bash-trick-looping-through-output-lines/

   OIFS="${IFS}"
   NIFS=$'\n'

   IFS="${NIFS}"

   set +x

   declare -A -g remember_pkg

   for line in ${apt_get_output} ; do
      IFS="${OIFS}"
      local unmet_dependency=""
      unmet_dependency="$(echo "${line}" | grep -o "Depends:.*" | awk '{print $2}')"
      if [ "$unmet_dependency" = "" ]; then
         ## no match
         IFS="${NIFS}"
         continue
      else
         ## match
         if [ "${remember_pkg[$unmet_dependency]}" = "true" ]; then
            continue
         fi
         IFS="${OIFS}"
         echo "${bold}${cyan}INFO: Found unmet dependency: $unmet_dependency. \
Will try to manually install it for debugging...${reset}"
         remember_pkg[$unmet_dependency]="true"
         set -x
         true "INFO: Running \"dpkg -l | grep $unmet_dependency\"..."
         dpkg -l | grep "$unmet_dependency"
         apt-cache policy "$unmet_dependency"
         install-pkg "$unmet_dependency" || true
         set +x
         echo "${bold}${cyan}INFO: Attempt to install unmet_dependency: $unmet_dependency done.${reset}"
         IFS="${NIFS}"
         continue
      fi
   done

   set -x

   IFS="${OIFS}"
}

install-pkg() {
   trap "error_handler_unchroot_unprevent_unmount" ERR INT TERM

   pkg="$1"
   local skip_package
   for skip_package in $whonix_build_script_whonix_package; do
      if [ "$skip_package" = "$pkg" ]; then
         unset skip_package
         true "${bold}${cyan}INFO: Skipping $pkg, because whonix_build_script_whonix_package includes it.${reset}"
         return 0
      fi
   done
   unset skip_package

   true "${cyan}INFO: Installing $pkg, because whonix_build_script_whonix_package does not include it... \
This may take a while...${reset}"

   ## apt: no way to view dpkg commandline and still run dpkg
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=52670
   local apt_get_exit_code="0"
   $CHROOT \
      apt-get \
         $apt_sourcelist_empty \
         $apt_sourceparts \
         $apt_timeout_opts \
         $apt_verify_opts \
         $apt_unattended_opts \
         -o Debug::pkgPackageManager=true \
         -o Debug::pkgDPkgPM=true \
         --yes \
         --no-install-recommends \
         install \
         "$pkg" \
         || { apt_get_exit_code="$?" ; true; };

   local apt_get_exit_code="0"
   $CHROOT \
      apt-get \
         $apt_sourcelist_empty \
         $apt_sourceparts \
         $apt_timeout_opts \
         $apt_verify_opts \
         $apt_unattended_opts \
         --yes \
         --no-install-recommends \
         install \
         "$pkg" \
         || { apt_get_exit_code="$?" ; true; };

   $CHROOT sync
   sync

   if [ "$apt_get_exit_code" = "0" ]; then
      true "${cyan}INFO: Installed $pkg, no error detected.${reset}"
      return 0
   fi

   if [ "$CI" = "true" ]; then
      ## Debugging Travis CI.
      true "${bold}${red}ERROR: Failed to install $pkg. (apt_get_exit_code: $apt_get_exit_code) \
Continue anyway, because CI detected.${reset}"
      return 0
   fi

   true "${bold}${red}ERROR: Failed to install $pkg. (apt_get_exit_code: $apt_get_exit_code) \
Attempting to gather debug output to diagnose the problem...${reset}"

   true "${bold}${cyan}INFO: Read output of apt-get trying to install $pkg into a \
variable for debugging. This may take a while...${reset}"

   local apt_get_exit_code="0"
   apt_get_output=" \
         $( \
            $CHROOT \
               apt-get \
                  $apt_sourcelist_empty \
                  $apt_sourceparts \
                  $apt_timeout_opts \
                  $apt_verify_opts \
                  $apt_unattended_opts \
                  --yes \
                  --no-install-recommends \
                  install \
                  "$pkg" \
                  2>&1 \
         ) \
      " \
      || { apt_get_exit_code="$?" ; true; };

   $CHROOT sync
   sync

   if [ "$apt_get_exit_code" = "0" ]; then
      true "${bold}${red}ERROR: Second attempt installing $pkg did not fail?!?${reset}"
      error "See above!"
   fi

   true "${bold}${red}ERROR: As expected, failed again to install $pkg. (apt_get_exit_code: $apt_get_exit_code) \
Trying to diagnose the problem using function parse_apt_get_unmet_dependency...${reset}"

   parse_apt_get_unmet_dependency
   error "See above!"
}

install-packages() {
   trap "error_handler_unchroot_unprevent_unmount" ERR INT TERM

   if [ "$WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY" = "1" ]; then
      if [ ! -f "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"/done ]; then
         error "${red}${bold}$BASH_SOURCE ERROR: $WHONIX_LOCAL_SIGNING_KEY_FOLDER/done does not exist. Most likely build-steps.d/1200_create-debian-packages has not been run yet.${reset}"
      fi
   fi

   sync

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/mount-raw
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/prevent-daemons-from-starting

   sync

   ## Sanity tests.
   $CHROOT sync

   sync

   if [ "$BARE_METAL" = "1" ]; then
      ## Backup exiting /etc/apt/sources.list, might be useful for bare metal users.
      cp --no-clobber --recursive --preserve "$CHROOT_FOLDER"/etc/apt/sources.list "$CHROOT_FOLDER"/etc/apt/sources.list.backup

      ## Backup exiting /etc/resolv.conf, so we can later use it in help-steps/chroot-img.
      cp --no-clobber --recursive --preserve "$CHROOT_FOLDER"/etc/resolv.conf "$CHROOT_FOLDER"/etc/resolv.conf.backup

      ## Backup exiting /etc/hosts so we can later use it in help-steps/chroot-img.
      cp --no-clobber --recursive --preserve "$CHROOT_FOLDER"/etc/hosts "$CHROOT_FOLDER"/etc/hosts.backup

      ## Backup exiting /etc/hostname so we can later use it in help-steps/chroot-img.
      cp --no-clobber --recursive --preserve "$CHROOT_FOLDER"/etc/hostname "$CHROOT_FOLDER"/etc/hostname.backup

      ## Backup exiting /etc/network/interfaces so we can later use it in help-steps/chroot-img.
      cp --no-clobber --recursive --preserve "$CHROOT_FOLDER"/etc/network/interfaces "$CHROOT_FOLDER"/etc/network/interfaces.backup
   fi

   ## We have to fix /etc/apt/sources.list, because the list which comes with
   ## grml-debootstrap is incomplete (does not complain debian security repository) and points to 127.0.0.1.
   mv "$CHROOT_FOLDER"/etc/apt/sources.list "$CHROOT_FOLDER"/etc/apt/sources.list.backup || true

   ## Implemented in help-steps/pre.
   maybe_enable_apt_cache

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/create-local-temp-apt-repo
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/chroot-raw

   ## Debugging.
   $CHROOT ls -la /etc/apt/trusted.gpg.d
   $CHROOT apt-key finger

   $CHROOT ls -la /mnt/initialdeb/dists/local/ || true
   $CHROOT ls -la /mnt/initialdeb/dists/local/main/binary-i386/ || true
   ## Reading apt repository containing snapshot.debian.org and repository containing Whonix's packages.
   $CHROOT apt-get $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts --fix-missing update

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unchroot-raw

   ## {{ controversy of: /etc/resolv.conf /etc/hosts /etc/hostname /etc/network/interfaces,
   ##    see help-steps/chroot-raw for more information.

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/create-local-temp-apt-repo
   export WHONIX_CHROOT_MOUNT_RESOLV_CONF="0"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/chroot-raw

   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      install-pkg whonix-gateway-packages-dependencies-pre
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      install-pkg whonix-workstation-packages-dependencies-pre
   else
      bug "${red}${bold}ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!${reset}"
   fi

   unset WHONIX_CHROOT_MOUNT_RESOLV_CONF
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unchroot-raw

   ## }}

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/create-local-temp-apt-repo
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/chroot-raw

   $CHROOT ls -la /mnt/initialdeb/dists/local/ || true
   $CHROOT ls -la /mnt/initialdeb/dists/local/main/binary-i386/ || true
   ## Reading apt repository containing snapshot.debian.org and repository containing Whonix's packages.
   $CHROOT apt-get $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts --fix-missing update

   ## Debugging.
   #$CHROOT apt-cache policy || true

   if [ "$CI" = "true" ]; then
      ## Debugging Travis CI.
      $CHROOT grep "Package: zenity" "/var/lib/apt/lists/"* || true
      $CHROOT apt-cache policy zenity || true
      $CHROOT apt-get $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts install zenity || true
   fi

   ## Debugging.
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts clean
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts autoclean
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts --fix-broken --yes install
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts --fix-missing --yes install
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts --fix-broken --fix-missing --yes install
   $CHROOT dpkg --configure -a
   $CHROOT dpkg --audit

   ## Workaround for Travis CI.
   ## Not sure if that should be applied in any case. Should the build process
   ## ever require interaction with an interactive dpkg conflict resolution
   ## dialog, we can still think about that.
   if [ "$CI" = "true" ]; then
      local apt_unattended_opts='-o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"'
   else
      local apt_unattended_opts=''
   fi

   ## While (grml-)debootstrap only used
   ## "deb http://snapshot.debian.org/archive/debian/[...]" we're now also
   ## including "deb http://snapshot.debian.org/archive/debian-security/[...]".
   ## Lets upgrade from the frozen snapshot debian-security repository (if
   ## anything). For whatever that's worth. (We're not using Debian's current
   ## repositories anyway, but can't hurt. More useful for custom builders who
   ## prefer to build from Debians's current repository.)
   if [ "$CI" = "true" ]; then
      true "INFO $BASH_SOURCE: skipping dist-upgrade, because CI detected."
      true "INFO $BASH_SOURCE: (Would try to upgrade from Ubuntu precise to saucy, which failed at time of writing.)"
   else
      $CHROOT apt-get $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts --yes dist-upgrade
   fi

   ## Debugging.
   $CHROOT apt-cache policy
   $CHROOT grep "Package: zenity" "/var/lib/apt/lists/"* || true
   $CHROOT apt-cache policy zenity || true

   if [ "$CI" = "true" ]; then
      ## Debugging Travis CI.
      $CHROOT apt-get $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts install zenity
   fi

   ## Debugging.
   $CHROOT apt-cache policy kde-workspace || true
   $CHROOT apt-cache policy kdm || true
   $CHROOT apt-cache policy okular || true
   $CHROOT apt-cache policy zenity || true
   $CHROOT apt-cache policy debsums || true

   if [ "$whonix_build_script_whonix_package" = "" ]; then
      true "${bold}${cyan}INFO $BASH_SOURCE: Variable whonix_build_script_whonix_package is empty. \
No packages will be excluded from installation. This information is relevant for builders using custom configurations, \
skipping packages such as Terminal-Only.${reset}"
   else
      true "${bold}${cyan}INFO $BASH_SOURCE: List of packages to be excluded from installation. This information is relevant for \
builders using custom configurations, skipping packages such as Terminal-Only. whonix_build_script_whonix_package: \
$whonix_build_script_whonix_package${reset}"
   fi

   install-pkg anon-shared-build-apt-sources-tpo
   install-pkg anon-shared-build-upgrade-torsocks

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: BARE_METAL is set to 1. Skipping kernel installation (one should already be installed), ok.${reset}"
   else
      true "${bold}${cyan}INFO: BARE_METAL is set not set to 1. Starting kernel installation...${reset}"
      true "${bold}${cyan}INFO: BUILD_KERNEL_PKGS: ${BUILD_KERNEL_PKGS}${reset}"
      local build_kernel
      for build_kernel in $BUILD_KERNEL_PKGS; do
         install-pkg "$build_kernel"
      done
      true "${bold}${cyan}INFO: kernel installation done.${reset}"
   fi

   if [ "$BARE_METAL" = "1" ]; then
      true "${cyan}INFO: BARE_METAL is set to 1, skipping installation of anon-shared-build-fix-grub, ok.${reset}"
   else
      install-pkg anon-shared-build-fix-grub
   fi

   install-pkg anon-shared-build-log-build-version
   install-pkg anon-shared-build-remember-sources
   install-pkg anon-shared-build-ban-nonfree
   install-pkg anon-shared-build-sanity-checks

   install-pkg anon-shared-packages-dependencies
   install-pkg anon-shared-packages-recommended

   install-pkg anon-shared-desktop

   install-pkg anon-shared-desktop-kde

   install-pkg anon-shared-kde-accessibility

   install-pkg whonix-shared-packages-dependencies
   install-pkg whonix-shared-packages-recommended

   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      install-pkg anon-gw-build-upgrade-tor
      install-pkg anon-gateway-packages-dependencies
      install-pkg anon-gateway-packages-recommended
      install-pkg whonix-gateway-packages-dependencies
      install-pkg whonix-gateway-packages-recommended
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      install-pkg anon-shared-build-inst-tb
      install-pkg anon-workstation-packages-dependencies
      install-pkg anon-workstation-packages-recommended
      install-pkg anon-workstation-default-applications
      install-pkg whonix-workstation-packages-dependencies
      install-pkg whonix-workstation-packages-recommended
   else
      bug "${red}${bold}ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!${reset}"
   fi

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/remove-local-temp-apt-repo
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unprevent-daemons-from-starting

   ## Forget about local repository containing Whonix's packages.
   #$CHROOT apt-get --no-download --list-cleanup update

   ## Implemented in help-steps/pre.
   disable_apt_cache

   $CHROOT sync
   sync

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unchroot-raw
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-raw

   sync
}

true "${bold}${under}INFO: Currently running script: $BASH_SOURCE ${1+"$@"}${reset}"
if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
   install-packages
elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
   install-packages
elif [ "$WHONIX_BUILD_CUSTOM_WORKSTATION" = "1" ]; then
   true "${cyan}INFO: Skipping installing packages for $VMNAME.${reset}"
else
   bug "ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!"
fi
benchmark_time_end ## sets benchmark_took_time (implemented in help-steps/pre)
true "${bold}${under}INFO: End of: $BASH_SOURCE No error detected. (benchmark: $benchmark_took_time)${reset}"
