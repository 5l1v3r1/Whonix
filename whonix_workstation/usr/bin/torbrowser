#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Whonix /usr/bin/torbrowser

#set -x
set -o pipefail

SCRIPTNAME="$(basename $0)"

## Setting to "torbrowser" so this does not become "whonix-torbrowser".
IDENTIFIER="torbrowser"

ICON="/usr/share/icons/whonix/tbupdate.ico"

tb_error_handler() {
   local exit_code="$?"

   local MSG="\
###########################################################
## $SCRIPTNAME script bug.
## No panic. Nothing is broken. Just some rare condition
## has been hit. Try again later. There is likely a
## solution for this problem. Please see the Whonix News,
## Whonix User Help Forum and Whonix Documentation.
## https://www.whonix.org/wiki/Tor_Browser
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
##
## output: $output
## output_opts: ${output_opts[@]}
## progressbaridx: $progressbaridx
##
## Experts only:
## bash -x $SCRIPTNAME
###########################################################\
"

   mkdir --parents ~/".whonix"
   echo "$MSG" >> ~/".whonix/whonix_torbrowser_updater_error.log"

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   fi
   $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
   exit 1
}

trap "tb_error_handler" ERR

DOC_LINK="https://www.whonix.org/wiki/Documentation"
CONTRIBUTE_LINK="https://www.whonix.org/wiki/Contribute"
DONATE_LINK="https://www.whonix.org/wiki/Donate"
FORUM_LINK="https://www.whonix.org/forum/"
MAILINGLIST_LINK="https://www.whonix.org/pipermail/whonix-devel/"
IMPORTANTBLOG_LINK="https://www.whonix.org/blog/?cat=important"
FEATUREBLOG_LINK="https://www.whonix.org/blog/"

IMPORTANTBLOG_OFFLINE_FILE="/var/lib/whonix/whonixblog/important_blog.txt"
IMPORTANTBLOG_OFFLINE_LINK="file://$IMPORTANTBLOG_OFFLINE_FILE"

IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_FILE="/usr/share/whonix/import_blog_not_available.txt"
IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_LINK="file://$IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_FILE"

FEATUREBLOG_OFFLINE_FILE="/var/lib/whonix/whonixblog/feature_blog.txt"
FEATUREBLOG_OFFLINE_LINK="file://$FEATUREBLOG_OFFLINE_FILE"

FEATUREBLOG_NOT_AVAILABLE_OFFLINE_FILE="/usr/share/whonix/feature_blog_not_available.txt"
FEATUREBLOG_NOT_AVAILABLE_OFFLINE_LINK="file://$FEATUREBLOG_NOT_AVAILABLE_OFFLINE_FILE"

root_check() {
   if [ "$(id -u)" != "0" ]; then
      #echo "$SCRIPTNAME running as user."
      true
   else
      echo "Do not run $SCRIPTNAME as root!"
      exit 1
   fi
}

tb_preparation() {
   trap "tb_error_handler" ERR

   home_folder=~

   #echo "INFO: TB_LANG: $TB_LANG"

   for i in /etc/whonix.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done

   ## Check if TB_LANG exists and is not empty.
   if [[ "$TB_LANG" && "${TB_LANG}" ]]; then
      echo "INFO: Tor Browser language variable is set to "$TB_LANG"."
      true
   else
      echo "INFO: Tor Browser language variable not found. Setting TB_LANG to the default en-US."
      TB_LANG="en-US"
   fi

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   rm --force "/var/run/whonixcheck/${IDENTIFIER}_done"

   output="/usr/lib/msgcollector/msgcollector"

   local my_tty
   local my_tty_exit_code
   my_tty_exit_code="0"
   my_tty="$(tty)" || { my_tty_exit_code="$?" ; true; };

   if [ ! "$my_tty_exit_code" = "0" ]; then
      my_tty="none"
   fi

   ## Just in case.
   if [ "$my_tty" = "" ]; then
      my_tty="none"
   fi

   output_opt_1="--icon $ICON"
   output_opt_2="--parentpid $$"
   output_opt_3="--identifier ${IDENTIFIER}"
   output_opt_4="--parenttty $my_tty"
   #output_opt_5=""

   output_opts=( "$output_opt_1" "$output_opt_2" "$output_opt_3" "$output_opt_4" "$output_opt_5")

   TITLE="Tor Browser Starter (Whonix)"

   ## TODO
   #$output ${output_opts[@]} --forget
}

parse_cmd_options() {
   trap "tb_error_handler" ERR

   if [ "$1" = "" ]; then
      ## Same as --start.
      open_new_window="0"
      LINK=""
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while :
   do
       case $1 in
           --language)
               TB_LANG="$2"
               shift 2
               ;;
           --recommend | --recommended)
               tb_recommended_start="1"
               shift
               ;;
           --start)
               open_new_window="0"
               LINK=""
               shift
               ;;
           --doc)
               open_new_window="1"
               LINK="$DOC_LINK"
               shift
               ;;
           --contribute)
               open_new_window="1"
               LINK="$CONTRIBUTE_LINK"
               shift
               ;;
           --donate)
               open_new_window="1"
               LINK="$DONATE_LINK"
               shift
               ;;
           --forum)
               open_new_window="1"
               LINK="$FORUM_LINK"
               shift
               ;;
           --mailinglist)
               open_new_window="1"
               LINK="$MAILINGLIST_LINK"
               shift
               ;;
           --importantblog)
               open_new_window="1"
               LINK="$IMPORTANTBLOG_LINK"
               shift
               ;;
           --featureblog)
               open_new_window="1"
               LINK="$FEATUREBLOG_LINK"
               shift
               ;;
           --new-window | --newwindow | -new-window | -newwindow)
               open_new_window="1"
               LINK="$2"
               if [ "$LINK" = "" ]; then
                  shift
               else
                  shift 2
               fi
               ;;
           --new-tab | --newtab | -new-tab | -newtab)
               open_new_window="0"
               LINK="$2"
               if [ "$LINK" = "" ]; then
                  shift
               else
                  shift 2
               fi
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1"
               echo "See:"
               echo "    man $SCRIPTNAME"
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
   true "$0 \$@: $@"
}

tb_start_new_tab() {
   trap "tb_error_handler" ERR

   if [ ! -d "$home_folder/tor-browser_$TB_LANG" ]; then
      MSG="Tor Browser is not installed?
The folder $home_folder/tor-browser_$TB_LANG/ does not exist.

Please run: Start Menu -> Applications -> System -> Tor Browser Updater
            or in Terminal: $SCRIPTNAME --update"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   echo "INFO: Starting Tor Browser..."

   if [ "$LINK" = "" ]; then
      LINK="about:blank"
   else
      echo "INFO: Opening link..."
   fi

   cd "$home_folder/tor-browser_$TB_LANG/"

   if [ -f "$home_folder/tor-browser_$TB_LANG/Browser/firefox" ]; then
      ## TBB 3.x.
      local tbb_bin="$home_folder/tor-browser_$TB_LANG/Browser/firefox"
      local tbb_profile="Data/Browser/profile.default"
   elif [ -f "$home_folder/tor-browser_"$TB_LANG"/App/Firefox/firefox" ]; then
      ## TBB 2.x
      local tbb_bin="$home_folder/tor-browser_"$TB_LANG"/App/Firefox/firefox"
      local tbb_profile="Data/profile"
   else
      MSG="Tor Browser is not installed?

The folder $home_folder/tor-browser_$TB_LANG/ exists, but neither
binary "$home_folder/tor-browser_"$TB_LANG"/App/Firefox/firefox" (TBB 2.x) nor
binary $home_folder/tor-browser_$TB_LANG/Browser/firefox (TBB 3.x) exists.

Please run: Start Menu -> Applications -> System -> Tor Browser Updater
            or in Terminal: $SCRIPTNAME --update"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   "$tbb_bin" --profile "$tbb_profile" --new-tab "$LINK" &
}

tb_start_recommend() {
   trap "tb_error_handler" ERR

   PID="$(pidof firefox)" || true

   if [ ! -e "$IMPORTANTBLOG_OFFLINE_FILE" ]; then
      LINK="$IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_LINK"
   else
      LINK="$IMPORTANTBLOG_OFFLINE_LINK"
   fi
   echo "INFO: Link set to $LINK"
   tb_start_new_tab

   if [ "$PID" = "" ]; then
      echo "INFO: Waiting 30 seconds for Tor Browser to start..."
      ## Unfortunately, we must hard code the time to wait before
      ## we try open extra tabs. Just waiting for the pid to exists
      ## does not do the trick. We are not aware of a way to ask Firefox,
      ## if it is only partially or fully load. When trying to open
      ## a new tab before it is fully load, a popup "profile not found"
      ## will be shown, which is confusing.
      sleep 30 &
      wait "$!"
   fi

   if [ ! -e "$FEATUREBLOG_OFFLINE_FILE" ]; then
      LINK="$FEATUREBLOG_NOT_AVAILABLE_OFFLINE_LINK"
   else
      LINK="$FEATUREBLOG_OFFLINE_LINK"
   fi
   echo "INFO: Link set to $LINK"
   tb_start_new_tab

   exit 0
}

tb_new_window() {
   trap "tb_error_handler" ERR

   cd "$home_folder/tor-browser_$TB_LANG"
   "$home_folder/tor-browser_$TB_LANG/Browser/firefox" --profile Data/Browser/profile.default --new-window "$LINK" &
}

main_function() {
   trap "tb_error_handler" ERR

   root_check
   tb_preparation
   parse_cmd_options ${1+"$@"}

   if [ ! -d "$home_folder/tor-browser_$TB_LANG" ]; then
      local MSG="Tor Browser is currently not installed.
(Folder $home_folder/tor-browser_$TB_LANG does not exist.)

Start Whonix's Tor Browser Updater?"
      local answer
      answer="0"
      zenity --title="$TITLE" --question --text "$MSG" || { answer="$?" ; true; };
      ## zenity exit codes
      ## no 1
      ## yes 0
      if [ "$answer" = "0" ]; then
         update-torbrowser --noaskstart
      else
         exit 0
      fi
   fi
   if [ ! -d "$home_folder/tor-browser_$TB_LANG" ]; then
      ## Still not installed.
      exit 0
   fi

   if [ "$tb_recommended_start" = "1" ]; then
      tb_start_recommend
   elif [ "$open_new_window" = "1" ]; then
      tb_new_window
   elif [ "$open_new_window" = "0" ]; then
      tb_start_new_tab
   elif [[ ! "$@" = "" ]]; then
      true "$0 \$@: $@"
      /usr/lib/open_link_confirmation $@
   else
      true "$0 Else!?!"
   fi
}

main_function ${1+"$@"}

## End of Whonix /usr/bin/torbrowser
