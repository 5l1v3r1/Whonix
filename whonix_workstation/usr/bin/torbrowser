#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

## Whonix /usr/bin/torbrowser

## Tor Browser download script for Whonix.
## See its man page for available command line options.

#set -x
set -o pipefail

SCRIPTNAME="$(basename $0)"

## Setting to "torbrowser" so this does not become "whonix-torbrowser".
IDENTIFIER="torbrowser"

ICON="/usr/share/whonix/icons/tbupdate.ico"

## Developer comment on this script:
## I would be very happy if this script would not be required.
## Unfortunately, it is required. It works around a lot bugs:
## - There is no deb/rpm/whatever package with Tor Browser.
##   https://trac.torproject.org/projects/tor/ticket/5236
##   https://trac.torproject.org/projects/tor/ticket/3994
## - There is no way to keep Tor Browser updated.
##   (Thandy doesn't exist yet.)
## - There is no way to add the Whonix Documentation well visible to Tor Browser:
##   https://trac.torproject.org/projects/tor/ticket/6025
##   https://trac.torproject.org/projects/tor/ticket/6053
## - Tor Browsers support for Isolating and Transparent Proxies is very limited:
##   https://trac.torproject.org/projects/tor/ticket/5611
## - tbb-scripts
##   https://github.com/adrelanos/tbb-scripts



root_check() {
   if [ "$(id -u)" != "0" ]; then
      #echo "$SCRIPTNAME running as user."
      true
   else
      echo "Do not run $SCRIPTNAME as root!"
      exit 1
   fi
}



tb_error_handler() {
   local return_code="$?"

   local MSG="\
###########################################################
## $SCRIPTNAME script bug.
## No panic. Nothing is broken. Just some rare condition
## has been hit. Try again later. There is likely a
## solution for this problem. Please see the Whonix News,
## Whonix User Help Forum and Whonix Documentation.
## https://www.whonix.org/wiki/Tor_Browser
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## return_code: $return_code
##
## output: $output
## output_opts: ${output_opts[@]}
## progressbaridx: $progressbaridx
##
## Experts only:
## bash -x $SCRIPTNAME
###########################################################\
"

   mkdir --parents ~/".whonix"
   echo "$MSG" >> ~/".whonix/whonix_torbrowser_updater_error.log"

   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
   exit 1
}

trap "tb_error_handler" ERR



tb_sanity_tests() {
   trap "tb_error_handler" ERR

   command -v id >/dev/null
   command -v basename >/dev/null
   command -v touch >/dev/null
   command -v uname >/dev/null
   command -v sudo >/dev/null
   command -v mkdir >/dev/null
   command -v pidof >/dev/null
   command -v chmod >/dev/null
   command -v cp >/dev/null
   command -v mv >/dev/null
   command -v killall >/dev/null
   command -v rm >/dev/null
   command -v head >/dev/null
   command -v zenity >/dev/null
   command -v tar >/dev/null
   command -v date >/dev/null
   command -v /usr/lib/whonix/msgcollector >/dev/null
   ## tbbversion function
   command -v grep >/dev/null
   ## tbbversion function
   command -v sed >/dev/null
}



trap_tb() {
   trap "tb_error_handler" ERR

   MSG="INFO $SCRIPTNAME: SIG-(TERM/INT) received. Exiting."

   if [ "$LAST_CURL_PRGRS_PID" = "" ]; then
      true
   else
      kill -1 "$LAST_CURL_PRGRS_PID"
   fi

   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done

   #MSG="Aborted."
   #$output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
   #$output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
   exit 1
}

trap "trap_tb" SIGTERM
trap "trap_tb" SIGINT



debug() {
   trap "tb_error_handler" ERR

   ## debug is just a marker for messages which is are not essential for users.
   ## either in cli or gui.
   echo "$*"
}



DOWNLOAD_FAIL_HELP="Possible reasons:

- The download server is down.
- Whonix's Tor Browser Updater has been broken due to upstream changes.

Recommendations:

- Try again later. If the error persists it probably won't solve itself before the next Whonix update.
- Check Whonix News: https://www.whonix.org/wiki/Download#Stay_tuned
- Manually update: https://www.whonix.org/wiki/Manually_Updating_Tor_Browser"



GATEWAY_IP="192.168.0.10"
SOCKS_PORT_TBB_DOWNLOAD="9115"

DOC_LINK="https://www.whonix.org/wiki/Documentation"
CONTRIBUTE_LINK="https://www.whonix.org/wiki/Contribute"
DONATE_LINK="https://www.whonix.org/wiki/Donate"
FORUM_LINK="https://www.whonix.org/wiki/Special:AWCforum/"
MAILINGLIST_LINK="https://www.whonix.org/pipermail/whonix-devel/"
IMPORTANTBLOG_LINK="https://anonymousoperatingsystem.wordpress.com/category/important/"
FEATUREBLOG_LINK="https://anonymousoperatingsystem.wordpress.com/"

IMPORTANTBLOG_OFFLINE_FILE="/var/lib/whonix/whonixblog/important_blog.txt"
IMPORTANTBLOG_OFFLINE_LINK="file://$IMPORTANTBLOG_OFFLINE_FILE"

IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_FILE="/usr/share/whonix/import_blog_not_available.txt"
IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_LINK="file://$IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_FILE"

FEATUREBLOG_OFFLINE_FILE="/var/lib/whonix/whonixblog/feature_blog.txt"
FEATUREBLOG_OFFLINE_LINK="file://$FEATUREBLOG_OFFLINE_FILE"

FEATUREBLOG_NOT_AVAILABLE_OFFLINE_FILE="/usr/share/whonix/feature_blog_not_available.txt"
FEATUREBLOG_NOT_AVAILABLE_OFFLINE_LINK="file://$FEATUREBLOG_NOT_AVAILABLE_OFFLINE_FILE"


parse_cmd_options() {
   trap "tb_error_handler" ERR

   if [ "$1" = "" ]; then
      ## Same as --start.
      open_new_window="0"
      LINK=""
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while :
   do
       case $1 in
           --ordinary)
               ORDINARY_PROGRESS_BAR="1"
               shift
               ;;
           --update)
               TB_UPDATE="1"
               shift
               ;;
           --noask)
               TB_UPDATE="1"
               TB_FORCE_INSTALL="1"
               shift
               ;;
           --nokilltb)
               TB_UPDATE="1"
               NOKILLTB="1"
               shift
               ;;
           --devbuildpassthrough)
               TB_UPDATE="1"
               TB_FORCE_INSTALL="1"
               DEV_BUILD_PASSTHROUGH="1"
               DEV_PASSTHROUGH="1"
               ORDINARY_PROGRESS_BAR="1"
               shift
               ;;
           --clearnet)
               TB_CLEARNET="1"
               shift
               ;;
           --language)
               TB_LANG="$2"
               shift 2
               ;;
           --recommend | --recommended)
               tb_recommended_start="1"
               shift
               ;;
           --start)
               open_new_window="0"
               LINK=""
               shift
               ;;
           --doc)
               open_new_window="1"
               LINK="$DOC_LINK"
               shift
               ;;
           --contribute)
               open_new_window="1"
               LINK="$CONTRIBUTE_LINK"
               shift
               ;;
           --donate)
               open_new_window="1"
               LINK="$DONATE_LINK"
               shift
               ;;
           --forum)
               open_new_window="1"
               LINK="$FORUM_LINK"
               shift
               ;;
           --mailinglist)
               open_new_window="1"
               LINK="$MAILINGLIST_LINK"
               shift
               ;;
           --importantblog)
               open_new_window="1"
               LINK="$IMPORTANTBLOG_LINK"
               shift
               ;;
           --featureblog)
               open_new_window="1"
               LINK="$FEATUREBLOG_LINK"
               shift
               ;;
           --new-window | --newwindow | -new-window | -newwindow)
               open_new_window="1"
               LINK="$2"
               if [ "$LINK" = "" ]; then
                  shift
               else
                  shift 2
               fi
               ;;
           --new-tab | --newtab | -new-tab | -newtab)
               open_new_window="0"
               LINK="$2"
               if [ "$LINK" = "" ]; then
                  shift
               else
                  shift 2
               fi
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1"
               echo "See:"
               echo "    man $SCRIPTNAME"
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
   true "$0 \$@: $@"
}



get_new_progressbaridx() {
   trap "tb_error_handler" ERR

   local tmp
   tmp="$(mktemp)"
   progressbaridx="${tmp##*.}"
}



tb_preparation() {
   trap "tb_error_handler" ERR

   ## Workaround for CI compatibility.
   if [ "$CI" = "true" ]; then
      home_folder=/home/user
   else
      home_folder=~
   fi

   ## Fortunately, on linux-image-486 kernel, while "uname --all" returns for example
   ## "Linux host 3.2.0-4-486 #1 Debian 3.2.41-2 i686 GNU/Linux",
   ## "uname --machine" returns "i686" and Tor Browser works fine with linux-image-486 kernel.
   ## (There are no 486 downloads for Tor Browser.)
   ##ARCH="x86_64"
   ##ARCH="i686"
   ARCH="$(uname --machine)"
   echo "INFO: $ARCH detected."

   if [ "$ARCH" = "i686" ]; then
      ARCH_NEW="linux32"
   else
      ## NOTE: A simple else is non-ideal, should there be ever more architectures.
      ARCH_NEW="linux64"
   fi

   ## provides tbbversion function
   source /usr/lib/whonix/whonixcheck/help_tbbversion

   #debug "INFO: TB_LANG: $TB_LANG"

   for i in /etc/whonix.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done

   ## Check if TB_LANG exists and is not empty.
   if [[ "$TB_LANG" && "${TB_LANG}" ]]; then
      #debug "INFO: Tor Browser language variable is set to "$TB_LANG"."
      true
   else
      #debug "INFO: Tor Browser language variable not found. Setting TB_LANG to the default en-US."
      TB_LANG="en-US"
   fi

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   rm --force "/var/run/whonix/whonixcheck/${IDENTIFIER}_done"

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      output="true"
   else
      output="/usr/lib/whonix/msgcollector"
   fi

   local my_tty
   local my_tty_exit_code
   my_tty_exit_code="0"
   my_tty="$(tty)" || { my_tty_exit_code="$?" ; true; };

   if [ ! "$my_tty_exit_code" = "0" ]; then
      my_tty="none"
   fi

   ## Just in case.
   if [ "$my_tty" = "" ]; then
      my_tty="none"
   fi

   output_opt_1="--icon $ICON"
   output_opt_2="--parentpid $$"
   output_opt_3="--identifier ${IDENTIFIER}"
   output_opt_4="--parenttty $my_tty"
   #output_opt_5=""

   output_opts=( "$output_opt_1" "$output_opt_2" "$output_opt_3" "$output_opt_4" "$output_opt_5")

   TITLE="Tor Browser Update Check (Whonix)"

   ## TODO
   #$output ${output_opts[@]} --forget

   ## provides $CURL variable
   source /usr/lib/whonix/whonixcheck/help_uwt_tool
   uwt_tool

   if [ "$ORDINARY_PROGRESS_BAR" = "1" ]; then
      ## --ordinary enabled
      CURL_PRGRS="$CURL"
   else
      ## Curl progress wrapper.
      CURL_PRGRS="/usr/lib/whonix/curl-prgrs"
   fi

   ## Debugging CURL_PRGRS.
   #CURL_PRGRS="bash -x /usr/lib/whonix/curl-prgrs"

   ## Debugging / disabling CURL_PRGRS.
   #CURL_PRGRS="$CURL"

   ## Export CURL variable, so it can be read by $CURL_PRGRS.
   export CURL="$CURL"
}



tb_connectivity_checks() {
   trap "tb_error_handler" ERR

   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      return 0
   fi

   ## Let's reuse that code.
   local connection_checker_return
   connection_checker_return="0"
   /usr/lib/whonix/timesync_prerequisite || { connection_checker_return="$?" ; true; };

   if [ ! "$connection_checker_return" = "0" ]; then
      MSG="Tor not fully bootstrapped.

Possible reasons:
- no internet connectivity

Please check: Start menu -> System -> Whonix Check
              or in Terminal: whonixcheck
              or in Terminal with debugging: whonixcheck -v

Run whonixcheck on Whonix-Gateway as well.

If whonixcheck reports no problems with internet activity and this still fails, please report a bug!"

      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   true "Tor fully bootstrapped."

   NOTIFY_MSG="$SCRIPTNAME Update Check (Whonix)
----------------------------------------------------------------------
Checking connectivity... Will take a moment..."

   ## sets: progressbaridx
   get_new_progressbaridx

   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --typex "info" --titlex "$TITLE" --message "$NOTIFY_MSG" --parentpid "$$" --done
   sleep 1 &
   wait "$!"

   CURL_RETURN="0"
   ## $CURL_PRGRS honors the $CURL and the $CURL_PRGRS_EXEC environment
   ## variables. (See above.)
   ## Define what CURL_PRGRS is supposed to eval.
   ## ($percent is a local variable provided by $CURL_PRGRS.)
   export CURL_PRGRS_EXEC="$output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx \"\$percent\""
   $CURL_PRGRS \
      --fail \
      $CURL_PROXY \
      $CURL_FORCE_SSL \
      --max-time 180 \
      --output "$home_folder/.tb/tbb_remote_folder" \
      "$TBB_REMOTE_FOLDER" \
      &

   LAST_CURL_PRGRS_PID="$!"
   wait "$LAST_CURL_PRGRS_PID" || { CURL_RETURN="$?" ; true; };
   LAST_CURL_PRGRS_PID=""

   ## Check if curl failed.
   if [ ! "$CURL_RETURN" = "0" ]; then
      MSG="$TBB_REMOTE_FOLDER could not be reached.

Possible reasons:
- $TBB_REMOTE_FOLDER is down
- download location changed

Please check: Start menu -> System -> Whonix Check
              or in Terminal: whonixcheck
              or in Terminal with debugging: whonixcheck -v

If whonixcheck reports no problems with internet activity and this keeps failing, please report a bug!"

      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   sleep 1 &
   wait "$!"
}



tb_update_check() {
   trap "tb_error_handler" ERR

   ## do not re-download Tor Browser if a previous build already did
   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      if [ -d "$home_folder/tor-browser_$TB_LANG" ]; then
         echo "$SCRIPTNAME: Not downloading Tor Browser again, because $home_folder/tor-browser_$TB_LANG already exists."
         exit 0
      fi
   fi

   ## sets: progressbaridx
   get_new_progressbaridx

   ## progress bar for update check
   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      NOTIFY_MSG="$SCRIPTNAME Update Check (Whonix)
----------------------------------------------------------------------
Checking Tor Browser version... Will take a moment..."

      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --typex "info" --titlex "$TITLE" --message "$NOTIFY_MSG" --parentpid "$$" --done
      sleep 1 &
      wait "$!"
   fi

   if [ "$DEV_PASSTHROUGH" = "1" ]; then
      CURL_PROXY=""
   else
      CURL_PROXY="--socks5-hostname socks5h://$GATEWAY_IP:$SOCKS_PORT_TBB_DOWNLOAD/"
   fi

   debug "INFO: Find out latest version..."
   LINK="https://check.torproject.org/RecommendedTBBVersions"
   debug "INFO: Downloading: "$LINK""

   mkdir --parents "$home_folder/.tb"

   #debug "$0 CURL_PRGRS_EXEC: $CURL_PRGRS_EXEC"
   #debug "$0 CURL: $CURL"

   CURL_RETURN="0"
   ## $CURL_PRGRS honors the $CURL and the $CURL_PRGRS_EXEC environment
   ## variables. (See above.)
   ## Define what CURL_PRGRS is supposed to eval.
   ## ($percent is a local variable provided by $CURL_PRGRS.)
   export CURL_PRGRS_EXEC="$output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx \"\$percent\""
   $CURL_PRGRS \
      --fail \
      $CURL_PROXY \
      --tlsv1 \
      --proto =https \
      --max-time 180 \
      --output "$home_folder/.tb/RecommendedTBBVersions" \
      "$LINK" \
      &

   LAST_CURL_PRGRS_PID="$!"
   wait "$LAST_CURL_PRGRS_PID" || { CURL_RETURN="$?" ; true; };
   LAST_CURL_PRGRS_PID=""

   ## Check if curl failed.
   if [ ! "$CURL_RETURN" = "0" ]; then
      MSG="Failed to download: $LINK

$DOWNLOAD_FAIL_HELP"

      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   ## Used by tbbversion.
   RecommendedTBBVersions="$home_folder/.tb/RecommendedTBBVersions"

   ## sets: tbb_recommended_versions_list
   ## sets: tbbversions_found
   ## sets: tbb_recommended_versions_error
   tbbversion

   ## Used by tbbversion_installed
   tbb_folder="$home_folder/tor-browser_$TB_LANG"

   ## sets: tbb_locally_installed_version
   tbbversion_installed

   if [ -d "$home_folder/tor-browser_$TB_LANG" ]; then
      local installed_or_not_result="1"
      local installed_or_not_text=""
   else
      local installed_or_not_result="0"
      local installed_or_not_text="Tor Browser is currently not installed.
(Folder $home_folder/tor-browser_$TB_LANG does not exist.)"
   fi

   if [ "$tbb_recommended_versions_list" = "UNKNOWN" ]; then
      local MSG="$installed_or_not_text

Could not find out latest Tor Browser version! $tbb_recommended_versions_error

$DOWNLOAD_FAIL_HELP"

      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   sleep 1 &
   wait "$!"

   local up_to_date
   up_to_date="0"
   local tbb_version

   for tbb_version in $tbb_recommended_versions_list; do
      if [ "$tbb_version" = "$tbb_locally_installed_version" ]; then
         up_to_date="1"
         break
      fi
   done

   local MSG

   if [ "$up_to_date" = "1" ]; then
         MSG="\
$SCRIPTNAME Update Check (Whonix)
----------------------------------------------------------------------
Currently installed version: $tbb_locally_installed_version
Online detected version(s) : $tbb_recommended_versions_list

Looks like Tor Browser is already up to date.

Please close Tor Browser if you want to (re-)install!

If your currently installed version is:
   higher: you are likely victim of a downgrade attack, SAY NO NOW!
   equal : only proceed, if you want to create a new browser profile.
   lower : you should upgrade.

YOUR BROWSER WILL BE KILLED.
YOUR WHOLE BROWSER PROFILE INCLUDING BOOKMARKS AND PASSWORDS WILL GET REPLACED!

A backup of your old Tor Browser and settings will be created in your home folder.
It is a good idea to delete old TBB backups once in a while if you are running low with disk space.

Upgrade now?\
"
   else
      if [ "$installed_or_not_result" = "0" ]; then
         MSG="\
$SCRIPTNAME Update Check (Whonix)
----------------------------------------------------------------------
Currently installed version: $tbb_locally_installed_version
Online detected version(s) : $tbb_recommended_versions_list

Install now?"
      else
         MSG="\
$SCRIPTNAME Update Check (Whonix)
----------------------------------------------------------------------
Currently installed version: $tbb_locally_installed_version
Online detected version(s) : $tbb_recommended_versions_list

Looks like there is an upgrade for Tor Browser.

Please close Tor Browser if you want to upgrade!

If your currently installed version is:
   higher: you are likely victim of a downgrade attack, SAY NO NOW!
   equal : only proceed, if you want to create a new browser profile.
   lower : you should upgrade.

YOUR BROWSER WILL BE KILLED.
YOUR WHOLE BROWSER PROFILE INCLUDING BOOKMARKS AND PASSWORDS WILL GET REPLACED!

A backup of your old Tor Browser and settings will be created in your home folder.
It is a good idea to delete old TBB backups once in a while if you are running low with disk space.

Upgrade now?\
"
      fi
   fi

   local answer
   answer="0"

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      zenity --title="$TITLE" --question --text "$MSG" || { answer="$?" ; true; };

      ## zenity return codes
      ## no 1
      ## yes 0

      #debug "answer: $answer"

      if [ "$TB_FORCE_INSTALL" = "1" ]; then
         debug "INFO: TB_FORCE_INSTALL = 1"
         true
      else
         if [ "$answer" = "1" ]; then
            debug "INFO: Canceled. Exit."
            exit 0
         fi
      fi
   fi

   if [ ! "$NOKILLTB" = "1" ]; then
      killall firefox || true
   fi

   rm --recursive --force "$home_folder/.tb/gpgtmpdir/"
   mkdir --parents "$home_folder/.tb/gpgtmpdir/"
   chmod --recursive 700 "$home_folder/.tb/gpgtmpdir/"

   local key

   for key in "/usr/share/whonix/keys/tbb-keys.d/"*; do
      local key_filename
      key_filename="$(basename "$key")"
      if [ "$key_filename" = "placeholder" ]; then
         continue
      fi
      if [ "$key_filename" = "*" ]; then
         ## Folder is empty.
         continue
      fi
      gpg --homedir "$home_folder/.tb/gpgtmpdir/" --import "$key"
   done
}



tb_download() {
   trap "tb_error_handler" ERR

   tb_download_ok="0"

   ## Initialize variable, if non-existing.
   if [ "$attempt" = "" ]; then
      attempt="0"
   fi

   attempt="$(expr "$attempt" + "1")"

   last_try="0"
   if [ "$attempt" -ge "$tbbversions_found" ]; then
      last_try="1"
   fi

   ## {{ Download from the torproject.org hidden service, instead over clearnet,
   ##   thus not involving any Tor exist nodes.
   ##   $WHONIX is an environment variable only set in Whonix.

   if [ "$WHONIX" = "1" ]; then
      TBB_REMOTE_FOLDER="http://j6im4v42ur6dpic3.onion/tor-package-archive/torbrowser"
      CURL_FORCE_SSL=""
   else
      ## Should only be the case when building Whonix from source while not being inside Whonix.
      TBB_REMOTE_FOLDER="https://archive.torproject.org/tor-package-archive/torbrowser"
      CURL_FORCE_SSL="--tlsv1 --proto =https"
   fi

   if [ "$TB_CLEARNET" = "1" ]; then
      ## In case the --clearnet option was used.
      TBB_REMOTE_FOLDER="https://archive.torproject.org/tor-package-archive/torbrowser"
      CURL_FORCE_SSL="--tlsv1 --proto =https"
   fi

   ## }}

   ## {{ progress bar for download

   ## sets: progressbaridx
   get_new_progressbaridx

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      NOTIFY_MSG="$SCRIPTNAME Update Check (Whonix)
----------------------------------------------------------------------
Downloading Tor Browser signature... Will take a moment..."

      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --typex "info" --titlex "$TITLE" --message "$NOTIFY_MSG" --parentpid "$$" --done
      sleep 1 &
      wait "$!"
   fi

   ## }}

   debug "INFO: Downloading GPG signature... Will take a moment..."

   ## Example signature link:
   ## https://archive.torproject.org/tor-package-archive/torbrowser/3.0rc1/tor-browser-linux32-3.0-rc-1_en-US.tar.xz.asc
   TBB_SIG_FILENAME="tor-browser-${ARCH_NEW}-${tbb_version}_${TB_LANG}.tar.xz.asc"
   TBB_EXTRA_FOLDER="${tbb_version_folder}/"

   TBB_SIG_LINK="${TBB_REMOTE_FOLDER}/${TBB_EXTRA_FOLDER}${TBB_SIG_FILENAME}"

   debug "INFO: Downloading: $TBB_SIG_LINK ... Will take a moment..."

   #debug "$0 CURL_PRGRS_EXEC: $CURL_PRGRS_EXEC"
   #debug "$0 CURL: $CURL"

   CURL_RETURN="0"
   ## $CURL_PRGRS honors the $CURL and the $CURL_PRGRS_EXEC environment
   ## variables. (See above.)
   ## Define what CURL_PRGRS is supposed to eval.
   ## ($percent is a local variable provided by $CURL_PRGRS.)
   export CURL_PRGRS_EXEC="$output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx \"\$percent\""
   $CURL_PRGRS \
      --fail \
      $CURL_PROXY \
      $CURL_FORCE_SSL \
      --max-time 180 \
      --output "$home_folder/.tb/$TBB_SIG_FILENAME" \
      "$TBB_SIG_LINK" \
      &

   LAST_CURL_PRGRS_PID="$!"
   wait "$LAST_CURL_PRGRS_PID" || { CURL_RETURN="$?" ; true; };
   LAST_CURL_PRGRS_PID=""

   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   sleep 1
   wait "$!"

   ## Check if curl failed.
   if [ ! "$CURL_RETURN" = "0" ]; then
      if [ "$last_try" = "0" ]; then
         MSG="Failed to download: $TBB_SIG_LINK
There are other recommended versions. Will try to download the next recommended version..."

         ## No popup message in X. Would be too confusing.
         #$output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG" --done

         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG" --done

         ## return 0, so the loop will tell us to try the next $tbb_version.
         return 0
      else
         MSG="Failed to download: $TBB_SIG_LINK

$DOWNLOAD_FAIL_HELP"

         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
         exit 1
      fi
   fi

   NOTIFY_MSG="$SCRIPTNAME Update Check (Whonix)
----------------------------------------------------------------------
Downloading Tor Browser... Will take a while..."

   ## sets: progressbaridx
   get_new_progressbaridx

   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --typex "info" --titlex "$TITLE" --message "$NOTIFY_MSG" --parentpid "$$" --done
   sleep 1 &
   wait "$!"

   debug "INFO: Downloading Tor Browser Bundle: $tbb_version"

   ## Example package filename:
   ## https://archive.torproject.org/tor-package-archive/torbrowser/3.0rc1/tor-browser-linux32-3.0-rc-1_en-US.tar.xz
   TBB_PACKAGE_FILENAME="tor-browser-${ARCH_NEW}-${tbb_version}_${TB_LANG}.tar.xz"
   TBB_EXTRA_FOLDER="${tbb_version_folder}/"

   TBB_PACKAGE_LINK="$TBB_REMOTE_FOLDER/${TBB_EXTRA_FOLDER}$TBB_PACKAGE_FILENAME"

   debug "INFO: Downloading: $TBB_PACKAGE_LINK"

   CURL_RETURN="0"

   #debug "$0 CURL_PRGRS_EXEC: $CURL_PRGRS_EXEC"
   #debug "$0 CURL: $CURL"

   ## $CURL_PRGRS honors the $CURL and the $CURL_PRGRS_EXEC environment
   ## variables. (See above.)
   ## Define what CURL_PRGRS is supposed to eval.
   ## ($percent is a local variable provided by $CURL_PRGRS.)
   export CURL_PRGRS_EXEC="$output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx \"\$percent\""
   $CURL_PRGRS \
      --fail \
      $CURL_PROXY \
      $CURL_FORCE_SSL \
      --output "$home_folder/.tb/$TBB_PACKAGE_FILENAME" \
      "$TBB_PACKAGE_LINK" \
      &

   LAST_CURL_PRGRS_PID="$!"
   wait "$LAST_CURL_PRGRS_PID" || { CURL_RETURN="$?" ; true; };
   LAST_CURL_PRGRS_PID=""

   ## Check if curl failed.
   if [ ! "$CURL_RETURN" = "0" ]; then
      MSG="Failed to download: $TBB_PACKAGE_LINK

$DOWNLOAD_FAIL_HELP"

      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"

      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   tb_download_ok="1"
}

tb_verify() {
   trap "tb_error_handler" ERR

   debug "INFO:
## Verifying GPG signature.
## Not using the user's GPG keyring also ensures, that the key can be only
## signed by the GPG keys we added. Signatures from random people from the
## user's keyring will be ignored.
"

   TB_GPG_VERIFY_RETURN="0"
   gpg \
      --homedir "$home_folder/.tb/gpgtmpdir/" \
      --verify "$home_folder/.tb/$TBB_SIG_FILENAME" \
      "$home_folder/.tb/$TBB_PACKAGE_FILENAME" \
      || { TB_GPG_VERIFY_RETURN="$?" ; true; };

   if [ ! "$TB_GPG_VERIFY_RETURN" = "0" ]; then
      local MSG="\
GPG download signature could NOT be verified.
Tor Browser update failed! Try again later.\
"
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"

      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi
}



tb_extract() {
   trap "tb_error_handler" ERR

   tar xfv "$home_folder/.tb/$TBB_PACKAGE_FILENAME" -C "$home_folder/.tb/"

   ## The tor-browser_"$TB_LANG"/Docs folder should already exist.
   ## Just to make sure the script will not break in case the get changed by upstream.
   mkdir --parents "$home_folder/.tb/tor-browser_$TB_LANG/Docs"

   ## Tor Browser changelog has been forgotten to update.
   ## https://sourceforge.net/p/whonix/discussion/general/thread/6122990d/
   ## To play it safe and having a chance of finding out the installed version,
   ## we create a file ourselves to remember it.
   debug "INFO: Creating version file tor-browser_$TB_LANG/Docs/version."
   echo "$tbb_version" > "$home_folder/.tb/tor-browser_$TB_LANG/Docs/version"

   if [ -d "$home_folder/tor-browser_$TB_LANG" ]; then
      debug "INFO: Moving old folder $home_folder/tor-browser_$TB_LANG..."
      mv "$home_folder/tor-browser_$TB_LANG" "$home_folder/tor-browser_$TB_LANG.old.$(date '+%F-%H:%M:%S')"
   fi

   debug "INFO: Moving temporary folder $home_folder/.tb/tor-browser_$TB_LANG to $home_folder/tor-browser_$TB_LANG."
   mv "$home_folder/.tb/tor-browser_$TB_LANG" "$home_folder/tor-browser_$TB_LANG"

   local TEMP
   TEMP="$home_folder/tor-browser_$TB_LANG/"
   MSG="Finished installing Tor Browser. Can be found in $TEMP."

   $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG" --done
}



tb_start_new_tab() {
   trap "tb_error_handler" ERR

   if [ ! -d "$home_folder/tor-browser_$TB_LANG" ]; then
      MSG="Tor Browser is not installed?
The folder $home_folder/tor-browser_$TB_LANG/ does not exist.

Please run: Start Menu -> Applications -> System -> Tor Browser Updater
            or in Terminal: $SCRIPTNAME --update"

      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   debug "INFO: Starting Tor Browser..."

   if [ "$LINK" = "" ]; then
      LINK="about:blank"
   else
      debug "INFO: Opening link..."
   fi

   cd "$home_folder/tor-browser_$TB_LANG/"
   "$home_folder/tor-browser_$TB_LANG/Browser/firefox" --profile Data/Browser/profile.default --new-tab "$LINK" &
}



tb_start_recommend() {
   trap "tb_error_handler" ERR

   root_check

   PID="$(pidof firefox)" || true

   if [ ! -e "$IMPORTANTBLOG_OFFLINE_FILE" ]; then
      LINK="$IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_LINK"
   else
      LINK="$IMPORTANTBLOG_OFFLINE_LINK"
   fi
   debug "INFO: Link set to $LINK"
   tb_start_new_tab

   if [ "$PID" = "" ]; then
      debug "INFO: Waiting 30 seconds for Tor Browser to start..."
      ## Unfortunately, we must hard code the time to wait before
      ## we try open extra tabs. Just waiting for the pid to exists
      ## does not do the trick. We are not aware of a way to ask Firefox,
      ## if it is only partially or fully load. When trying to open
      ## a new tab before it is fully load, a popup "profile not found"
      ## will be shown, which is confusing.
      sleep 30 &
      wait "$!"
   fi

   if [ ! -e "$FEATUREBLOG_OFFLINE_FILE" ]; then
      LINK="$FEATUREBLOG_NOT_AVAILABLE_OFFLINE_LINK"
   else
      LINK="$FEATUREBLOG_OFFLINE_LINK"
   fi
   debug "INFO: Link set to $LINK"
   tb_start_new_tab

   exit 0
}



tb_new_window() {
   trap "tb_error_handler" ERR

   cd "$home_folder/tor-browser_$TB_LANG"
   "$home_folder/tor-browser_$TB_LANG/Browser/firefox" --profile Data/Browser/profile.default --new-window "$LINK" &
}


tb_sanity_tests
parse_cmd_options ${1+"$@"}
tb_preparation

if [ ! -d "$home_folder/tor-browser_$TB_LANG" ]; then
   TB_UPDATE="1"
fi

if [ "$TB_UPDATE" = "1" ]; then
   root_check
   tb_connectivity_checks
   tb_update_check

   ## For testing:
   #tbb_recommended_versions_list="2.3.25-16 2.3.25-15"

   for tbb_version in $tbb_recommended_versions_list; do
      ## For testing.
      #tbb_version="3.0-rc-1"
      #tbb_version_folder="3.0rc1"

      ## Let's hope version number of the download folder exactly equals
      ## version number of TBB for the TBB 3.x final release. (No extra dashes
      ## or something like that.)
      tbb_version_folder="$tbb_version"

      tbb_version_first_char="${tbb_version:0:1}"
      if [ "$tb_download_ok" = "1" ]; then
         ## Download already succeeded.
         break
      fi
      tb_download
   done

   tb_verify
   tb_extract
elif [ "$tb_recommended_start" = "1" ]; then
   tb_start_recommend
elif [ "$open_new_window" = "1" ]; then
   tb_new_window
elif [ "$open_new_window" = "0" ]; then
   tb_start_new_tab
elif [[ ! "$@" = "" ]]; then
   true "$0 \$@: $@"
   /usr/lib/whonix/confirm_open $@
else
   true "$0 Else!?!"
fi

## End of Whonix /usr/bin/torbrowser
