#!/bin/bash
# Needs to be bash because we use "trap ERR".
# Will be copied into whonix_workstation: /usr/local/bin/whonix_workstation
# by whonix_image copyinto. Will run inside VM.

# See LICENSE in root of Whonix source for copyright, license and authors.

script_help() {
echo \
"
# -install
"
}

############################################################################
# SCRIPT STARTS HERE
############################################################################

set -x

######################################################
# Variables
######################################################
# Set the linux username.
# "export USERNAME=$(whoami)" will not work, since the
# script gets, in most cases, started as root.
USERNAME="user"

# Unattended (un)installation of packages.
# Thanks to http://snowulf.com/2008/12/04/truly-non-interactive-unattended-apt-get-install/
export DEBIAN_FRONTEND=noninteractive



error_handler() {
echo "
##################################################
# whonix_workstation script: ERROR detected.
##################################################
"
exit 1
}



root_check() {
  if [ "$(id -u)" != "0" ]; then
       echo "ERROR: This must be run as root (sudo)!"
       exit 1
  else
       echo "INFO: Script running as root."
  fi
}



workstation_source() {
trap "error_handler" ERR INT TERM

source /usr/local/share/whonix/whonix_internal_checks
source /usr/local/share/whonix/whonix_create_swap_file
source /usr/local/share/whonix/whonix_config_uuids
source /usr/local/share/whonix/whonix_kde
source /usr/local/share/whonix/whonix_chroot_shared
}



adduser_user() {
   trap "error_handler" ERR INT TERM

   echo "Creating user user..."
   # setting password of user user to changeme
   #
   # How this password was created:
   # sudo apt-get install whois
   # mkpasswd
   # changeme
   # Resulted in: aTayYxVyw5kDo
   #
   # True in case script gets run again. (Debugging.)
   useradd --password aTayYxVyw5kDo --user-group --create-home --home-dir /home/user --shell /bin/bash user || true
   usermod --append --groups adm,cdrom,audio,dip,sudo,plugdev user || true
   chown --recursive user:user /home/user
}



add_crontab_for_user() {
   trap "error_handler" ERR INT TERM

   sudo -u user crontab -l || true
   sudo -u user crontab /usr/local/share/whonix/user_crontab
   sudo -u user crontab -l
}



config_audio() {
trap "error_handler" ERR INT TERM

echo "
######################################################
# Set up audio
######################################################
"

usermod -a -G audio "$USERNAME"
sudo -u "$USERNAME" amixer
sudo -u "$USERNAME" amixer set Master 70 unmute
sudo -u "$USERNAME" amixer set PCM 70 unmute
}



config_gpg() {
trap "error_handler" ERR INT TERM
# Run gpg at least once to create the GPG default files
# gpg.conf, pubring.gpg and trustdb.gpg.
# The --fingerprint option will do nothing and has been
# added to let GPG terminate itself after creating the
# configuration files. GPG run with no options would
# result in GPG running interactively.
# old: sudo -u $USERNAME gpg --fingerprint --homedir /home/"$USERNAME"/.gnupg
# new:
sudo -u "$USERNAME" gpg --fingerprint
}



config_htp() {
   trap "error_handler" ERR INT TERM

   echo "Creating the htp user..."
   adduser --system --quiet --group --no-create-home htp || :
   echo "Adding htpdate init script..."
   update-rc.d htpdate defaults
}



config_wpolipo() {
   trap "error_handler" ERR INT TERM

   echo "Adding wpolipo init script..."
   update-rc.d wpolipo defaults
}



config_misc() {
   trap "error_handler" ERR INT TERM

   ## knetattach is part of the kdebase-runtime debian package
   ## I am not aware of any reviews of this application with
   ## respekt to Tor. The start menu entry gets deleted.

   rm /usr/share/applications/kde4/knetattach.desktop || true
}


config_irc_xchat() {
   trap "error_handler" ERR INT TERM

   /usr/local/bin/xchat-reset
}



config_symlinks() {
   trap "error_handler" ERR INT TERM

   # /etc/dpkg/origins/default
   # || true to support re-running the script
   ln -s /etc/dpkg/origins/whonix /etc/dpkg/origins/default || true

      #################
      # Desktop Icons #
      #################

   mkdir -p /home/user/Desktop/

   # Adding konsole icon on Desktop.
   ln -s /usr/share/applications/kde4/konsole.desktop /home/user/Desktop/ || true

   # Adding kgpg icon on Desktop.
   ln -s /usr/share/applications/kde4/kgpg.desktop /home/user/Desktop/ || true

   # Adding synaptic icon on Desktop.
   ln -s /usr/share/applications/synaptic-kde.desktop /home/user/Desktop/ || true

   # Adding Apper icon on Desktop.
   ln -s /usr/share/applications/kde4/apper.desktop /home/user/Desktop/ || true

   # Adding xchat icon on Desktop.
   # Symlink xchat starter to Desktop.
   # TODO: override with true in case xchat gets removed from package selection.
   ln -s /usr/share/applications/xchat.desktop /home/user/Desktop/ || true

   # symlink .desktop files to Desktop folder
   ln -s /usr/local/share/whonix/kde/share/applications/* /home/user/Desktop || true

   chmod --recursive +x /home/user/Desktop/*

   chown --recursive user:user /home/user/
}



dummytor() {
   trap "error_handler" ERR INT TERM

   cd /usr/local/share/whonix/dummytor/
   equivs-build tor

   dpkg -i tor_1.0_all.deb

   echo "tor hold" | dpkg --set-selections
}



######################################################
# -install
######################################################
if [[ "$1" = "-install" ]]; then
   root_check                ## Depends on nothing.

   workstation_source        ## Depends on nothing.
   whonix_internal_checks    ## Depends on nothing.
   whonix_create_swap_file   ## Depends on root_check, not being run again when in use.
   whonix_config_uuids_fstab ## Depends on root_check, not being run again after adding new hdds.
   adduser_user              ## Depends on root_check.
   add_crontab_for_user      ## Depends on nothing.

   ## Building in the clear and behind a transparent Tor proxy is supported.
   ## In case we are not behind a Whonix-Gateway with dedicated ports for
   ## Tor Browser download, use TransPort or clear download instead of SocksPort.
   sudo -u user /usr/local/bin/torbrowser -dev-build-passthrough ## Depends on working internet connection.

   config_irc_xchat          ## Depends on root_check.
   config_symlinks           ## Depends on root_check.
   config_audio              ## Depends on root_check.
   config_gpg                ## Depends on nothing.
   config_htp                ## Depends on root_check.
   config_wpolipo            ## Depends on root_check.
   config_misc	             ## Depends on root_check.
   whonix_kde                ## Depends on nothing.
   dummytor                  ## Depends on root_check.

   whonix_chroot_misc        ## Depends on root_check. (/usr/local/share/whonix/whonix_chroot_shared)
   whonix_bannned_packages   ## Depends on root_check. (/usr/local/share/whonix/whonix_chroot_shared)
   whonix_slim_down          ## Depends on root_check, being last function. (/usr/local/share/whonix/whonix_chroot_shared)

   sync                      ## Ensure changes get written to disk.

   echo "Script completed, this indicates neither success nor failure." >&2
   exit 0

fi



################################################################ 
# -help                                                        #
################################################################ 
if [[ "$1" = "-help" ]]; then
script_help
exit 0
fi



################################################################ 
# no option chosen                                             # 
################################################################ 
if [[ "$1" = "" ]]; then 
echo "
INFO: No option chosen.

Please run whonix_workstation -help to find out more.
"

exit 0
fi