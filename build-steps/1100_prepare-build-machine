#!/bin/bash

set -x

true "Currently running script: $0"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source variables
source pre

prepare-build-machine() {
   trap "error_handler_general" ERR INT TERM

   ## If whonix_build is run with -fast switch.
   if [ "$FAST" = "1" ]; then
      echo "prepare-build-machine: run with -fast switch. Skipping prepare-build-machine step."
      exit 0
   fi

   ## Check if user "$USERNAME" already exist.
   ret="0"
   id "$USERNAME" || { ret="$?" ; true; };
   if [ ! "$ret" = 0 ]; then
      true 'INFO: Creating user "$USERNAME" with password "changeme", because some things have to be run as "$USERNAME".'
      ## setting password of user "user" to changeme
      ##
      ## How this password was created:
      ## sudo apt-get install whois
      ## mkpasswd
      ## changeme
      ## Resulted in: aTayYxVyw5kDo
      useradd --password aTayYxVyw5kDo --user-group --create-home --shell /bin/bash "$USERNAME"
   else
      true 'INFO: Not creating user "$USERNAME" with password "changeme", because it already exists.'
   fi
   
   ## Add user to sudo group.
   addgroup "$USERNAME" sudo   

   ## Fix permissions, just in case.
   ## Not sure its still useful for anything.
   #chown --recursive "$USERNAME":"$USERNAME" /home/"$USERNAME"   

   ## Always keep old configuration file. Do not prompt to install new config files.
   echo '
      Dpkg::Options {
         "--force-confold";
      }
   ' > /etc/apt/apt.conf.d/90whonix-build-confold
   
   ## Using an apt cache to speed up downloading
   ## If you want to build multiple times (for debugging etc.),
   ## it makes sense to install a local apt proxy on your build machine.
   ## That safes download time and traffic.
   ##
   ## Minor: If you build Whonix on Whonix, apt-cacher-ng will go through Tor's TransPort.
   ##
   ## Thanks to source:
   ##    https://linuxexpresso.wordpress.com/2011/02/13/howto-apt-cacher-ng-on-ubuntu/
   ## It would be possible to download without an apt-cacher...
   ## But why? If you do not want to use it, comment out the following line and
   ## change the mirror settings in grml configuration file.
   
   ## Update package lists and install apt-cacher-ng.
   apt-get update 
   apt-get install --yes apt-cacher-ng

   ## Restart apt-cacher-ng.
   ## Should not be required, but it was for me.
   service apt-cacher-ng restart

   ## Enable apt-cacher-ng proxy.
   export http_proxy="http://127.0.0.1:3142"

   ## Update package lists and upgrade.
   apt-get update
   apt-get --yes dist-upgrade

   ## Install build dependencies.
   apt-get install --yes debhelper virtualbox qemu grml-debootstrap parted kpartx debootstrap mksh dialog git sudo rsync diffutils gdebi ruby-ronn

   ## gdebi is only a build dependency for bare metal builds
   ## so build dependencies could differ for VM and for bare metal builds

   ##Should there ever be a problem with apt-cacher-ng (package verification failure) (rare cases), use this.
   #sudo apt-get update
   #sudo apt-get autoremove
   #sudo apt-get dist-upgrade
   #sudo apt-get clean
   #sudo apt-get autoclean
   
   ## Disable apt-cacher-ng proxy.
   export unset http_proxy
} 

prepare-build-machine

