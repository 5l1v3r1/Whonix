#!/bin/bash

set -x

true "Currently running script: $0"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source variables

cd "$MYDIR"
cd ..

create-debian-packages() {
   trap "error_handler_general" ERR INT TERM

   cd "$MYDIR"
   cd ..

   true "${cyan}$0 INFO: Cleaning old packages... ${reset}"

   sudo -u "$USERNAME" make clean

   true "${cyan}$0 INFO: Cleaned old packages. ${reset}"

   true "${cyan}$0 INFO: Automatically bumping version number in debian/changelog... ${reset}"
   ## bump changelog version numbers
   ## whonxi is written in lower case,
   ## because thats the name of the file in /etc/dpkg/origins/ 
   debchange \
      --vendor "whonix" \
      --newversion "$WHONIX_BUILD_NEW_CHANGELOG_VERSION" \
      ""

   true "${cyan}$0 INFO: Bumped version number in debian/changelog. ${reset}"   
   
   true "${cyan}$0 INFO: Creating deb packages... ${reset}"
   ## We do not have to use signed packages here, since all actions are done locally,
   ## i.e. package creation, copying packages into the image and installing the images
   ## never touches insecure networks.
   ## Using signed packages for this build step would not buy any security and make
   ## the build process for people who create their own builds unnecessarily more complicated.
   sudo -u "$USERNAME" make unsignedpackage
   
   true "${cyan}$0 INFO: Created deb packages. ${reset}"

   ## We need to create a local signing key for signing our local APT repository. Otherwise,
   ## apt-get would complain, that the package can not be verified. In theory, signing is not
   ## required, because the local APT repository never touches any networks. However, ignoring
   ## this warning while installing the meta package, which pull the other packages, could
   ## make apt-get ignore if those packages can not be verified either. Shipping an already
   ## created gpg snake oil (because known to the public) secret key is no option either,
   ## because anyone could get this key, which also needs to be added to apt-key. In that case,
   ## anyone could sign packages with this snake oil key. Therefore we play it safe and
   ## create a local signing key on the build machine.
   
   ## Check, if we previously already created a local OpenPGP signing key.
   if [ ! -f "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"/done ]; then
      true "${cyan}$0 INFO: We do not yet have a local OpenPGP signing key for our local APT repository. Creating one... ${reset}"
   
      sudo -u "$USERNAME" mkdir --parents "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"
   
      ## chmod 700, so gpg will not complain about folder permissions
      sudo -u "$USERNAME" chmod 700 "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"   

      ## http://www.gnupg.org/documentation/manuals/gnupg-devel/Unattended-GPG-key-generation.html
      
      echo "
         Key-Type: RSA
         Key-Length: 4096
         Subkey-Type: RSA
         Subkey-Length: 4096
         Name-Real: Whonix auto generated local APT signing key
         Expire-Date: 0
      " | sudo -u "$USERNAME" gpg --no-default-keyring --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" --batch --gen-key
      
      sudo -u "$USERNAME" touch "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"/done
      
      true "${cyan}$0 INFO: Created local OpenPGP signing key for our local APT repository. ${reset}"
   else
      true "${cyan}$0 INFO: We already have a local OpenPGP signing key for our local APT repository. ${reset}"
   fi
   
   ## Just output list of secret keys in that very folder in case that ever breaks and someone ever sends
   ## a build log, this will help with debugging.
   sudo -u "$USERNAME" gpg --no-default-keyring --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" --list-secret-keys  
   
   true "${cyan}$0 INFO: Purging local APT repository... ${reset}"
   
   sudo -u "$USERNAME" \
      reprepro \
         --gnupghome "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
         --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
         removematched local "*"
         
   true "${cyan}$0 INFO: Done, purged local APT repository. ${reset}"
   
   true "${cyan}$0 INFO: Creating local APT repository... ${reset}"
   
   sudo -u "$USERNAME" \
      reprepro \
         --gnupghome "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
         --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
         includedeb local ../*.deb
   
   true "${cyan}$0 INFO: Done, created local APT repository. ${reset}"
} 

true "${bold}INFO: Currently running script: $0 ${reset}"
create-debian-packages

