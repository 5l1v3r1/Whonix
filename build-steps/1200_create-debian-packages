#!/bin/bash

set -x

true "Currently running script: $0"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

WHONIX_BUILD_PARSED="1"
ROOT_CHECK="0"
VMNAME="internalrun"

source pre
source variables

cd "$MYDIR"
cd ..

create-debian-packages() {
   trap "error_handler_general" ERR INT TERM

   cd "$MYDIR"
   cd ..

   true "${cyan}$0 INFO: Cleaning old packages... ${reset}"

   sudo -E -u "$USERNAME" make clean

   true "${cyan}$0 INFO: Cleaned old packages. ${reset}"

   true "${cyan}$0 INFO: Automatically bumping version number in debian/changelog... ${reset}"
   
   ## bump changelog version numbers
   ## whonix is written in lower case,
   ## because thats the name of the file in /etc/dpkg/origins/ 
   sudo -E -u "$USERNAME" \
      debchange \
         --vendor "whonix" \
         --distribution "$WHONIX_BUILD_APT_CODENAME" \
         --newversion "$WHONIX_BUILD_NEW_CHANGELOG_VERSION" \
         "local auto bump version"

   true "${cyan}$0 INFO: Bumped version number in debian/changelog. ${reset}"

   ## We need to create a local signing key for signing our local APT repository. Otherwise,
   ## apt-get would complain, that the package can not be verified. In theory, signing is not
   ## required, because the local APT repository never touches any networks. However, ignoring
   ## this warning while installing the meta package, which pull the other packages, could
   ## make apt-get ignore if those packages can not be verified either. Shipping an already
   ## created gpg snake oil (because known to the public) secret key is no option either,
   ## because anyone could get this key, which also needs to be added to apt-key. In that case,
   ## anyone could sign packages with this snake oil key. Therefore we play it safe and
   ## create a local signing key on the build machine.
   
   ## We only automatically create am auto local signing key, in case the builder did not
   ## provide a custom folder for WHONIX_LOCAL_SIGNING_KEY_FOLDER. This is determined in
   ## help-steps/variables.
   if [ "$WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY" = "1" ]; then
      true "${cyan}$0 INFO: Using auto local signing key method... ${reset}"
   
      ## Check, if we previously already created a local OpenPGP signing key.
      if [ ! -f "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"/done ]; then
         true "${cyan}$0 INFO: We do not yet have a local OpenPGP signing key for our local APT repository. Creating one... ${reset}"
   
         sudo -E -u "$USERNAME" mkdir --parents "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"
   
         ## chmod 700, so gpg will not complain about folder permissions
         sudo -E -u "$USERNAME" chmod 700 "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"   

         ## http://www.gnupg.org/documentation/manuals/gnupg-devel/Unattended-GPG-key-generation.html
      
         echo "
            Key-Type: RSA
            Key-Length: 4096
            Subkey-Type: RSA
            Subkey-Length: 4096
            Name-Real: Whonix auto generated local APT signing key
            Name-Email: whonix@local-signing.key
            Expire-Date: 0
         " | sudo -E -u "$USERNAME" gpg \
                                    --no-default-keyring \
                                    --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
                                    --batch \
                                    --gen-key
      
         sudo -E -u "$USERNAME" touch "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"/done
      
         true "${cyan}$0 INFO: Created local OpenPGP signing key for our local APT repository. ${reset}"
      else
         true "${cyan}$0 INFO: We already have a local OpenPGP signing key for our local APT repository. ${reset}"
      fi
   else
      true "${cyan}$0 INFO: Using custom signing key method... ${reset}"
   fi
   
   ## Just output list of secret keys in that very folder in case that ever breaks and someone ever sends
   ## a build log, this will help with debugging.
   sudo -E -u "$USERNAME" gpg \
                          --no-default-keyring \
                          --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
                          --keyid-format "0xlong" \
                          --fingerprint \
                          --list-secret-keys
   
   true "${cyan}$0 INFO: Creating deb packages... ${reset}"
   
   sudo -E -u user "$WHONIX_SOURCE_FOLDER"/help-steps/make-tarball
   
   #sudo -E -u user \
      #debuild -p"gpg --no-default-keyring --homedir $WHONIX_LOCAL_SIGNING_KEY_FOLDER --default-key $DEBEMAIL"
      
   sudo -E -u user \
      debuild \
         -p"gpg \
            --no-default-keyring \
            --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
            --default-key "$DEBEMAIL"
            " \
         -sa
   
   true "${cyan}$0 INFO: Created deb packages. ${reset}"
   
   true "${cyan}$0 INFO: Purging local APT repository... ${reset}"
   
   sudo -E -u "$USERNAME" \
      reprepro \
         -V \
         $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
         removematched "$WHONIX_BUILD_APT_CODENAME" "*"
         
   true "${cyan}$0 INFO: Done, purged "$WHONIX_BUILD_APT_CODENAME" APT repository. ${reset}"
   
   true "${cyan}$0 INFO: Creating "$WHONIX_BUILD_APT_CODENAME" APT repository... ${reset}"
   true "${cyan}$0 INFO: Importing .dsc file... ${reset}"
         
   sudo -E -u "$USERNAME" \
      reprepro \
         -V \
         $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
         includedsc "$WHONIX_BUILD_APT_CODENAME" ../*.dsc
         
   true "${cyan}$0 INFO: Done, imported .dsc file. ${reset}"

   true "${cyan}$0 INFO: Importing .changes file... ${reset}"
         
   sudo -E -u "$USERNAME" \
      reprepro \
         -V \
         $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
         include "$WHONIX_BUILD_APT_CODENAME" ../*.changes
         
   true "${cyan}$0 INFO: Done, imported .changes file. ${reset}"

## Old method. We do not need to import .deb files for now.
#   sudo -E -u "$USERNAME" \
#      reprepro \
#         --gnupghome "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
#         --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
#         $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
#         includedeb "$WHONIX_BUILD_APT_CODENAME" ../*.deb         
   
   true "${cyan}$0 INFO: Done, created "$WHONIX_BUILD_APT_CODENAME" APT repository. ${reset}"
} 

true "${bold}INFO: Currently running script: $0 ${reset}"
create-debian-packages

