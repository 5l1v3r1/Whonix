#!/bin/bash
# Needs to be bash because we use "trap ERR".
# Will be copied into aos_workstation: /usr/local/bin/aos_workstation
# by aos_image copyinto. Will run inside VM.

# Version: aos 0.3.0-developers-only

# Copyright: adrelanos (aka proper)
#
# License: GPL v3 or any later
#
# Any changes you pull changes into this source will be also licensed
# under GPL v3 or any later. Additionally you grant adrelanos the right to
# re-license your work under a different license. If that is not acceptable,
# you can either fork this source under GPL v3 or any later or contact
# adrelanos. Contact adrelanos, if you require this source code under
# different license.

script_help() {
echo \
"
############################################################################
#       INFO                                                               #
#                                                                          #
# Read https://trac.torproject.org/projects/tor/wiki/doc/TorBOX/DISCLAIMER #
#                                                                          #
#       ASSUMPTIONS                                                        #
# 1) You use Ubuntu                                                        #
# 2) The main username is "user"                                           #
# (search for HARDCODED! and check the variable "USERNAME")                #
# 3) You are using following network settings:                             #
# Your primary (and only) network interface is eth0                        #
# aos-Workstation IP: 192.168.0.11                                         #
# aos-Gateway IP: 192.168.0.10                                             #
# 4) aos-Workstations build environment has a working internet             #
# connection to ubuntu mirrors                                             #
# 5) you read and understood the script and verified all hardcoded gpg     #
# fingerprints tagged with !!!VERIFY!!!                                    #
#                                                                          #
#       CHOOSE ONE OF THE FOLLOWING FLAGS                                  #
# Available options:                                                       #
# -install                                                                 #
#                                                                          #
############################################################################
# NOTE FOR DEBUGGING
# NOTE FOR CONTRIBUTORS
# Same comments as under
# https://trac.torproject.org/projects/tor/wiki/doc/TorBOX/Dev/TGScript
# apply.
# Search for TODO in the script and help us fix them.
"
}

############################################################################
# SCRIPT STARTS HERE
############################################################################

######################################################
# Variables
######################################################
# Set the linux username.
# "export USERNAME=$(whoami)" will not work, since the
# script gets, in most cases, started as root.
USERNAME="user"

# change to home dir so relative paths work correctly
cd /home/$USERNAME

# Unattended (un)installation of packages.
# Thanks to http://snowulf.com/2008/12/04/truly-non-interactive-unattended-apt-get-install/
export DEBIAN_FRONTEND=noninteractive



error_handler() {
echo "
##################################################
# aos_workstation script: ERROR detected.        #
##################################################
"
exit 1
}

trap "error_handler" ERR INT TERM



root_check() {
######################################################
# Checking script environment
######################################################
# Check if we are root
  if [ "$(id -u)" != "0" ]; then
       echo "ERROR: This must be run as root (sudo)!"
       exit 1
  else
       echo "INFO: Script running as root."
  fi
}



apt_get() {
echo "
######################################################
# Updating system, removing problematic software
######################################################
"

echo "INFO: Updating system..."
apt-get update && apt-get --yes dist-upgrade

echo "INFO: Removing problematic software..."
apt-get --yes remove --purge ntpdate popularity-contest resolvconf ufw network-manager network-manager-gnome 

# build-essential is required to patch_torsocks.
echo "INFO: Installing required software..."
apt-get --yes install --no-install-recommends nano wget gnupg ed torsocks mingetty build-essential dbus
}



base_desktop() {
echo "
######################################################
# Installing base desktop
######################################################
"

apt-get --yes install --no-install-recommends xserver-xorg xinit openbox obmenu pcmanfm evince \
libasound2 file-roller xchat gpicview gnome-mplayer tint2 unrar-free alsa alsa-utils \
mplayer leafpad gnome-terminal zenity

# We should install the following at some later point...
# - Thunderbird with TorBirdy, once added to deb repository.
# - Pidgin, once torproject.org solved the remaining issues.
# - Pidgin OTR
# - Pidgin TorChat https://github.com/prof7bit/TorChat
}



config_audio() {
echo "
######################################################
# Set up audio
######################################################
"

usermod -a -G audio $USERNAME
amixer set Master 70 unmute
amixer set PCM 70 unmute
}



config_home() {
# Fixing black on black for gnome-terminal.
# Thanks to: http://ubuntuforums.org/showthread.php?t=1513791
# Thanks to: https://gist.github.com/1397104
sudo -u $USERNAME gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_background" --type bool false
sudo -u $USERNAME gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_colors" --type bool false
sudo -u $USERNAME gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/foreground_color "#FFFFFFFFFFFF"

# Run gpg at least once to create the GPG default files
# gpg.conf, pubring.gpg and trustdb.gpg.
# The --fingerprint option will do nothing and has been
# added to let GPG terminate itself after creating the
# configuration files. GPG run with no options would
# result in GPG running interactively.
sudo -u $USERNAME gpg --fingerprint --homedir /home/"$USERNAME"/.gnupg
# gpg.conf gets appened by aos_image append post.
}



aos_slim_down() {
echo "
######################################################
Slim down the system.
######################################################
"
# Remove unnecessary packages to slim down the system.
# This list contains only packages, which waste space and are not required.
# Unsafe or problematic packages are being removed with apt_get().
apt-get --yes remove --purge xserver-xorg-video-all xserver-xorg-video-ati xserver-xorg-video-fbdev \
xserver-xorg-video-geode xserver-xorg-video-intel xserver-xorg-video-mach64 xserver-xorg-video-mga \
xserver-xorg-video-neomagic xserver-xorg-video-nouveau xserver-xorg-video-openchrome \
xserver-xorg-video-qxl xserver-xorg-video-r128  xserver-xorg-video-radeon xserver-xorg-video-s3 \
xserver-xorg-video-savage xserver-xorg-video-siliconmotion xserver-xorg-video-sis xserver-xorg-video-sisusb \
xserver-xorg-video-tdfx xserver-xorg-video-trident xserver-xorg-video-vmware fuse command-not-found* \
geoip-database sound-theme-freedesktop fuse-utils aptitude pciutils hdparm lshw ftp parted telnet \
mlocate ppp pppconfig pppoeconf bind9-host dosfstools strace mtr-tiny

echo "Cleaning up..."

# This assumes you rebooted after the last kernel update.
# Can not be used together with debootstrap!
apt-get --config-file /usr/share/aos/apt.conf --yes remove --purge $(dpkg -l|egrep '^ii  linux-(im|he)'|awk '{print $2}'|grep -v `uname -r`) || true

# Kill dhclient3 to prevent rewrite of /var/lib/dhcp/*.
killall dhclient3 || true
# There are .leases.
rm /var/lib/dhcp/*.leases || true
# And there are .lease.
rm /var/lib/dhcp/*.lease || true
# We are best of deleting the whole folder.
rm -r /var/lib/dhcp/* || true

# Cleanup.
apt-get --yes autoremove --purge || true
apt-get --yes clean || true

# Killing rsyslog so we can remove logs.
stop rsyslog || true

# Delete logs and other stuff.
rm -r /tmp/* || true
rm /var/log/installer/* || true
rm -r /var/cache/apt/* || true
rm -r /var/lib/apt/lists/* || true
rm -r /var/log/installer || true
rm /var/lib/dpkg/*-old || true
rm /var/cache/debconf/*-old || true
# Erase rotated logs (usually wont appear unless you left your VM running for several days).
rm /var/log/*.[0-9] || true
rm /var/log/*.[0-9].gz || true

# Truncate all log files, keeping user group and perms.
find /var/log -type f -exec cp /dev/null {} \;

# TODO
# Which are safe?
# rm /usr/share/icons/nuoveXT2/icon-theme.cache
# cd /usr/share/locale &&  ls | grep -v en | xargs rm -r && cd /home/$USERNAME
# rm -r /usr/share/doc/* #(are we even allowed to do that, see licenses?)

# Take care of development leaks and make resulting ova image smaller.
# Since VBox export works below the FS level it will keep deleted files (and the ova will stay large). 
# This also ensure that possible leaks we deleted before are really deleted.
echo "INFO: Wiping free space. This can take a while."
dd if=/dev/zero of=./zerofile bs=1024 || true

# Flush the zero-file to disk before removing it.
sync

# Delete the zero-file.
rm ./zerofile || true

# Flush again after rm.
sync

# Delete bash history.
rm /home/$USERNAME/.bash_history
history -c
}



######################################################
# -install
######################################################
if [[ "$1" = "-install" ]]; then
root_check                 # Depends on nothing.

. /usr/share/aos/aos_internal_checks
. /usr/share/aos/aos_create_swap_file
. /usr/share/aos/aos_config_uuids
. /usr/share/aos/aos_slim_down
. /usr/share/aos/patch_torsocks
. /usr/share/aos/import_tpo_archive_key

. /usr/local/bin/torbrowser

aos_internal_checks        # Depends on nothing.
aos_create_swap_file       # Depends on root_check, not being run again when in use.
aos_config_uuids_fstab     # Depends on root_check, not being run again after adding new hdds.
#import_tpo_archive_key    # Not yet required.
apt_get                    # Depends on root_check, working internet connection, UTC.
update-grub2               # /etc/grub/default gets appended by aos_image copyinto.
patch_torsocks             # Depends on root_check, working internet connection.
base_desktop               # Depends on root_check, working internet connection.
tb_force_install           # Depends on working internet connection.
config_audio               # Depends on base_desktop.
config_home                # Depends on being run only once.
aos_slim_down              # Depends on root_check, being last function.

echo "Script completed, this indicates neither success nor failure." >&2
exit 0
fi



################################################################ 
# -help                                                        #
################################################################ 
if [[ "$1" = "-help" ]]; then
script_help
exit 0
fi



################################################################ 
# no option chosen                                             # 
################################################################ 
if [[ "$1" = "" ]]; then 
echo "
INFO: No option chosen.

Please run aos_workstation -help to find out more.
"

exit 0
fi

###################################################################################################################

# TODO: Add this.
#
# Touching the default browser.startup.homepage is not a good idea, since TorButton sets the
# "up to date" or "not up to date" homepage.
#
#  we don't need that anymore, with torcheck implemented we can keep the readme as the homepage
#   (proper) When TorButton is updated and version format is changed, torcheck in tbb will still
#            continue to work.
#             in that case zenity should prompt the user to visit check.tpo. Not that the code below doesn't help in that case either.
#               (proper) When visiting check.torproject.org manually, Tor Browser will not notify about updates. Afaik this only happens
#                        on startup and the default homepage has not been touched and still is check.tpo.
#                        That code would help in that case. If Tor Button gets updated, everyone gets the Tor Button update and if the
#                        version format changes at the same time, Tor Buttons update notification will continue to work.
#               (proper) Now that torcheck uses TransPort instant of SocksPort (see torcheck script comments), leaving check.tpo in
#                        Tor Browser would also demonstrate, that stream isolation is functional.
#                           The Tor Button update check used to be broken and report false positives when being run behind a transparent proxy and probably socks port, we should test that again. If it's still broken that's a very good reason to keep the default home page changed.
#                               (proper) Test: I used my archived old tor-browser-gnu-linux-i686-2.2.35-12-dev-en-US.tar.gz,
#                                        used the fixed startup script and my revised user.js. Result: Update check works when using SocksPort 192.168.0.10 9100.
#                               (proper) The problem with the code below is also, it opens Tor Browser and the readme only once after boot.
#                                        But we should show the readme/news each time the users starts Tor Browser. We could let the script run permanently,
#                                        safe the Tor Browser pid in memory and each time there is a new pid open the readme.

#!/bin/bash
#if [ "$(pgrep firefox)" = "" ]; then
#   echo "Starting TorBrowser"
#   ~/tor-browser_en-US/start-tor-browser &
#else
#   echo "TBB is already running"
#fi
#
#while [ "$(xlsclients | grep firefox)" = "" ]
#do
#   sleep 3
#done
#
#echo "Opening aos Readme"
#~/tor-browser_en-US/App/Firefox/firefox --profile Data/profile -new-tab https://trac.torproject.org/projects/tor/wiki/doc/TorBOX/Readme
