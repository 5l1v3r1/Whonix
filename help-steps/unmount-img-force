#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x

error_handler_unmount-img-force() {
   : echo "
${red}${bold}BASH_COMMAND${reset}: $BASH_COMMAND
${red}${bold}ERROR $0: | caller: $(caller)${reset}
"
   exit 1
}

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$MYDIR"/pre

parse_cmd_options() {
   trap "error_handler_general" ERR INT TERM

   while :
   do
       case $1 in
           -h | --help | -\?)
               script_help
               exit 0
               ;;
           -tg | --tor-gateway | --torgateway)
               export WHONIX_BUILD_GATEWAY="1"
               shift
               ;;
           -tw | --tor-workstation | --torworkstation)
               export WHONIX_BUILD_WORKSTATION="1"
               shift
               ;;
           -bm | --baremetal | --bare-metal)
               export BARE_METAL="1"
               shift
               ;;
           --vbox | --virtualbox | --virtual-box)
               export WHONIX_BUILD_VIRTUALBOX="true"
               shift
               ;;
           --qcow2)
               export WHONIX_BUILD_QCOW2="true"
               shift
               ;;
           --)
               shift
               break
               ;;
           -*)
               true "${cyan}INFO: Option $1 ignored in this script. This is not necessarily a problem.${reset}"
               ;;
           *)
               break
               ;;
       esac
   done

   if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      true
   elif [ "$WHONIX_BUILD_QCOW2" = "true" ]; then
      true
   else
      true "${green}INFO: Skipping $0, because neither parameter --virtualbox nor --qcow2 is is set.${reset}"
      exit 0
   fi

   source "$MYDIR"/variables
}

unmount_img_force() {
   trap "error_handler_unmount-img-force" ERR INT TERM

   if [ "$mount_folder" = "" ]; then
      true
   else
      ## hack for help-steps/analyze-image
      CHROOT_FOLDER="$mount_folder"
   fi

   sync || true

   "$MYDIR"/unprevent-daemons-from-starting || true
   "$MYDIR"/unchroot-img || true

   ## Will be called if there is an error.
   ## || true to avoid more errors and to ensure
   ## clean unmount.

   sync || true

   ## Sleep to work around some obscure bug.
   ## http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=734794
   sleep 2 & || true
   wait "$!" || true
   sync || true

   umount "$CHROOT_FOLDER" || true
   sync || true

   ## Sleep to work around some obscure bug.
   ## http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=734794
   sleep 2 & || true
   wait "$!" || true
   sync  || true

   ## Debugging.
   losetup --all || true
   sync || true

   kpartx -d -s -v "$img" || true
   sync || true

   ## Debugging.
   losetup --all || true
   sync || true

   ## Delete temporary folder.
   ## It did not contain anything. It was only a mount point.
   rm -r "$CHROOT_FOLDER" || true
   sync || true
}

true "${bold}INFO: Currently running script: $0 ${1+"$@"}${reset}"
parse_cmd_options
unmount_img_force
benchmark_time_end ## sets benchmark_took_time (implemented in help-steps/pre)
true "${bold}INFO: End of: $0 No error detected. (benchmark: $benchmark_took_time)${reset}"
