#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set +x
#set -x

set -o pipefail

error_handler_shared() {
   last_exit_code="$?"
   last_bash_command="$BASH_COMMAND"
   if [ test -o xtrace = "0" ]; then
      set +x
      benchmark_time_end ## sets benchmark_took_time (implemented in help-steps/pre)
      read -p "\
${red}${bold}ERROR in $0 detected!
Please have a look above \"error_handler_general\", note the command that failed, its output and last_exit_code.
Please press enter to cleanup and exit. ${reset}" answer
      if [ "$answer" = "continue" ] || [ "$answer" = "c" ]; then
         ignore_error="true"
      else
         ignore_error="false"
      fi
      set -x
   else
      benchmark_time_end ## sets benchmark_took_time (implemented in help-steps/pre)
      read -p "\
${red}${bold}ERROR in $0 detected!
Please have a look above \"error_handler_general\", note the command that failed, its output and last_exit_code.
Please press enter to cleanup and exit. ${reset}" answer
   fi
   last_caller="$(caller)"
   last_script="$0"
   ## test -o xtrace
   ## exits:
   ## - 0, if -x is set
   ## - 1, if -x is not set
   if [ test -o xtrace = "0" ]; then
      ## -x is set
      output_command="true"
   else
      output_command="echo"
   fi
   ## Removing temporary debian testing (jessie) repository.
   rm --force "/etc/apt/sources.list.d/whonix_temp.list"
   ## Remove lockfile for whonixcheck.
   rm --force "/var/run/whonix/package_manager_lock"
}

error_handler_exit() {
   if [ "$ignore_error" = "true" ]; then
      abort_or_continue="Continue"
   else
      abort_or_continue="Aborted"
   fi
   $output_command "
############################################################
${red}${bold}ERROR in $last_script detected! $abort_or_continue!${reset}
(benchmark: $benchmark_took_time)
${red}${bold}BASH_COMMAND${reset}: $last_bash_command
${red}${bold}last_exit_code${reset}: $last_exit_code
${red}${bold}caller: $last_caller${reset}
${red}${bold}ERROR in $last_script! $abort_or_continue!${reset}
############################################################
"
   if [ "$ignore_error" = "true" ]; then
      if [ test -o xtrace = "0" ]; then
         set +x
         read -p "
${red}${bold}You have chosen to ignore this error. Your build may be unstable!
This is recommended against unless you know what you are doing. Do not report
bugs, that are a result of this! Please press enter to continue. ${reset}" answer
         set -x
      else
         read -p "
${red}${bold}You have chosen to ignore this error. Your build may be unstable!
This is recommended against unless you know what you are doing. Do not report
bugs, that are a result of this! Please press enter to continue. ${reset}" answer
      fi
   else
      exit 1
   fi
}

error_handler_general() {
   error_handler_shared
   error_handler_exit
}

error_handler_unchroot_unprevent_unmount() {
   error_handler_shared
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/remove-local-temp-apt-repo
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unchroot-img
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unprevent-daemons-from-starting
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-img
   error_handler_exit
}

error_handler_unmount() {
   error_handler_shared
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-img
   error_handler_exit
}

trap "error_handler_general" ERR INT TERM

maybe_set_plus_x() {
   if [ "$MINUS_X_SET" = "1" ]; then
      set +x
   fi
}

## Thanks to  perreal for the convertsecs function.
## http://stackoverflow.com/a/12199798
convertsecs() {
   ((h=${1}/3600))
   ((m=(${1}%3600)/60))
   ((s=${1}%60))
   printf "%02d:%02d:%02d\n" $h $m $s
   true
}

benchmark_time_start() {
   benchmark_time_start="$(date +%s)"
   true
}

benchmark_time_end() {
   benchmark_time_end="$(date +%s)"
   benchmark_took_seconds="$((  $benchmark_time_end - $benchmark_time_start ))"
   benchmark_took_time="$(convertsecs "$benchmark_took_seconds")"
   true
}

## start benchmark_time_end
benchmark_time_start

## Thanks to:
## http://mywiki.wooledge.org/BashFAQ/037
## Variables for terminal requests.
[[ -t 2 ]] && {
    alt=$(      tput smcup  || tput ti      ) # Start alt display
    ealt=$(     tput rmcup  || tput te      ) # End   alt display
    hide=$(     tput civis  || tput vi      ) # Hide cursor
    show=$(     tput cnorm  || tput ve      ) # Show cursor
    save=$(     tput sc                     ) # Save cursor
    load=$(     tput rc                     ) # Load cursor
    bold=$(     tput bold   || tput md      ) # Start bold
    stout=$(    tput smso   || tput so      ) # Start stand-out
    estout=$(   tput rmso   || tput se      ) # End stand-out
    under=$(    tput smul   || tput us      ) # Start underline
    eunder=$(   tput rmul   || tput ue      ) # End   underline
    reset=$(    tput sgr0   || tput me      ) # Reset cursor
    blink=$(    tput blink  || tput mb      ) # Start blinking
    italic=$(   tput sitm   || tput ZH      ) # Start italic
    eitalic=$(  tput ritm   || tput ZR      ) # End   italic
[[ $TERM != *-m ]] && {
    red=$(      tput setaf 1|| tput AF 1    )
    green=$(    tput setaf 2|| tput AF 2    )
    yellow=$(   tput setaf 3|| tput AF 3    )
    blue=$(     tput setaf 4|| tput AF 4    )
    magenta=$(  tput setaf 5|| tput AF 5    )
    cyan=$(     tput setaf 6|| tput AF 6    )
}
    white=$(    tput setaf 7|| tput AF 7    )
    default=$(  tput op                     )
    eed=$(      tput ed     || tput cd      )   # Erase to end of display
    eel=$(      tput el     || tput ce      )   # Erase to end of line
    ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
    ewl=$eel$ebl                                # Erase whole line
    draw=$(     tput -S <<< '   enacs
                                smacs
                                acsc
                                rmacs' || { \
                tput eA; tput as;
                tput ac; tput ae;         } )   # Drawing characters
    back=$'\b'
} 2>/dev/null ||:

if [ ! "$ROOT_CHECK" = "0" ]; then
   if [ "$(id -u)" != "0" ]; then
       echo "${red}${bold}ERROR: This must be run as root (sudo)!${reset}"
       exit 1
   else
       true "INFO: Script running as root."
   fi
fi

## Lower IO priority.
ionice -c3 -p$$

## Debugging.
ionice >/dev/null

## Lower CPU priority.
renice +19 -p $$ >/dev/null

## Debugging.
nice >/dev/null

maybe_enable_apt_cache() {
   trap "error_handler_general" ERR INT TERM

   if [ -f "/usr/share/whonix/whonix_gateway" ]; then
      ## Someone updating Whonix-Gateway from source code.

      ## apt-cacher-ng will not work on Whonix-Gateway, because Whonix-Gateway
      ## does not have TransPort / DnsPort by default.
      echo 'INFO: Not setting http_proxy, because Whonix-Gateway detected, ok.'
      true
   else
      if [ "$http_proxy" = "" ]; then
         ## Enable apt-cacher-ng.
         echo 'INFO: Setting, export http_proxy="http://127.0.0.1:3142"'
         export http_proxy="http://127.0.0.1:3142"
      else
         echo "INFO: Leaving custom variable http_proxy $http_proxy as is."
      fi
   fi
}

disable_apt_cache() {
   trap "error_handler_general" ERR INT TERM

   unset http_proxy
}

#echo "${bold}Currently running script: $0${reset}"

set -x
