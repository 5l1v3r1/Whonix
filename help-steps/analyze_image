#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

[ -o xtrace ]
## returns:
## - 0, if -x is set
## - 1, if -x is not set
MINUS_X_SET="$?"

set -x

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..

WHONIX_BUILD_PARSED="1"
VMNAME="internalrun"

cd help-steps
source pre

## Enable (1) or disable (0) debug_echo's.
debug="0"

script_help() {
   trap "error_handler_general" ERR INT TERM

   echo "\
Required options:
--ova ovafile
--report reportfile
--tempfolder folder

Optional options:
--topcomment comment
--endcomment comment
--errorcomment comment

Usage examples:
From Whonix Source Code Folder...

sudo ./help-steps/analyze_image --ova ~/Whonix-Gateway-7.4.3.ova --report ~/report1 --tempfolder ~/whonix_binary/report_temp1

sudo ./help-steps/analyze_image --ova ~/whonix_binary/Whonix-Gateway-7.4.3.ova --report ~/report2 --tempfolder ~/whonix_binary/report_temp2

From ~/whonix_binary folder...
vbindiff ./report_temp1/manual_analysis_folder/Whonix-Gateway-7.4.3.img.dd.1000000 ./report_temp2/manual_analysis_folder/Whonix-Gateway-7.4.3.img.dd.1000000

See https://www.whonix.org/wiki/Verifiable_Builds
and https://www.whonix.org/wiki/Trust"
}

parse_cmd() {
   trap "error_handler_general" ERR INT TERM

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   if [ "$*" = "" ]; then
      error "no option chosen. Use --help."
   fi

   ## TODO:
   ## - specify .img or .vdi instead of .ova

   while :
   do
       case $1 in
           -h | --help | -\?)
               script_help
               exit 0
               ;;
           -o | --ova)
               ova_file="$2"
               shift 2
               ;;
           -r | --report)
               report_file="$2"
               shift 2
               ;;
           -t | --tempfolder)
               tempfolder="$2"
               shift 2
               ;;
           -c | --topcomment)
               topcomment="$2"
               shift 2
               ;;
           -e | --endcomment)
               endcomment="$2"
               shift 2
               ;;
           -f | --errorcomment)
              errorcomment="$2"
              shift 2
              ;;
           --)
               shift
               break
               ;;
           -*)
               error "unknown option: $1"
               ;;
           *)
               break
               ;;
       esac
   done

   if [ ! -f "$ova_file" ]; then
      if [ "$ova_file" = "baremetal" ]; then
         ## A bit of a hack.
         BARE_METAL="1"
      else
         echo "${red}${bold} ERROR: ova_file $ova_file does not exist! ${reset}"
         exit 1
      fi
   fi

   if [ "$report_file" = "" ]; then
      echo "${red}${bold} ERROR: no report_file chosen! ${reset}"
      exit 1
   fi
   if [ "$tempfolder" = "" ]; then
      echo "${red}${bold} ERROR: no tempfolder chosen! ${reset}"
      exit 1
   fi
}

error_handler() {
   local exit_code="$?"
   local bash_command="$BASH_COMMAND"

   unmount_image

   echo "
${red}${bold}bash_command${reset}: $bash_command
${red}${bold}exit_code${reset}: $exit_code
"

   if [ "$errorcomment" = "" ]; then
      errorcomment="No error comment"
   fi

   errorcomment="$errorcomment
bash_command: $bash_command
exit_code: $exit_code"

   echo "$errorcomment" >> "$report_file"

   exit 1
}

trap "error_handler" ERR INT TERM

debug_echo() {
   trap "error_handler" ERR INT TERM
   if [ "$debug" = 1 ]; then
      echo "$*"
   fi
}

unmount_image() {
   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Unmounting vdi... ${reset}"

   sync

   local command_v_exit_code="0"
   command -v guestunmount >/dev/null || { command_v_exit_code="$?" ; true; };

   if [ "$command_v_exit_code" = "0" ]; then
      true "${bold}${cyan}INFO: guestunmount available, using it, ok... ${reset}"
      guestunmount "$mount_folder"
   else
      ## guestunmount is not available in Debian Wheezy. Only since Debian Jessie.
      true "${bold}${cyan}INFO: guestunmount not available, using \"fusermount -u\" instead, ok... ${reset}"
      fusermount -u "$mount_folder"
   fi

   sync

   true "${bold}${cyan}INFO: Unmounted vdi. ${reset}"
}

preparation() {
   trap "error_handler" ERR INT TERM

   true "INFO: user_name is set to $user_name"
   true 'INFO: Benchmarking "sudo -u "$user_name" echo "This is a test echo."" using "time"...'
   time sudo -u "$user_name" echo "This is a test echo."

   ## {{ Sanity Tests.

   local tool
   local tools

   tools="
      readlink
      sha512sum
      dirname
      basename
      pwd
      sudo
      echo
      mkdir
      touch
      command
      rm
      cp
      chown
      dd
      sync
      find
      sort
      stat
   "
   for tool in $tools; do
      command -v "$tool" >/dev/null
   done
   unset tool
   unset tools

   if [ "$CI" = "true" ]; then
      ## Tools for VM mouting not installed (not required) in this case.
      true
   elif [ "$BARE_METAL" = "1" ]; then
      ## Tools for VM mouting not installed (not required) in this case.
      true
   else
      tools="
         guestmount
         guestfish
         virt-filesystems
      "
      for tool in $tools; do
         command -v "$tool" >/dev/null
      done
      unset tool
      unset tools
   fi

   ## }}

   rm --force "$report_file"
   rm --force "$file_list_file"
   sync

   ## The WHONIX_BINARY folder should already be created. Just make sure it
   ## really is to allow running this script in non-Whonix environments as
   ## well.
   sudo -u "$user_name" mkdir --parents "$WHONIX_BINARY"

   sudo -u "$user_name" touch "$report_file"
   sync

   if [ "$BARE_METAL" = "1" ]; then
      mount_folder=""
   else
      mount_folder="$tempfolder/mount_folder"
   fi

   extracted_ova_folder="$tempfolder/extracted_ova_folder"
   vdi_folder="$tempfolder/vdi_folder"
   raw_folder="$tempfolder/raw_folder"
   auto_hash_folder="$tempfolder/auto_hash_folder"
   initrd_folder="$tempfolder/initrd_folder"
   extracted_initrd_folder="$tempfolder/extracted_initrd_folder"
   debug_folder="$tempfolder/debug_folder"
   manual_analysis_folder="$tempfolder/manual_analysis_folder"

   ova_absolute_filename_without_extension="${ova_file%.*}"
   folder_name="$(dirname "$ova_file")"
   ova_filename="$(basename "$ova_file")"
   ova_filename_without_extension="${ova_filename%.*}"

   ## Example ova_absolute_filename_without_extension:
   ## /home/user/whonix_binary/Whonix-Gateway-7

   vmdk_file="$extracted_ova_folder/$ova_filename_without_extension-disk1.vmdk"
   vdi_file="$vdi_folder/$ova_filename_without_extension.vdi"
   raw_file="$raw_folder/$ova_filename_without_extension.img"

   vmdk_file_basename="$(basename "$vmdk_file")"
   vdi_file_basename="$(basename "$vdi_file")"
   raw_file_basename="$(basename "$raw_file")"

   file_list_file="$auto_hash_folder/file_list"

   sudo -u "$user_name" mkdir --parents "$extracted_ova_folder"
   sudo -u "$user_name" mkdir --parents "$mount_folder" || true
   sudo -u "$user_name" mkdir --parents "$vdi_folder"
   sudo -u "$user_name" mkdir --parents "$raw_folder"
   sudo -u "$user_name" mkdir --parents "$auto_hash_folder"
   sudo -u "$user_name" mkdir --parents "$initrd_folder"
   sudo -u "$user_name" mkdir --parents "$extracted_initrd_folder"
   sudo -u "$user_name" mkdir --parents "$debug_folder"
   sudo -u "$user_name" mkdir --parents "$manual_analysis_folder"
   sync
}

parse_topcomment() {
   trap "error_handler" ERR INT TERM

   if [ "$topcomment" = "" ]; then
      topcomment="No topcomment."
   fi
   echo "$topcomment" >> "$report_file"
}

extract_ova() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   cd "$extracted_ova_folder"

   if [ -f "$vdi_file" ]; then
      true "${bold}${cyan}INFO: Unpacking .ova not required, .vdi already exists, skipping. ${reset}"
   else
      if [ ! -f "$ova_file" ]; then
         error "${red}${bold}ERROR: $ova_file does not exist. ${reset}"
      else
         true "${bold}${cyan}INFO: Unpacking ova: $ova_file... (This can take a while.) ${reset}"
         sudo -u "$user_name" tar -xvf "$ova_file"
         true "${bold}${cyan}INFO: Unpacked ova_file. ${reset}"
      fi
   fi
}

convert_vmdk_to_vdi() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   if [ ! -f "$vmdk_file" ]; then
      error "${red}${bold}ERROR: vmdk_file: $vmdk_file does not exist. ${reset}"
   fi

   if [ -f "$vdi_file" ]; then
      true "${bold}${cyan}INFO: Converting vmdk to vdi not required, already done, skipping. ${reset}"
   else
      ## Convert .vmdk to .vdi, since there is no Free Software for mounting .vmdk using command line.
      true "${bold}${cyan}INFO: Converting vmdk to vdi... (This can take a while.) ${reset}"

      ## qemu-img version 1.6.1 fails with:
      ## qemu-img: 'image' uses a vmdk feature which is not supported by this qemu version: VMDK version 3
      ## https://bugs.launchpad.net/qemu/+bug/1253465
      #sudo -u "$user_name" qemu-img convert "$vmdk_file" -O RAW "$vdi_file"

      sudo -u "$user_name" VBoxManage clonehd --format VDI "$vmdk_file" "$vdi_file"

      true "${bold}${cyan}INFO: Converted vmdk to vdi. ${reset}"
   fi
}

convert_vdi_to_raw() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   if [ -f "$raw_file" ]; then
      true "${bold}${cyan}INFO: Converting vdi to raw not required, already done, skipping. ${reset}"
   else
      true "${bold}${cyan}INFO: Converting vdi to img... (This can take a while.) ${reset}"

      sudo -u "$user_name" qemu-img convert -p -O raw "$vdi_file" "$raw_file"

      true "${bold}${cyan}INFO: Converted vdi to img. ${reset}"
   fi
}

mount_image() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Mounting vdi... ${reset}"

   sync

   ## Mounting read-only so the user or script can not accidentally delete
   ## files within the image.
   guestmount -o allow_other -a "$vdi_file" -m /dev/sda1 --ro "$mount_folder"
   sync

   true "${bold}${cyan}INFO: Mounted vdi. ${reset}"
}

parse_file_system() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Parsing file systems... ${reset}"

   virt-filesystems -a "$vdi_file" > "$auto_hash_folder/$vdi_file_basename.virt-filesystems-a"
   virt-filesystems -a "$raw_file" > "$auto_hash_folder/$raw_file_basename.virt-filesystems-a"

   true "${bold}${cyan}INFO: Parsed file systems. ${reset}"
}

parse_mbr() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Parsing MBR... ${reset}"

   ## ~1 MB
   dd if="$raw_file" of="$manual_analysis_folder/$raw_file_basename.dd.1000000" bs=1000000 count=1

   true "${bold}${cyan}INFO: Parsed MBR. ${reset}"
}

parse_vbr() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Parsing VBR... ${reset}"

   guestfish --ro -a "$raw_file" run : pread-device /dev/sda1 512 0 > "$auto_hash_folder/$raw_file_basename.sda1_pread-device.512"
   guestfish --ro -a "$vdi_file" run : pread-device /dev/sda1 512 0 > "$auto_hash_folder/$vdi_file_basename.sda1_pread-device.512"

   true "${bold}${cyan}INFO: Parsed VBR. ${reset}"
}

cp_to_user() {
   trap "error_handler" ERR INT TERM

   cp "$1" "$2"
   chown --recursive "$user_name:$user_name" "$2"
}

parse_special_files() {
   trap "error_handler" ERR INT TERM

   ## Allow running this script in non-Whonix environments as well.
   if [ -f "$mount_folder/usr/share/whonix/build_timestamp" ]; then
      cp_to_user "$mount_folder/usr/share/whonix/build_timestamp" "$manual_analysis_folder/usr_share_whonix_build_timestamp"
      echo "$manual_analysis_folder/build_timestamp BEGIN..."
      sudo -u "$user_name" cat "$manual_analysis_folder/usr_share_whonix_build_timestamp"
      echo "END $manual_analysis_folder/build_timestamp."
   else
      msg="Strange, $mount_folder/usr/share/whonix/build_timestamp does not exist. Perhaps not running in Whonix."
      echo "$msg" > "$manual_analysis_folder/usr_share_whonix_build_timestamp"
   fi

   ###########################
   ## manual_analysis_folder #
   ###########################

   if [ "$CI" = "true" ]; then
      ## Reading /etc/shadow does usually not work on CI systems. Not even as root.
      cp_to_user "$mount_folder/etc/shadow" "$manual_analysis_folder/etc_shadow" || true
      cp_to_user "$mount_folder/etc/shadow-" "$manual_analysis_folder/etc_shadow-" || true
   else
      cp_to_user "$mount_folder/etc/shadow" "$manual_analysis_folder/etc_shadow"
      cp_to_user "$mount_folder/etc/shadow-" "$manual_analysis_folder/etc_shadow-"
   fi

   ## "|| true", because CI (Ubuntu) and custom builders may not use sysvinit.
   cp_to_user "$mount_folder/etc/init.d/.depend.boot" "$manual_analysis_folder/etc_init.d_.depend.boot" || true
   cp_to_user "$mount_folder/etc/init.d/.depend.start" "$manual_analysis_folder/etc_init.d_.depend.start" || true
   cp_to_user "$mount_folder/etc/init.d/.depend.stop" "$manual_analysis_folder/etc_init.d_.depend.stop" || true

   cp_to_user "$mount_folder/etc/fstab" "$manual_analysis_folder/etc_fstab"

   ## {{{ /var/lib/initramfs-tools/

   sudo -u "$user_name" mkdir --parents "$manual_analysis_folder/var_lib_initramfs-tools"

   local file
   shopt -s nullglob dotglob

   for file in "$mount_folder/var/lib/initramfs-tools/"*; do
      cp_to_user "$file" "$manual_analysis_folder/var_lib_initramfs-tools/"
   done

   unset file
   shopt -u nullglob dotglob

   ## }}}

   #################
   ## debug_folder #
   #################

   ## Allow running this script in non-Whonix environments as well.
   if [ -e "$mount_folder/usr/share/whonix/build_version" ]; then
      cp_to_user "$mount_folder/usr/share/whonix/build_version" "$debug_folder/usr_share_whonix_build_version"
   else
      msg="Strange, $mount_folder/usr/share/whonix/build_version does not exist. Perhaps not running in Whonix."
      echo "$msg" > "$debug_folder/usr_share_whonix_build_version"
   fi

   cp_to_user "$mount_folder/etc/debootstrap/config" "$debug_folder/etc_debootstrap_config" || true
   cp_to_user "$mount_folder/etc/debootstrap/stages/default_locales" "$debug_folder/etc_debootstrap_stages_default_locales" || true

   ## {{{ /usr/share/doc/whonix-*/changelog.Debian.gz

   sudo -u "$user_name" mkdir --parents "$debug_folder/usr_share_doc_whonix-x"

   rm --force "$debug_folder/usr_share_doc_whonix-x/file_list"
   local i
   i="0"
   local file
   shopt -s nullglob dotglob

   for file in "$mount_folder/usr/share/doc/whonix-"*"/changelog.Debian.gz"; do
      i="$(( $i + 1 ))"
      echo "file number: $i | file: $file" >> "$debug_folder/usr_share_doc_whonix-x/file_list"
      cp_to_user "$file" "$debug_folder/usr_share_doc_whonix-x/changelog.Debian.gz.$i"
   done

   unset file
   shopt -u nullglob dotglob

   ## }}}

   sudo -u "$user_name" mkdir --parents "$debug_folder/var_lib_dpkg_info_whonix-x"

   ## {{{ /var/lib/dpkg/info/whonix-*.md5sums

   local file
   shopt -s nullglob dotglob

   for file in "$mount_folder/var/lib/dpkg/info/whonix-"*".md5sums"; do
      cp_to_user "$file" "$debug_folder/var_lib_dpkg_info_whonix-x/"
   done

   unset file
   shopt -u nullglob dotglob

   ## }}}

   ## "|| true", because these files are expected to be deleted.
   ## Copying them out of the image for easier analysis just in case.
   cp_to_user "$mount_folder/var/cache/apt/pkgcache.bin" "$debug_folder/var_cache_apt_pkgcache.bin" || true
   cp_to_user "$mount_folder/var/lib/dpkg/available" "$debug_folder/var_lib_dpkg_available" || true
   cp_to_user "$mount_folder/var/lib/dpkg/available-old" "$debug_folder/var_lib_dpkg_available-old" || true
}

parse_initrd() {
   trap "error_handler" ERR INT TERM

   ## {{{ /boot/*

   ## Debugging.
   ls -la "$mount_folder/boot/" || true

   local file
   shopt -s nullglob dotglob

   for file in "$mount_folder/boot/initrd.img"*; do
      cp_to_user "$file" "$initrd_folder"
   done

   unset file
   shopt -u nullglob dotglob

   ## }}}

   ## {{{ $initrd_folder/*

   shopt -s nullglob dotglob
   local file

   for file in "$initrd_folder"/*; do
      cd "$extracted_initrd_folder"
      true "file: $file"
      local basename_file
      basename_file="$(basename "$file")"
      sudo -u "$user_name" mkdir --parents "$basename_file"
      cd "$basename_file"
      sudo -u "$user_name" gzip -dc < "$file" | sudo -u "$user_name" cpio -i
   done

   unset file
   shopt -u nullglob dotglob

   ## }}}
}

parse_folder() {
   trap "error_handler" ERR INT TERM

   local i
   i="0"

   if [ "$CI" = "true" ]; then
      ## This is unfortunately required to avoid the following error.
      ## "The log length has exceeded the limit of 4 Megabytes (this usually means that test suite is raising the same exception over and over).
      ## The build has been terminated."
      local parse_max
      parse_max="100"
   fi

   local sub_folder
   sub_folder="$(basename "$folder/")"

   local file

   true "${bold}${cyan}Parsing $sub_folder... ${reset}"

   set +x

   while read -r -d '' file; do
      i="$(( $i + 1 ))"

      if [ "$CI" = "true" ]; then
         if [ "$i" -gt "$parse_max" ]; then
            echo "($sub_folder) parse_max $parse_max reached. Skipping the remaining files."
            echo "($sub_folder) parse_max $parse_max reached. Skipping the remaining files." >> "$report_file"
            break
         fi
      fi

      local absolute_file_name
      absolute_file_name="${file#"$folder"}"

      ## Too verbose.
      #echo "$absolute_file_name: $file"

      echo "$absolute_file_name" >> "$file_list_file"

      if [ -d "$file" ]; then
         echo "($sub_folder) $absolute_file_name | directory" >> "$report_file"
         continue
      fi

      local dir_name
      dir_name="${file%/*}"
      local dir_name_absolute
      dir_name_absolute="${dir_name#"$folder"}"
      local file_size

      ## Check if $file exists. Somehow on Debian Wheezy it does not exit 0 for
      ## symlinks.
      if [ ! -e "$file" ]; then
         ## Check if $file is a symlink.
         if [ -h "$file" ]; then
            ## Symlinks are parsed below.
            true
         else
            msg="($sub_folder) $absolute_file_name | $file does_not_exist"
            echo "${cyan} $msg ${reset}"
            echo "$msg" >> "$report_file"
            if [ "$CI" = "true" ] || [ "$BARE_METAL" = "1" ]; then
               ## File might no longer exist on bare metal.
               ## For example "sudo stat /proc/13165" could fail.
               continue
            else
               ## Should not happen inside virtual machine images, because /proc
               ## is not mounted there.
               set -x
               error "$msg"
            fi
         fi
      fi

      local stat_exit_code
      stat_exit_code="0"
      file_size="$(stat -c '%s' "$file" 2>&1)" || { stat_exit_code="${PIPESTATUS[0]}" ; true; };

      ## Check if $file is a symlink.
      if [ -h "$file" ]; then
         ## Symlink found...

         ## Not using readlink with -f, so we can compare the relative links.
         local file_link
         local read_link_exit_code
         read_link_exit_code="0"
         file_link="$(readlink "$file" 2>&1)" || { read_link_exit_code="${PIPESTATUS[0]}" ; true; };

         echo "($sub_folder) $absolute_file_name | read_link_exit_code: $read_link_exit_code | file_size: $file_size (stat_exit_code: $stat_exit_code) | symlinks_to $file_link" >> "$report_file"

         continue
      fi

      if [ "$skip" = "1" ]; then
         local file_extension
         file_extension="${file##*.}"
         if [ "$file_extension" = "vmdk" ] || [ "$file_extension" = "mf" ] || [ "$file_extension" = "ovf" ]; then
            ## Skipping creating a sha512sum of the vmdk, because that wastes
            ## a lot time and we know in advance, there there will be
            ## differences. (Because there are no deterministically built
            ## operating systems yet.) We mount and analyze that image later,
            ## which is the whole point of this script.
            ##
            ## Skipping creation of sha512sum for mf and ovf file because those
            ## contain checksums and disk uuids which we expect to differ.
            ## Auditors are advised to manually diff those files.
            ##
            ## Still useful to have the file name and "skipped" in the report
            ## file, because this is a reminder to diff the mf and the ofv file
            ## and because the ova could also contain more than the three
            ## expected files.
            echo "($sub_folder) $absolute_file_name | skipped" >> "$report_file"
            continue
         fi
      fi

      ## "sudo sudo sha512sum /dev/xconsole" would run forever.
      if [ "$absolute_file_name" = "/dev/xconsole" ]; then
         echo "($sub_folder) $absolute_file_name | skipped | file_size: $file_size (stat_exit_code: $stat_exit_code)" >> "$report_file"
         continue
      fi
      ## "sudo sha512sum /dev/initctl" would run forever.
      if [ "$absolute_file_name" = "/dev/initctl" ]; then
         echo "($sub_folder) $absolute_file_name | skipped | file_size: $file_size (stat_exit_code: $stat_exit_code)" >> "$report_file"
         continue
      fi

      local maybe_timeout
      if [ "$CI" = "true" ] || [ "$BARE_METAL" = "1" ]; then
         if [[ "$absolute_file_name" == "/dev/"** ]]; then
            ## For example "sudo sha512sum /dev/tty1" would run forever.
            maybe_timeout="timeout --kill-after=1 1"
         elif [[ "$absolute_file_name" == "/proc/"** ]]; then
            ## For example "sudo sha512sum /proc/kmsg" would run forever.
            maybe_timeout="timeout --kill-after=1 1"
         elif [[ "$absolute_file_name" == "/run/"** ]]; then
            ## For example "sha512sum /run/acpi_fakekey" would run forever.
            maybe_timeout="timeout --kill-after=1 1"
         elif [[ "$absolute_file_name" == "/tmp/"** ]]; then
            ## For example "sudo sha512sum /tmp/20140115122244.19545.trace" would run forever.
            maybe_timeout="timeout --kill-after=1 1"
         else
            maybe_timeout=""
         fi
      else
         maybe_timeout=""
      fi

      local checksum_output
      local checksum_exit_code
      checksum_exit_code="0"
      checksum_output="$($maybe_timeout sha512sum "$file" 2>&1)" || { checksum_exit_code="${PIPESTATUS[0]}" ; true; };
      if [ ! "$checksum_exit_code" = "0" ]; then
         ## Handling cases such as:
         ## sha512sum /home/user/whonix_binary/$tempfolder/mount_folder/dev/ida/c2d10p14
         ## sha512sum: /home/user/whonix_binary/$tempfolder/mount_folder/dev/ida/c2d10p14: Permission denied
         if [ "$checksum_output" = "" ]; then
            checksum_output="sha512sum_echoed_nothing"
         fi
         echo "($sub_folder) $absolute_file_name | checksum_exit_code: $checksum_exit_code | file_size: $file_size (stat_exit_code: $stat_exit_code) | checksum_output: $checksum_output" >> "$report_file"
         continue
      else
         local checksum
         read -r checksum _ <<< "$checksum_output"
         echo "($sub_folder) $absolute_file_name | checksum_exit_code: $checksum_exit_code | file_size: $file_size (stat_exit_code: $stat_exit_code) | checksum: $checksum" >> "$report_file"
         continue
      fi
   done < <(find "$folder/" -print0 | sort -z)

   set -x

   true "${bold}${cyan}Parsed $sub_folder. ${reset}"
}

parse_file_list_file() {
   trap "error_handler" ERR INT TERM

   sha512sum "$file_list_file" >> "$report_file"
}

parse_endcomment() {
   trap "error_handler" ERR INT TERM

   if [ "$endcomment" = "" ]; then
      endcomment="No endcomment."
   fi

   echo "$endcomment" >> "$report_file"
}

end() {
   trap "error_handler" ERR INT TERM

   unmount_image

   true "${bold}${cyan}INFO: End. No error detected. ${reset}"
}

parse_cmd ${1+"$@"}
preparation
parse_topcomment

extract_ova
convert_vmdk_to_vdi
convert_vdi_to_raw

parse_file_system
parse_vbr
parse_mbr

mount_image

parse_special_files
parse_initrd

skip="1"
folder="$extracted_ova_folder"
parse_folder

skip="1"
folder="$vdi_folder"
parse_folder

skip="1"
folder="$raw_folder"
parse_folder

skip="1"
folder="$initrd_folder"
parse_folder

skip="1"
folder="$manual_analysis_folder"
parse_folder

skip="1"
folder="$debug_folder"
parse_folder

skip="0"
folder="$auto_hash_folder"
parse_folder

skip="0"
folder="$extracted_initrd_folder"
parse_folder

skip="0"
folder="$mount_folder"
parse_folder

parse_file_list_file

parse_endcomment
end
