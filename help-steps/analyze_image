#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

## Usage:
## From Whonix Source Code Folder...
##
## sudo ./release/analyze_image --ova ~/Whonix-Gateway-7.4.3.ova --report ~/report1 --tempfolder ~/whonix_binary/report_temp1
##
## sudo ./release/analyze_image --ova ~/whonix_binary/Whonix-Gateway-7.4.3.ova --report ~/report2 --tempfolder ~/whonix_binary/report_temp2
##
## vbindiff ./report_temp1/manual_analysis_folder/Whonix-Gateway-7.4.3.img.dd.1000000 ./report_temp2/manual_analysis_folder/Whonix-Gateway-7.4.3.img.dd.1000000
##
## sudo ./release/analyze_image --ova ~/Whonix-Workstation-7.4.3.ova --report ~/report_ws_1 --tempfolder ~/whonix_binary/report_ws_1
##
## sudo ./release/analyze_image --ova ~/whonix_binary/Whonix-Workstation-7.4.3.ova --report ~/report_ws_2 --tempfolder ~/whonix_binary/report_ws_2

## TODO document:
## - look at $manual_analysis_folder/build_timestamp

[ -o xtrace ]
## returns:
## - 0, if -x is set
## - 1, if -x is not set
MINUS_X_SET="$?"

set -x
set -o pipefail

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..

WHONIX_BUILD_PARSED="1"
VMNAME="internalrun"

cd help-steps
source pre

## Enable (1) or disable (0) debug_echo's.
debug="0"

## TODO:
## - Master Boot Record
## - Volume Boot Record

script_help() {
   ## TODO
   echo "TODO"
}

parse_cmd() {
   trap "error_handler_general" ERR INT TERM

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   if [ "$*" = "" ]; then
      error "no option chosen. Use --help."
   fi

   ## TODO:
   ## - specify .img or .vdi instead of .ova

   while :
   do
       case $1 in
           -h | --help | -\?)
               script_help
               exit 0
               ;;
           -o | --ova)
               ova_file="$2"
               shift 2
               ;;
           -r | --report)
               report_file="$2"
               shift 2
               ;;
           -t | --tempfolder)
               tempfolder="$2"
               shift 2
               ;;
           --)
               shift
               break
               ;;
           -*)
               error "unknown option: $1"
               ;;
           *)
               break
               ;;
       esac
   done

   if [ ! -f "$ova_file" ]; then
      echo "ERROR: ova_file $ova_file does not exist!"
      exit 1
   fi
   if [ "$report_file" = "" ]; then
      echo "ERROR: no report_file chosen!"
      exit 1
   fi
   if [ "$tempfolder" = "" ]; then
      echo "ERROR: no tempfolder chosen!"
      exit 1
   fi
}

error_handler() {
   local return_code="$?"
   local bash_command="$BASH_COMMAND"

   unmount_image

   echo "
${red}${bold}bash_command${reset}: $bash_command
${red}${bold}return_code${reset}: $return_code
"

   exit 1
}

trap "error_handler" ERR INT TERM

debug_echo() {
   trap "error_handler" ERR INT TERM
   if [ "$debug" = 1 ]; then
      echo "$*"
   fi
}

unmount_image() {
   true "${bold}${cyan}INFO: Unmounting vdi... ${reset}"

   sync

   guestunmount "$mount_folder"
   sync

   true "${bold}${cyan}INFO: Unmounted vdi. ${reset}"
}

preparation() {
   trap "error_handler" ERR INT TERM

   rm --force "$report_file"
   rm --force "$file_list_file"
   sync

   sudo -u "$USERNAME" touch "$report_file"
   sync

   extracted_ova_folder="$tempfolder/extracted_ova_folder"
   mount_folder="$tempfolder/mount_folder"
   vdi_folder="$tempfolder/vdi_folder"
   raw_folder="$tempfolder/raw_folder"
   auto_hash_folder="$tempfolder/auto_hash_folder"
   initrd_folder="$tempfolder/initrd_folder"
   extracted_initrd_folder="$tempfolder/extracted_initrd_folder"
   debug_folder="$tempfolder/debug_folder"
   manual_analysis_folder="$tempfolder/manual_analysis_folder"

   ova_absolute_filename_without_extension="${ova_file%.*}"
   folder_name="$(dirname "$ova_file")"
   ova_filename="$(basename "$ova_file")"
   ova_filename_without_extension="${ova_filename%.*}"

   ## Example ova_absolute_filename_without_extension:
   ## /home/user/whonix_binary/Whonix-Gateway-7

   vmdk_file="$extracted_ova_folder/$ova_filename_without_extension-disk1.vmdk"
   vdi_file="$vdi_folder/$ova_filename_without_extension.vdi"
   raw_file="$raw_folder/$ova_filename_without_extension.img"

   vmdk_file_basename="$(basename "$vmdk_file")"
   vdi_file_basename="$(basename "$vdi_file")"
   raw_file_basename="$(basename "$raw_file")"

   file_list_file="$auto_hash_folder/file_list"

   sudo -u "$USERNAME" mkdir --parents "$extracted_ova_folder"
   sudo -u "$USERNAME" mkdir --parents "$mount_folder" || true
   sudo -u "$USERNAME" mkdir --parents "$vdi_folder"
   sudo -u "$USERNAME" mkdir --parents "$raw_folder"
   sudo -u "$USERNAME" mkdir --parents "$auto_hash_folder"
   sudo -u "$USERNAME" mkdir --parents "$initrd_folder"
   sudo -u "$USERNAME" mkdir --parents "$extracted_initrd_folder"
   sudo -u "$USERNAME" mkdir --parents "$debug_folder"
   sudo -u "$USERNAME" mkdir --parents "$manual_analysis_folder"
}

extract_ova() {
   trap "error_handler" ERR INT TERM

   cd "$extracted_ova_folder"

   if [ -f "$vdi_file" ]; then
      ## TODO
      true "${bold}${cyan}INFO: Unpacking .ova not required, .vdi already exists, skipping. ${reset}"
   else
      if [ ! -f "$ova_file" ]; then
         error "${red}${bold}ERROR: $ova_file does not exist. ${reset}"
      else
         true "${bold}${cyan}INFO: Unpacking ova: $ova_file... (This can take a while.) ${reset}"
         sudo -u "$USERNAME" tar -xvf "$ova_file"
         true "${bold}${cyan}INFO: Unpacked ova_file. ${reset}"
      fi
   fi
}

convert_vmdk_to_vdi() {
   trap "error_handler" ERR INT TERM

   if [ ! -f "$vmdk_file" ]; then
      error "${red}${bold}ERROR: vmdk_file: $vmdk_file does not exist. ${reset}"
   fi

   if [ -f "$vdi_file" ]; then
      ## TODO
      true "${bold}${cyan}INFO: Converting vmdk to vdi not required, already done, skipping. ${reset}"
   else
      ## Convert .vmdk to .vdi, since there is no Free Software for mounting .vmdk using command line.
      true "${bold}${cyan}INFO: Converting vmdk to vdi... (This can take a while.) ${reset}"

      ## qemu-img version 1.6.1 fails with:
      ## qemu-img: 'image' uses a vmdk feature which is not supported by this qemu version: VMDK version 3
      ## https://bugs.launchpad.net/qemu/+bug/1253465
      ## TODO: vdi -> raw
      #sudo -u "$USERNAME" qemu-img convert "$vmdk_file" -O RAW "$vdi_file"

      sudo -u "$USERNAME" VBoxManage clonehd --format VDI "$vmdk_file" "$vdi_file"

      true "${bold}${cyan}INFO: Converted vmdk to vdi. ${reset}"
   fi
}

convert_vdi_to_raw() {
   trap "error_handler" ERR INT TERM

   if [ -f "$raw_file" ]; then
      ## TODO
      true "${bold}${cyan}INFO: Converting vdi to raw not required, already done, skipping. ${reset}"
   else
      true "${bold}${cyan}INFO: Converting vdi to img... (This can take a while.) ${reset}"

      sudo -u "$USERNAME" qemu-img convert -p -O raw "$vdi_file" "$raw_file"

      true "${bold}${cyan}INFO: Converted vdi to img. ${reset}"
   fi
}

mount_image() {
   trap "error_handler" ERR INT TERM

   true "${bold}${cyan}INFO: Mounting vdi... ${reset}"

   sync

   ## Mounting read-only so the user can not accidentally delete files within the image.
   guestmount -o allow_other -a "$vdi_file" -m /dev/sda1 --ro "$mount_folder"
   sync

   true "${bold}${cyan}INFO: Mounted vdi. ${reset}"
}

parse_file_system() {
   trap "error_handler" ERR INT TERM

   true "${bold}${cyan}INFO: Parsing file systems... ${reset}"

   virt-filesystems -a "$vdi_file" > "$auto_hash_folder/$vdi_file_basename.virt-filesystems-a"
   virt-filesystems -a "$raw_file" > "$auto_hash_folder/$raw_file_basename.virt-filesystems-a"

   true "${bold}${cyan}INFO: Parsed file systems. ${reset}"
}

parse_mbr() {
   trap "error_handler" ERR INT TERM

   true "${bold}${cyan}INFO: Parsing MBR... ${reset}"

   ## ~1 MB
   dd if="$raw_file" of="$manual_analysis_folder/$raw_file_basename.dd.1000000" bs=1000000 count=1

   true "${bold}${cyan}INFO: Parsed MBR. ${reset}"
}

parse_special_files() {
   trap "error_handler" ERR INT TERM

   sudo -u "$USERNAME" cp "$mount_folder/usr/share/whonix/build_timestamp" "$manual_analysis_folder/usr_share_whonix_build_timestamp"
   echo "$manual_analysis_folder/build_timestamp BEGIN..."
   sudo -u "$USERNAME" cat "$manual_analysis_folder/usr_share_whonix_build_timestamp"
   echo "END $manual_analysis_folder/build_timestamp."

   ## {{ manual_analysis_folder

   sudo -u "$USERNAME" cp "$mount_folder/etc/shadow" "$manual_analysis_folder/etc_shadow"
   sudo -u "$USERNAME" cp "$mount_folder/etc/shadow-" "$manual_analysis_folder/etc_shadow-"
   sudo -u "$USERNAME" cp "$mount_folder/etc/init.d/.depend.boot" "$manual_analysis_folder/etc_init.d_.depend.boot"
   sudo -u "$USERNAME" cp "$mount_folder/etc/init.d/.depend.start" "$manual_analysis_folder/etc_init.d_.depend.start"
   sudo -u "$USERNAME" cp "$mount_folder/etc/init.d/.depend.stop" "$manual_analysis_folder/etc_init.d_.depend.stop"
   sudo -u "$USERNAME" cp "$mount_folder/etc/fstab" "$manual_analysis_folder/etc_fstab"

   sudo -u "$USERNAME" mkdir --parents "$manual_analysis_folder/var_lib_initramfs-tools"
   sudo -u "$USERNAME" cp "$mount_folder/var/lib/initramfs-tools/"* "$manual_analysis_folder/var_lib_initramfs-tools/"

   ## }}

   ## {{ debug_folder

   sudo -u "$USERNAME" cp "$mount_folder/usr/share/whonix/build_version" "$debug_folder/usr_share_whonix_build_version"

   sudo -u "$USERNAME" cp "$mount_folder/etc/debootstrap/config" "$debug_folder/etc_debootstrap_config" || true
   sudo -u "$USERNAME" cp "$mount_folder/etc/debootstrap/stages/default_locales" "$debug_folder/etc_debootstrap_stages_default_locales" || true

   sudo -u "$USERNAME" mkdir --parents "$debug_folder/usr_share_doc_whonix-x"
   sudo -u "$USERNAME" cp "$mount_folder/usr/share/doc/whonix-"*"/changelog.Debian.gz" "$debug_folder/usr_share_doc_whonix-x/"
   sudo -u "$USERNAME" mkdir --parents "$debug_folder/var_lib_dpkg_info_whonix-x"
   sudo -u "$USERNAME" cp "$mount_folder/var/lib/dpkg/info/whonix-"*".md5sums" "$debug_folder/var_lib_dpkg_info_whonix-x/"

   ## "|| true", because that file usually gets deleted.
   sudo -u "$USERNAME" cp "$mount_folder/var/cache/apt/pkgcache.bin" "$debug_folder/var_cache_apt_pkgcache.bin" || true

   ## "|| true", because that those files usually get deleted.
   sudo -u "$USERNAME" cp "$mount_folder/var/lib/dpkg/available" "$debug_folder/var_lib_dpkg_available" || true
   sudo -u "$USERNAME" cp "$mount_folder/var/lib/dpkg/available-old" "$debug_folder/var_lib_dpkg_available-old" || true

   ## }}
}

parse_initrd() {
   trap "error_handler" ERR INT TERM

   sudo -u "$USERNAME" cp "$mount_folder/boot/initrd.img"* "$initrd_folder"

   local file

   for file in "$initrd_folder"/*; do
      cd "$extracted_initrd_folder"
      local basename_file="$(basename "$file")"
      sudo -u "$USERNAME" mkdir --parents "$basename_file"
      cd "$basename_file"
      sudo -u "$USERNAME" gzip -dc < "$file" | sudo -u "$USERNAME" cpio -i
   done
}

parse_folder() {
   trap "error_handler" ERR INT TERM

   rm --force "$file_list_file"

   local file

   set +x

   while read -r -d '' file; do
      local absolute_file_name="${file#"$folder"}"

      echo "$absolute_file_name: $file"
      echo "$absolute_file_name" >> "$file_list_file"

      if [ -d "$file" ]; then
         echo "$absolute_file_name: directory" >> "$report_file"
         continue
      fi

      local dir_name="${file%/*}"
      local dir_name_absolute="${dir_name#"$folder"}"

      ## Check if $file is a symlink.
      if [ -h "$file" ]; then
         ## Symlink found...

         ## Not using readlink with -f, so we can compare the relative links.
         local file_link="$(readlink "$file")"
         echo "$absolute_file_name: symlinks_to $file_link" >> "$report_file"

         continue
      fi

      if [ "$skip" = "1" ]; then
         local file_extension="${file##*.}"
         if [ "$file_extension" = "vmdk" ] || [ "$file_extension" = "mf" ] || [ "$file_extension" = "ovf" ]; then
            ## Skipping creating a sha512sum of the vmdk, because that wastes
            ## a lot time and we know in advance, there there will be
            ## differences. (Because there are no deterministically built
            ## operating systems yet.) We mount and analyze that image later,
            ## which is the whole point of this script.
            ##
            ## Skipping creation of sha512sum for mf and ovf file because those
            ## contain checksums and disk uuids which we expect to differ.
            ## Auditors are advised to manually diff those files.
            ##
            ## Still useful to have the file name and "skipped" in the report
            ## file, because this is a reminder to diff the mf and the ofv file
            ## and because the ova could also contain more than the three
            ## expected files.
            echo "$absolute_file_name: skipped" >> "$report_file"
            continue
         fi
      fi

      if [ "$absolute_file_name" = "/dev/xconsole" ]; then
         echo "$absolute_file_name: skipped" >> "$report_file"
         continue
      fi
      if [ "$absolute_file_name" = "/dev/initctl" ]; then
         echo "$absolute_file_name: skipped" >> "$report_file"
         continue
      fi

      local checksum_return
      local checksum_exit_code="0"
      checksum_return="$(sha512sum "$file")" || { local checksum_exit_code="${PIPESTATUS[0]}" ; true; };
      if [ ! "$checksum_exit_code" = "0" ]; then
         ## Handling cases such as:
         ## sha512sum /home/user/whonix_binary/$tempfolder/mount_folder/dev/ida/c2d10p14
         ## sha512sum: /home/user/whonix_binary/$tempfolder/mount_folder/dev/ida/c2d10p14: Permission denied
         echo "$absolute_file_name: $checksum_exit_code" >> "$report_file"
         continue
      else
         local checksum
         read -r checksum _ <<< "$checksum_return"
         echo "$absolute_file_name: $checksum" >> "$report_file"
         continue
      fi
   done < <(find "$folder/" -print0 | sort -z)

   set -x
}

parse_file_list_file() {
   trap "error_handler" ERR INT TERM

   echo "file_list_file:"
   sha512sum "$file_list_file" >> "$report_file"
}

end() {
   trap "error_handler" ERR INT TERM

   unmount_image

   true "${bold}${cyan}INFO: End. No error detected. ${reset}"
}

parse_cmd ${1+"$@"}
preparation

extract_ova
convert_vmdk_to_vdi
convert_vdi_to_raw

parse_file_system
parse_mbr

mount_image

parse_special_files
parse_initrd

skip="1"
folder="$extracted_ova_folder"
parse_folder

skip="0"
folder="$auto_hash_folder"
parse_folder

skip="0"
folder="$extracted_initrd_folder"
parse_folder

skip="0"
folder="$mount_folder"
parse_folder

parse_file_list_file

end
