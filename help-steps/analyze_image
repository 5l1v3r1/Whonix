#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

[ -o xtrace ]
## returns:
## - 0, if -x is set
## - 1, if -x is not set
MINUS_X_SET="$?"

set -x

true "INFO: Currently running script: $0 ${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..

## WHONIX_BUILD_PARSED is read by help-steps/variables (help-steps/parse-cmd)
## and by help-steps/mount-img and help-steps/unmount-img.
export WHONIX_BUILD_PARSED="1"
export VMNAME="internalrun"

cd help-steps
source pre
source variables

script_help() {
   trap "error_handler_general" ERR INT TERM

   echo "\
Required options:
--report reportfile
--tempfolder folder

And either one of the following:
--ova ovafile
--vdi vdifile
--qcow qcowfile
--qcow2 qcow2file
--raw rawfile

Optional options:
--topcomment comment
--endcomment comment
--errorcomment comment
--nodeltempfolder

Usage examples:
From Whonix Source Code Folder...

sudo ./help-steps/analyze_image --ova ~/Whonix-Gateway-7.4.3.ova --report ~/report1 --tempfolder ~/whonix_binary/report_temp1

sudo ./help-steps/analyze_image --ova ~/whonix_binary/Whonix-Gateway-7.4.3.ova --report ~/report2 --tempfolder ~/whonix_binary/report_temp2

sudo ./help-steps/analyze_image --bare-metal --report ~/report3 --tempfolder ~/whonix_binary/report_temp3

sudo ./help-steps/analyze_image --raw ~/whonix_binary/Whonix-Gateway.img --report ~/report4 --tempfolder ~/whonix_binary/report_temp4

sudo ./help-steps/analyze_image --qcow2 ~/Whonix-Gateway.qcow2 --report ~/report5 --tempfolder ~/whonix_binary/report_temp5

From ~/whonix_binary folder...
vbindiff ./report_temp1/manual_analysis_folder/Whonix-Gateway-7.4.3.img.dd.1000000 ./report_temp2/manual_analysis_folder/Whonix-Gateway-7.4.3.img.dd.1000000

See https://www.whonix.org/wiki/Verifiable_Builds
and https://www.whonix.org/wiki/Trust"
}

parse_cmd() {
   trap "error_handler_general" ERR INT TERM

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   if [ "$*" = "" ]; then
      error "no option chosen. Use --help."
   fi

   ## defaults
   ova="0"
   vmdk="0"
   vdi="0"
   qcow="0"
   qcow2="0"
   raw="0"
   if [ "$BARE_METAL" = "" ]; then
      BARE_METAL="0"
   fi

   while :
   do
       case $1 in
           -h | --help | -\?)
               script_help
               exit 0
               ;;
           -o | --ova)
               ova="1"
               vmdk="1"
               vdi="1"
               ova_file="$2"
               to_analyze_file="$2"
               shift 2
               ;;
           -vmdk | --vmdk)
               vmdk="1"
               vdi="1"
               vmdk_file="$2"
               to_analyze_file="$2"
               shift 2
               ;;
           -q | --vdi)
               vdi="1"
               vdi_file="$2"
               to_analyze_file="$2"
               shift 2
               ;;
           -q | --qcow)
               qcow="1"
               qcow_file="$2"
               to_analyze_file="$2"
               shift 2
               ;;
           -q2 | --qcow2)
               qcow2="1"
               qcow2_file="$2"
               to_analyze_file="$2"
               shift 2
               ;;
           -raw | --raw | -img | --img)
               raw="1"
               raw_file="$2"
               to_analyze_file="$2"
               shift 2
               ;;
           -bm | --bare-metal)
               BARE_METAL="1"
               shift
               ;;
           -r | --report)
               report_file="$2"
               shift 2
               ;;
           -t | --tempfolder)
               tempfolder="$2"
               shift 2
               ;;
           -n | --nodeltempfolder)
               nodeltempfolder="1"
               shift
               ;;
           -c | --topcomment)
               topcomment="$2"
               shift 2
               ;;
           -e | --endcomment)
               endcomment="$2"
               shift 2
               ;;
           -f | --errorcomment)
              errorcomment="$2"
              shift 2
              ;;
           --)
               shift
               break
               ;;
           -*)
               error "unknown option: $1"
               ;;
           *)
               break
               ;;
       esac
   done

   if [ "$report_file" = "" ]; then
      echo "${red}${bold} ERROR: no report_file chosen! ${reset}"
      exit 1
   fi
   if [ "$tempfolder" = "" ]; then
      echo "${red}${bold} ERROR: no tempfolder chosen! ${reset}"
      exit 1
   fi
}

error_handler() {
   local exit_code="$?"
   local bash_command="$BASH_COMMAND"

   ## Re-enable xtrace, in case it was deactivated.
   set -x

   unmount_image

   true "
${red}${bold}bash_command${reset}: $bash_command
${red}${bold}exit_code${reset}: $exit_code
"

   if [ "$errorcomment" = "" ]; then
      errorcomment="ERROR: Unfinished report! Error detected!"
   fi

   errorcomment="\
################################################################################
$errorcomment
bash_command: $bash_command
exit_code: $exit_code"

   echo "$errorcomment" >> "$report_file"

   exit 1
}

trap "error_handler" ERR INT TERM

unmount_image() {
   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Unmounting raw image... ${reset}"

   ## WHONIX_BUILD_MOUNT_IMG_FILE us read by help-steps/mount-img
   export WHONIX_BUILD_MOUNT_IMG_FILE="$raw_file"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-img

   #sync
   #sleep 1 &
   #wait "$!"
   #sync

   #local command_v_exit_code="0"
   #command -v guestunmount >/dev/null || { command_v_exit_code="$?" ; true; };

   #if [ "$command_v_exit_code" = "0" ]; then
      #true "${bold}${cyan}INFO: guestunmount available, using it, ok... ${reset}"
      #guestunmount "$mount_folder"
   #else
      ## guestunmount is not available in Debian Wheezy. Only since Debian Jessie.
      #true "${bold}${cyan}INFO: guestunmount not available, using \"fusermount -u\" instead, ok... ${reset}"
      #fusermount -u "$mount_folder"
   #fi

   sync

   true "${bold}${cyan}INFO: Unmounted raw image. ${reset}"
}

preparation() {
   trap "error_handler" ERR INT TERM

   true "${cyan}INFO: user_name is set to $user_name ${reset}"
   true '${cyan}INFO: Benchmarking "sudo -u "$user_name" echo "This is a test echo."" using "time"... ${reset}'
   time sudo -u "$user_name" echo "This is a test echo."

   ## {{ Sanity Tests.

   local tool
   local tools

   tools="
      readlink
      sha512sum
      dirname
      basename
      pwd
      sudo
      echo
      mkdir
      touch
      command
      rm
      cp
      chown
      dd
      sync
      find
      sort
      stat
   "
   for tool in $tools; do
      command -v "$tool" >/dev/null
   done
   unset tool
   unset tools

   if [ "$CI" = "true" ]; then
      ## Tools for VM mouting not installed (not required) in this case.
      true
   elif [ "$BARE_METAL" = "1" ]; then
      ## Tools for VM mouting not installed (not required) in this case.
      true
   else
      tools="
         guestmount
         guestfish
         virt-filesystems
      "
      for tool in $tools; do
         command -v "$tool" >/dev/null
      done
      unset tool
      unset tools
   fi

   ## }}

   rm --force "$report_file"
   sync

   ## The WHONIX_BINARY folder should already be created. Just make sure it
   ## really is to allow running this script in non-Whonix environments as
   ## well.
   sudo -u "$user_name" mkdir --parents "$WHONIX_BINARY"

   sudo -u "$user_name" touch "$report_file"
   sync

   if [ ! "$nodeltempfolder" = "1" ]; then
      true "${cyan} INFO: --nodeltempfolder was not used. Deleting $tempfolder... ${reset}"
      rm --recursive --force "$tempfolder"
   fi

   ## Using export, because mount_folder gets read by help-steps/mount-img and
   ## help-steps/unmount-img.
   if [ "$BARE_METAL" = "1" ]; then
      export mount_folder=""
   else
      export mount_folder="$tempfolder/mount_folder"
   fi

   extracted_ova_folder="$tempfolder/extracted_ova_folder"
   vdi_folder="$tempfolder/vdi_folder"
   qcow_folder="$tempfolder/qcow_folder"
   qcow2_folder="$tempfolder/qcow2_folder"
   raw_folder="$tempfolder/raw_folder"
   auto_hash_folder="$tempfolder/auto_hash_folder"
   initrd_folder="$tempfolder/initrd_folder"
   extracted_initrd_folder="$tempfolder/extracted_initrd_folder"
   debug_folder="$tempfolder/debug_folder"
   manual_analysis_folder="$tempfolder/manual_analysis_folder"

   to_analyze_file_basename="$(basename "$to_analyze_file")"
   file_type_filename_without_extension="${to_analyze_file_basename%.*}"

   if [ "$vmdk_file" = "" ]; then
      vmdk_file="$extracted_ova_folder/$file_type_filename_without_extension-disk1.vmdk"
   fi
   if [ "$vdi_file" = "" ]; then
      vdi_file="$vdi_folder/$file_type_filename_without_extension.vdi"
   fi
   if [ "$qcow_file" = "" ]; then
      qcow_file="$qcow_folder/$file_type_filename_without_extension.qcow"
   fi
   if [ "$qcow2_file" = "" ]; then
      qcow2_file="$qcow2_folder/$file_type_filename_without_extension.qcow2"
   fi
   if [ "$raw_file" = "" ]; then
      raw_file="$raw_folder/$file_type_filename_without_extension.raw"
   fi

   vmdk_file_basename="$(basename "$vmdk_file")"
   vdi_file_basename="$(basename "$vdi_file")"
   qcow_file_basename="$(basename "$qcow_file")"
   qcow2_file_basename="$(basename "$qcow2_file")"
   raw_file_basename="$(basename "$raw_file")"

   sudo -u "$user_name" mkdir --parents "$extracted_ova_folder"
   sudo -u "$user_name" mkdir --parents "$mount_folder" || true
   sudo -u "$user_name" mkdir --parents "$vdi_folder"
   sudo -u "$user_name" mkdir --parents "$qcow_folder"
   sudo -u "$user_name" mkdir --parents "$qcow2_folder"
   sudo -u "$user_name" mkdir --parents "$raw_folder"
   sudo -u "$user_name" mkdir --parents "$auto_hash_folder"
   sudo -u "$user_name" mkdir --parents "$initrd_folder"
   sudo -u "$user_name" mkdir --parents "$extracted_initrd_folder"
   sudo -u "$user_name" mkdir --parents "$debug_folder"
   sudo -u "$user_name" mkdir --parents "$manual_analysis_folder"

   file_list_file="$auto_hash_folder/file_list"
   rm --force "$file_list_file"
   sudo -u "$user_name" touch "$file_list_file"

   sync
}

parse_topcomment() {
   trap "error_handler" ERR INT TERM

   if [ "$topcomment" = "" ]; then
      topcomment="No topcomment."
   fi
   topcomment="\
$topcomment
################################################################################"
   echo "$topcomment" >> "$report_file"
}

extract_ova() {
   trap "error_handler" ERR INT TERM

   if [ "$ova" = "0" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because no ova chosen. ${reset}"
      return 0
   fi

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   cd "$extracted_ova_folder"

   if [ -f "$vdi_file" ]; then
      true "${bold}${cyan}INFO: Unpacking .ova not required, .vdi already exists, skipping. ${reset}"
   else
      if [ ! -f "$ova_file" ]; then
         error "${red}${bold}ERROR: $ova_file does not exist. ${reset}"
      else
         true "${bold}${cyan}INFO: Unpacking ova: $ova_file... (This can take a while.) ${reset}"
         sudo -u "$user_name" tar -xvf "$ova_file"
         true "${bold}${cyan}INFO: Unpacked ova_file. ${reset}"
      fi
   fi
}

convert_vmdk_to_vdi() {
   trap "error_handler" ERR INT TERM

   if [ "$vmdk" = "0" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because no vmdk chosen. ${reset}"
      return 0
   fi

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   if [ ! -f "$vmdk_file" ]; then
      error "${red}${bold}ERROR: vmdk_file: $vmdk_file does not exist. ${reset}"
   fi

   if [ -f "$vdi_file" ]; then
      true "${bold}${cyan}INFO: Converting vmdk to vdi not required, already done, skipping. ${reset}"
   else
      ## Convert .vmdk to .vdi, since there is no Free Software for mounting .vmdk using command line.
      true "${bold}${cyan}INFO: Converting vmdk to vdi... (This can take a while.) ${reset}"

      ## qemu-img version 1.6.1 fails with:
      ## qemu-img: 'image' uses a vmdk feature which is not supported by this qemu version: VMDK version 3
      ## https://bugs.launchpad.net/qemu/+bug/1253465
      #sudo -u "$user_name" qemu-img convert "$vmdk_file" -O raw "$vdi_file"

      ## Debugging.
      sudo -u "$user_name" qemu-img info "$vmdk_file"

      sudo -u "$user_name" VBoxManage clonehd --format VDI "$vmdk_file" "$vdi_file"

      ## Debugging.
      sudo -u "$user_name" qemu-img info "$vdi_file"

      true "${bold}${cyan}INFO: Converted vmdk to vdi. ${reset}"
   fi
}

convert_x_to_raw() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   if [ -f "$raw_file" ]; then
      true "${bold}${cyan}INFO: Converting x to raw not required, already done, skipping. ${reset}"
   else

      if [ "$vdi" = "1" ]; then
         image_type="vdi"
         image_file="$vdi_file"
      fi
      if [ "$qcow" = "1" ]; then
         image_type="qcow"
         image_file="$qcow_file"
      fi
      if [ "$qcow2" = "1" ]; then
         image_type="qcow2"
         image_file="$qcow2_file"
      fi

      true "${bold}${cyan}INFO: Converting $image_type to raw... (This can take a while.) ${reset}"

      ## Debugging.
      sudo -u "$user_name" qemu-img info "$image_file"

      sudo -u "$user_name" qemu-img convert -p -O raw "$image_file" "$raw_file"

      ## Debugging.
      sudo -u "$user_name" qemu-img info "$raw_file"

      true "${bold}${cyan}INFO: Converted $image_type to raw. ${reset}"
   fi
}

mount_image() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Mounting raw image... ${reset}"

   ## WHONIX_BUILD_MOUNT_IMG_FILE us read by help-steps/mount-img
   export WHONIX_BUILD_MOUNT_IMG_FILE="$raw_file"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/mount-img

   #sync
   ## Mounting read-only so the user or script can not accidentally delete
   ## files within the image.
   #guestmount -o allow_other -a "$raw_file" -m /dev/sda1 --ro "$mount_folder"
   #sync

   true "${bold}${cyan}INFO: Mounted raw image. ${reset}"
}

parse_file_system() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Parsing file systems... ${reset}"

   if [ "$vdi" = "1" ]; then
      virt-filesystems -a "$vdi_file" > "$auto_hash_folder/$vdi_file_basename.virt-filesystems-a"
   fi
   if [ "$qcow" = "1" ]; then
      virt-filesystems -a "$qcow_file" > "$auto_hash_folder/$qcow_file_basename.virt-filesystems-a"
   fi
   if [ "$qcow2" = "1" ]; then
      virt-filesystems -a "$qcow2_file" > "$auto_hash_folder/$qcow2_file_basename.virt-filesystems-a"
   fi
   virt-filesystems -a "$raw_file" > "$auto_hash_folder/$raw_file_basename.virt-filesystems-a"

   true "${bold}${cyan}INFO: Parsed file systems. ${reset}"
}

parse_mbr() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   ## For information about disk signatures, see:
   ## https://en.wikipedia.org/wiki/Master_boot_record

   true "${bold}${cyan}INFO: Parsing MBR... ${reset}"

   ## Read ~1 MB at once.
   dd if="$raw_file" of="$manual_analysis_folder/$raw_file_basename.dd.0-1000000" bs=1000000 count=1

   ## Read byte by byte from 0 to 440.
   ## There should be no differences here.
   dd if="$raw_file" of="$manual_analysis_folder/$raw_file_basename.dd.0-440" bs=1 count=440

   ## Read byte by byte from 441 to 444.
   ## Disk signature may differ.
   dd if="$raw_file" of="$manual_analysis_folder/$raw_file_basename.dd.441-444" bs=1 skip=440 count=3

   ## Read byte by byte from 445 to 1000000.
   ## There should be no differences here.
   dd if="$raw_file" of="$manual_analysis_folder/$raw_file_basename.dd.445-1000000" bs=1 skip=444 count=1000000

   true "${bold}${cyan}INFO: Parsed MBR. ${reset}"
}

parse_vbr() {
   trap "error_handler" ERR INT TERM

   if [ "$BARE_METAL" = "1" ]; then
      true "${bold}${cyan}INFO: Skipping $FUNCNAME, because BARE_METAL is 1. ${reset}"
      return 0
   fi

   true "${bold}${cyan}INFO: Parsing VBR... ${reset}"

   if [ "$vdi" = "1" ]; then
      guestfish --ro -a "$vdi_file" run : pread-device /dev/sda1 512 0 > "$auto_hash_folder/$vdi_file_basename.sda1_pread-device.512"
   fi
   if [ "$qcow" = "1" ]; then
      guestfish --ro -a "$qcow_file" run : pread-device /dev/sda1 512 0 > "$auto_hash_folder/$qcow_file_basename.sda1_pread-device.512"
   fi
   if [ "$qcow2" = "1" ]; then
      guestfish --ro -a "$qcow2_file" run : pread-device /dev/sda1 512 0 > "$auto_hash_folder/$qcow2_file_basename.sda1_pread-device.512"
   fi
   guestfish --ro -a "$raw_file" run : pread-device /dev/sda1 512 0 > "$auto_hash_folder/$raw_file_basename.sda1_pread-device.512"

   true "${bold}${cyan}INFO: Parsed VBR. ${reset}"
}

cp_to_user() {
   trap "error_handler" ERR INT TERM

   cp "$1" "$2"
   chown --recursive "$user_name:$user_name" "$2"
}

parse_special_files() {
   trap "error_handler" ERR INT TERM

   ## Allow running this script in non-Whonix environments as well.
   if [ -f "$mount_folder/usr/share/whonix/build_timestamp" ]; then
      cp_to_user "$mount_folder/usr/share/whonix/build_timestamp" "$manual_analysis_folder/usr_share_whonix_build_timestamp"
      echo "$manual_analysis_folder/build_timestamp BEGIN..."
      sudo -u "$user_name" cat "$manual_analysis_folder/usr_share_whonix_build_timestamp"
      echo "END $manual_analysis_folder/build_timestamp."
   else
      msg="Strange, $mount_folder/usr/share/whonix/build_timestamp does not exist. Perhaps not running in Whonix."
      echo "$msg" > "$manual_analysis_folder/usr_share_whonix_build_timestamp"
   fi

   ###########################
   ## manual_analysis_folder #
   ###########################

   if [ "$CI" = "true" ]; then
      ## Reading /etc/shadow does usually not work on CI systems. Not even as root.
      cp_to_user "$mount_folder/etc/shadow" "$manual_analysis_folder/etc_shadow" || true
      cp_to_user "$mount_folder/etc/shadow-" "$manual_analysis_folder/etc_shadow-" || true
   else
      cp_to_user "$mount_folder/etc/shadow" "$manual_analysis_folder/etc_shadow"
      cp_to_user "$mount_folder/etc/shadow-" "$manual_analysis_folder/etc_shadow-"
   fi

   ## "|| true", because CI (Ubuntu) and custom builders may not use sysvinit.
   cp_to_user "$mount_folder/etc/init.d/.depend.boot" "$manual_analysis_folder/etc_init.d_.depend.boot" || true
   cp_to_user "$mount_folder/etc/init.d/.depend.start" "$manual_analysis_folder/etc_init.d_.depend.start" || true
   cp_to_user "$mount_folder/etc/init.d/.depend.stop" "$manual_analysis_folder/etc_init.d_.depend.stop" || true

   cp_to_user "$mount_folder/etc/fstab" "$manual_analysis_folder/etc_fstab"

   ## {{{ /var/lib/initramfs-tools/

   sudo -u "$user_name" mkdir --parents "$manual_analysis_folder/var_lib_initramfs-tools"

   local file_name
   shopt -s nullglob dotglob

   for file_name in "$mount_folder/var/lib/initramfs-tools/"*; do
      cp_to_user "$file_name" "$manual_analysis_folder/var_lib_initramfs-tools/"
   done

   unset file_name
   shopt -u nullglob dotglob

   ## }}}

   #################
   ## debug_folder #
   #################

   ## Allow running this script in non-Whonix environments as well.
   if [ -e "$mount_folder/usr/share/whonix/build_version" ]; then
      cp_to_user "$mount_folder/usr/share/whonix/build_version" "$debug_folder/usr_share_whonix_build_version"
   else
      msg="Strange, $mount_folder/usr/share/whonix/build_version does not exist. Perhaps not running in Whonix."
      echo "$msg" > "$debug_folder/usr_share_whonix_build_version"
   fi

   cp_to_user "$mount_folder/etc/debootstrap/config" "$debug_folder/etc_debootstrap_config" || true
   cp_to_user "$mount_folder/etc/debootstrap/stages/default_locales" "$debug_folder/etc_debootstrap_stages_default_locales" || true

   ## {{{ /usr/share/doc/whonix-*/changelog.Debian.gz

   sudo -u "$user_name" mkdir --parents "$debug_folder/usr_share_doc_whonix-x"

   rm --force "$debug_folder/usr_share_doc_whonix-x/file_list"
   sudo -u "$user_name" touch "$debug_folder/usr_share_doc_whonix-x/file_list"
   local i
   i="0"
   local file_name
   shopt -s nullglob dotglob

   for file_name in "$mount_folder/usr/share/doc/whonix-"*"/changelog.Debian.gz"; do
      i="$(( $i + 1 ))"
      echo "file_name number: $i | file_name: $file_name" >> "$debug_folder/usr_share_doc_whonix-x/file_list"
      cp_to_user "$file_name" "$debug_folder/usr_share_doc_whonix-x/changelog.Debian.gz.$i"
   done

   unset file_name
   shopt -u nullglob dotglob

   ## }}}

   sudo -u "$user_name" mkdir --parents "$debug_folder/var_lib_dpkg_info_whonix-x"

   ## {{{ /var/lib/dpkg/info/whonix-*.md5sums

   local file_name
   shopt -s nullglob dotglob

   for file_name in "$mount_folder/var/lib/dpkg/info/whonix-"*".md5sums"; do
      cp_to_user "$file_name" "$debug_folder/var_lib_dpkg_info_whonix-x/"
   done

   unset file_name
   shopt -u nullglob dotglob

   ## }}}

   ## "|| true", because these files are expected to be deleted.
   ## Copying them out of the image for easier analysis just in case.
   cp_to_user "$mount_folder/var/cache/apt/pkgcache.bin" "$debug_folder/var_cache_apt_pkgcache.bin" || true
   cp_to_user "$mount_folder/var/lib/dpkg/available" "$debug_folder/var_lib_dpkg_available" || true
   cp_to_user "$mount_folder/var/lib/dpkg/available-old" "$debug_folder/var_lib_dpkg_available-old" || true
}

parse_initrd() {
   trap "error_handler" ERR INT TERM

   ## {{{ /boot/*

   ## Debugging.
   ls -la "$mount_folder/boot/" || true

   local file_name
   shopt -s nullglob dotglob

   for file_name in "$mount_folder/boot/initrd.img"*; do
      cp_to_user "$file_name" "$initrd_folder"
   done

   unset file_name
   shopt -u nullglob dotglob

   ## }}}

   ## {{{ $initrd_folder/*

   shopt -s nullglob dotglob
   local file_name

   for file_name in "$initrd_folder"/*; do
      cd "$extracted_initrd_folder"
      true "file_name: $file_name"
      local basename_file
      basename_file="$(basename "$file_name")"
      sudo -u "$user_name" mkdir --parents "$basename_file"
      cd "$basename_file"
      sudo -u "$user_name" gzip -dc < "$file_name" | sudo -u "$user_name" cpio -i
   done

   unset file_name
   shopt -u nullglob dotglob

   ## }}}
}

parse_folder() {
   trap "error_handler" ERR INT TERM

   local i
   i="0"

   if [ "$CI" = "true" ]; then
      ## This is unfortunately required to avoid the following error.
      ## "The log length has exceeded the limit of 4 Megabytes (this usually means that test suite is raising the same exception over and over).
      ## The build has been terminated."
      local parse_max
      parse_max="100"
   fi

   local sub_folder
   sub_folder="$(basename "$folder/")"

   local file_name

   true "${bold}${cyan}INFO: Parsing $sub_folder... ${reset}"
   true "\
${cyan}INFO: \"set +x\", because output would be too verbose. Feel \
free to comment this out.${reset}"
   true "\
${cyan}INFO: To view the progress of this or to check if it hangs, \
you could run:${reset}
ps aux | grep sha512sum
${cyan}(several times in a row) in another terminal window or watch the log using:${reset}
tail -f $report_file"

   set +x

   ## read: using "-d ''" for NUL-delimited output.
   while read -r -d '' file_name; do

      i="$(( $i + 1 ))"

      if [ "$CI" = "true" ]; then
         if [ "$i" -gt "$parse_max" ]; then
            echo "($sub_folder) parse_max $parse_max reached. Skipping the remaining files."
            echo "($sub_folder) parse_max $parse_max reached. Skipping the remaining files." >> "$report_file"
            break
         fi
      fi

      local absolute_file_name
      absolute_file_name="${file_name#"$folder"}"

      ## Too verbose.
      #echo "$absolute_file_name: $file_name"

      echo "$absolute_file_name" >> "$file_list_file"

      local skip_hash="0"
      local dir_name
      if [ -d "$file_name" ]; then
         dir_name="$file_name"
         skip_hash="1"
      else
         dir_name="${file_name%/*}"
      fi

      local dir_name_absolute
      dir_name_absolute="${dir_name#"$folder"}"

      ## Check if $file_name exists. Somehow on Debian Wheezy it does not exit 0 for
      ## symlinks.
      if [ ! -e "$file_name" ]; then
         ## Check if $file_name is a symlink.
         if [ -h "$file_name" ]; then
            ## Symlinks are parsed below.
            true
         else
            msg="($sub_folder) $absolute_file_name | $file_name does_not_exist"
            echo "${cyan} $msg ${reset}"
            echo "$msg" >> "$report_file"
            if [ "$CI" = "true" ] || [ "$BARE_METAL" = "1" ]; then
               ## File might no longer exist on bare metal.
               ## For example "sudo stat /proc/13165" could fail.
               continue
            else
               ## Should not happen inside virtual machine images, because /proc
               ## is not mounted there.
               set -x
               error "$msg"
            fi
         fi
      fi

      ## Get exit code and output of "stat".
      local stat_exit_code
      stat_exit_code="0"
      local stat_output
      stat_output="$(stat \
         --format "\
Access_rights_in_octal: %a \
Number_of_blocks_allocated: %b \
The_size_in_bytes_of_each_block_reported_by_b: %B \
Device_number_in_decimal: %d \
Raw_mode_in_hex: %f \
Group_ID_of_owner: %g \
Number_of_hard_links: %h \
IO_block_size: %o \
Total_size_in_bytes: %s \
Major_device_type_in_hex: %t \
Minor_device_type_in_hex: %T \
User_ID_of_owner: %u \
Type_in_hex: %t" "$file_name" 2>&1)" \
         || { stat_exit_code="${PIPESTATUS[0]}" ; true; };

      ## Initialize local variables.
      local \
         temp1="" Access_rights_in_octal="" \
         temp2="" Number_of_blocks_allocated="" \
         temp3="" The_size_in_bytes_of_each_block_reported_by_b="" \
         temp4="" Device_number_in_decimal="" \
         temp5="" Raw_mode_in_hex="" \
         temp6="" Group_ID_of_owner="" \
         temp7="" Number_of_hard_links="" \
         temp7="" IO_block_size="" \
         temp9="" Total_size_in_bytes="" \
         temp10="" Major_device_type_in_hex="" \
         temp11="" Minor_device_type_in_hex="" \
         temp12="" User_ID_of_owner="" \
         temp13="" Type_in_hex="" \

      ## Read local variables from stat_output.
      read -r \
         temp1 Access_rights_in_octal \
         temp2 Number_of_blocks_allocated \
         temp3 The_size_in_bytes_of_each_block_reported_by_b \
         temp4 Device_number_in_decimal \
         temp5 Raw_mode_in_hex \
         temp6 Group_ID_of_owner \
         temp7 Number_of_hard_links \
         temp8 IO_block_size \
         temp9 Total_size_in_bytes \
         temp10 Major_device_type_in_hex \
         temp11 Minor_device_type_in_hex \
         temp12 User_ID_of_owner \
         temp13 Type_in_hex \
         _ \
         <<< "$stat_output"

      ## Debugging.
      #true "
         #$temp1 Access_rights_in_octal
         #$temp2 Number_of_blocks_allocated
         #$temp3 The_size_in_bytes_of_each_block_reported_by_b
         #$temp4 Device_number_in_decimal
         #$temp5 Raw_mode_in_hex
         #$temp6 Group_ID_of_owner
         #$temp7 Number_of_hard_links
         #$temp8 IO_block_size
         #$temp9 Total_size_in_bytes
         #$temp10 Major_device_type_in_hex
         #$temp11 Minor_device_type_in_hex
         #$temp12 User_ID_of_owner
         #$temp13 Type_in_hex
      #"

      ## Debugging.
      #true "
         #$temp1 $Access_rights_in_octal
         #$temp2 $Number_of_blocks_allocated
         #$temp3 $The_size_in_bytes_of_each_block_reported_by_b
         #$temp4 $Device_number_in_decimal
         #$temp5 $Raw_mode_in_hex
         #$temp6 $Group_ID_of_owner
         #$temp7 $Number_of_hard_links
         #$temp8 $IO_block_size
         #$temp9 $Total_size_in_bytes
         #$temp10 $Major_device_type_in_hex
         #$temp11 $Minor_device_type_in_hex
         #$temp12 $User_ID_of_owner
         #$temp13 $Type_in_hex
      #"

      ## Check if $file_name is a symlink.
      if [ -h "$file_name" ]; then
         ## Symlink found...

         ## Not using readlink with -f, so we can compare the relative links.
         local file_link
         local read_link_exit_code
         read_link_exit_code="0"
         file_link="$(readlink "$file_name" 2>&1)" || { read_link_exit_code="${PIPESTATUS[0]}" ; true; };

         echo "($sub_folder) $absolute_file_name | read_link_exit_code: $read_link_exit_code | stat_output: $stat_output (stat_exit_code: $stat_exit_code) | symlinks_to $file_link" >> "$report_file"

         continue
      fi

      if [ "$skip" = "1" ]; then
         local file_extension
         file_extension="${file_name##*.}"
         if \
            [ "$file_extension" = "vmdk"  ] || \
            [ "$file_extension" = "mf"    ] || \
            [ "$file_extension" = "ovf"   ] || \
            [ "$file_extension" = "qcow"  ] || \
            [ "$file_extension" = "qcow2" ] || \
            [ "$file_extension" = "vdi"   ] || \
            [ "$file_extension" = "raw"   ] || \
            [ "$file_extension" = "img"   ] \
            ; then
               ## Skipping creating a sha512sum of the vmdk, because that wastes
               ## a lot time and we know in advance, there there will be
               ## differences. (Because there are no deterministically built
               ## operating systems yet.) We mount and analyze that image later,
               ## which is the whole point of this script.
               ##
               ## Skipping creation of sha512sum for mf and ovf file because those
               ## contain checksums and disk uuids which we expect to differ.
               ## Auditors are advised to manually diff those files.
               ##
               ## Still useful to have the file name and "skipped" in the report
               ## file, because this is a reminder to diff the mf and the ofv file
               ## and because the ova could also contain more than the three
               ## expected files.
               skip_hash="1"
         fi
      fi

      if [ "$Number_of_blocks_allocated" = "0" ]; then
         ## Check if Number_of_blocks_allocated and Total_size_in_bytes are 0,
         ## to avoid any kind of trickery.
         if [ "$Total_size_in_bytes" = "0" ]; then
            ## Do the probably most expensive (from performance view)
            ## conditions check ("/dev/"**) at the end.
            if [[ "$absolute_file_name" == "/dev/"** ]]; then
               ## File in /dev with size of 0. No need to build a checksum of
               ## these. Also it would be difficult, because for example:
               ## "sudo sha512sum /dev/console",
               ## "sudo sha512sum /dev/xconsole",
               ## "sudo sha512sum /dev/initctl" or
               ## "sudo sha512sum /dev/full" would run forever.
               echo "($sub_folder) $absolute_file_name | skipped_0 | stat_output: $stat_output (stat_exit_code: $stat_exit_code)" >> "$report_file"
               continue
            fi
         fi
      fi

      local maybe_timeout
      if [ "$CI" = "true" ] || [ "$BARE_METAL" = "1" ]; then
         if [[ "$absolute_file_name" == "/dev/"** ]]; then
            ## For example "sudo sha512sum /dev/tty1" would run forever.
            maybe_timeout="timeout --kill-after=1 1"
         elif [[ "$absolute_file_name" == "/proc/"** ]]; then
            ## For example "sudo sha512sum /proc/kmsg" would run forever.
            maybe_timeout="timeout --kill-after=1 1"
         elif [[ "$absolute_file_name" == "/run/"** ]]; then
            ## For example "sha512sum /run/acpi_fakekey" would run forever.
            maybe_timeout="timeout --kill-after=1 1"
         elif [[ "$absolute_file_name" == "/tmp/"** ]]; then
            ## For example "sudo sha512sum /tmp/20140115122244.19545.trace" would run forever.
            maybe_timeout="timeout --kill-after=1 1"
         else
            maybe_timeout=""
         fi
      else
         maybe_timeout=""
      fi

      local checksum_output checksum_exit_code
      if [ "$skip_hash" = "1" ]; then
         checksum_exit_code="skipped_hash"
         checksum_output="skipped_hash"
      else
         checksum_exit_code="0"
         checksum_output="$($maybe_timeout sha512sum "$file_name" 2>&1)" || { checksum_exit_code="${PIPESTATUS[0]}" ; true; };
      fi
      if [ ! "$checksum_exit_code" = "0" ]; then
         ## Handling cases such as:
         ## - sha512sum /home/user/whonix_binary/$tempfolder/mount_folder/dev/ida/c2d10p14
         ##   sha512sum: /home/user/whonix_binary/$tempfolder/mount_folder/dev/ida/c2d10p14: Permission denied
         ## - [ "$skip_hash" = "1" ]
         if [ "$checksum_output" = "" ]; then
            checksum_output="sha512sum_echoed_nothing"
         fi
         echo "($sub_folder) $absolute_file_name | checksum_exit_code: $checksum_exit_code | stat_output: $stat_output (stat_exit_code: $stat_exit_code) | checksum_output: $checksum_output" >> "$report_file"
         continue
      else
         local checksum
         read -r checksum _ <<< "$checksum_output"
         echo "($sub_folder) $absolute_file_name | checksum_exit_code: $checksum_exit_code | stat_output: $stat_output (stat_exit_code: $stat_exit_code) | checksum: $checksum" >> "$report_file"
         continue
      fi

   ## The output of "find" when run on different images is non-deterministic,
   ## therefore piping it through "sort".
   ## find: using "-print0" for NUL-delimited output.
   ## sort: using "-z" for NUL-delimited output.
   done < <(find "$folder/" -print0 | sort -z)

   set -x

   true "${bold}${cyan}Parsed $sub_folder. ${reset}"
}

parse_file_list_file() {
   trap "error_handler" ERR INT TERM

   sha512sum "$file_list_file" >> "$report_file"
}

parse_endcomment() {
   trap "error_handler" ERR INT TERM

   if [ "$endcomment" = "" ]; then
      endcomment="INFO: No endcomment. No error detected."
   fi

   endcomment="\
################################################################################
$endcomment"

   echo "$endcomment" >> "$report_file"
}

end() {
   trap "error_handler" ERR INT TERM

   unmount_image

   true "${bold}${cyan}INFO: End. No error detected. ${reset}"
}

parse_cmd ${1+"$@"}
preparation
parse_topcomment

extract_ova
convert_vmdk_to_vdi
convert_x_to_raw

parse_file_system
parse_vbr
parse_mbr

mount_image

parse_special_files
parse_initrd

skip="1"
folder="$manual_analysis_folder"
parse_folder

skip="1"
folder="$extracted_ova_folder"
parse_folder

skip="1"
folder="$vdi_folder"
parse_folder

skip="1"
folder="$qcow_folder"
parse_folder

skip="1"
folder="$qcow2_folder"
parse_folder

skip="1"
folder="$raw_folder"
parse_folder

skip="0"
folder="$auto_hash_folder"
parse_folder

skip="1"
folder="$debug_folder"
parse_folder

skip="1"
folder="$initrd_folder"
parse_folder

skip="0"
folder="$extracted_initrd_folder"
parse_folder

skip="0"
folder="$mount_folder"
parse_folder

parse_file_list_file

parse_endcomment
end
