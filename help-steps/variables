#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

set +x
#set -x

#echo "INFO: Currently running script: $0"

## Since the script runs as root, we can not use $USER or whoami (that would be set to root).
## This does not work on drone.io systems.
export USERNAME="$(logname)" || true

## drone.io specific workaround.
if [ "$USERNAME" = "" ]; then
   USERNAME="$(whoami)"
   echo "INFO $0: Set USERNAME to $USERNAME using whoami."
fi

export HOMEVAR="/home/$USERNAME"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export WHONIX_SOURCE_FOLDER="$(dirname "$MYDIR")"
export WHONIX_SOURCE_PARENTDIR="$(dirname "$WHONIX_SOURCE_FOLDER")"

export WHONIX_SOURCE_HELP_STEPS_FOLDER="$WHONIX_SOURCE_FOLDER/help-steps"

export WHONIX_BINARY="$HOMEVAR"/whonix_binary

cd "$WHONIX_SOURCE_FOLDER"

export DEBIAN_FRONTEND="noninteractive"

## Disable uwt while building Whonix,
## because it is not functional while building Whonix from source code.
export UWT_DEV_PASSTHROUGH="1"

export WHONIX_DEB_DEBUG="1"

if [ ! "$WHONIX_BUILD_PARSED" = "1" ]; then
   source "$WHONIX_SOURCE_FOLDER"/help-steps/parse-cmd
   export WHONIX_BUILD_PARSED="1"
fi

if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
   export VMNAME="Whonix-Gateway"
   export vmname_lowercase_long_option="--tor-gateway"
   export VMRAM="768"
   export CHROOT_FOLDER=""$WHONIX_BINARY"/"$VMNAME"_image"
fi

if [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
   export VMNAME="Whonix-Workstation"
   export vmname_lowercase_long_option="--tor-workstation"
   export VMRAM="768"
   export CHROOT_FOLDER=""$WHONIX_BINARY"/"$VMNAME"_image"
fi

if [ "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
   export VMNAME="internal"
fi

if [ "$BARE_METAL" = "1" ]; then
   export CHROOT_FOLDER=""
else
   export CHROOT_FOLDER=""$WHONIX_BINARY"/"$VMNAME"_image"
   export BARE_METAL="0"
fi

if [ "$VMNAME" = "unknown" ]; then
   true "variables ERROR: VMNAME is unknown. Please report this bug!"
   exit 1
fi

if [ "$VMNAME" = "internal" ]; then
   echo "variables INFO: Internal run."
else
   true
   true "variables INFO: VMNAME is $VMNAME"
fi

if [ "$VMNAME" = "" ]; then
   MSG="${red}${bold}variables ERROR: VMNAME is empty! Please report this bug!${reset}"
   echo "$MSG"
   bug "$MSG"
fi

if [ "$BARE_METAL" = "1" ]; then
   CHROOT=""
else
   CHROOT="chroot "$CHROOT_FOLDER""
fi

## {{{ whonix_build_ci_detected - CI detection code

if [ "$TRAVIS" = "true" ]; then
   whonix_build_ci_detected="1"
fi

if [ ! "$WERCKER_CACHE_DIR" = "" ]; then
   whonix_build_ci_detected="1"
fi

if [ "$CI" = "true" ]; then
   whonix_build_ci_detected="1"
fi

## }}}

## {{{ update_grub_bin

if [ "$whonix_build_ci_detected" = "1" ] ; then
   ## grub is not available in CI environments.
   update_grub_bin="true"
else
   update_grub_bin="update-grub"
fi

## }}

if [ "$no_git" = "1" ]; then
   git_bin="true"
else
   git_bin="git"
fi

export DEB_INSTALL_FOLDER="/mnt/initialdeb"

export EMPTY_DIR="/tmp/empty"

WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER="/var/lib/whonix/sources_temp_list.d"

WHONIX_SOURCES_LIST_TEMP_BUILD_BASE="$WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER/whonix_temp_initialdeb.list"

## Let's find out on which host operating system the build script is running.
## Using export, so this variable can be read by whonix_shared/usr/share/whonix/chroot-scripts-post.d/70_update_command_not_found.
export whonix_build_on_operating_system="$(lsb_release --short --i)"
## Converting whonix_build_on_operating_system to lower case to make later if comparison easier.
export whonix_build_on_operating_system="${whonix_build_on_operating_system,,}"
## Example whonix_build_on_operating_system: debian
## Example whonix_build_on_operating_system: ubuntu

## Set which /etc/apt/sources.list will be used for building Whonix.
if [ "$whonix_build_on_operating_system" = "ubuntu" ]; then
   ## For Travis CI systems.
   whonix_build_sources_list="whonix_shared/usr/share/whonix/build_sources_ubuntu.list"
else
   whonix_build_sources_list="whonix_shared/usr/share/whonix/build_sources_debian.list"
fi

## export, so chroot-scripts-post.d can read it
export apt_opts="-o Dir::Etc::sourcelist=$EMPTY_DIR -o Dir::Etc::sourceparts=$WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER"

## export, so chroot-scripts-post.d can read it
export extra_apt_timeout="--option Acquire::http::Timeout=180 --option Acquire::ftp::Timeout=180 --option Acquire::Retries=3"

## {{{ whonix_build_closest_git_tag

## travis-ci does not fetch tags. wercker neither.
## Working around:
##    fatal: No tags can describe '6d955433c8111bc53baeb429378f00831c7cbc22'.
##    Try --always, or create some tags.
if [ "$whonix_build_ci_detected" = "1" ] ; then
   ## Temporary workaround.
   whonix_build_closest_git_tag="7"
else
   whonix_build_closest_git_tag="$($git_bin describe --abbrev=0)"
fi

## example whonix_build_closest_git_tag:
## 6

#echo "whonix_build_closest_git_tag: $whonix_build_closest_git_tag"

## }}}

## {{{ whonix_build_old_changelog_version

OIFS="${IFS}"
NIFS=$'\n'

IFS="${NIFS}"

## fallback
export whonix_build_old_changelog_version="ERROR. Please report this bug! whonix_build_old_changelog_version could not be determined."

cd "$WHONIX_SOURCE_FOLDER"

for LINE in $(dpkg-parsechangelog); do
   first="$(echo $LINE | awk '{print $1}')"
   second="$(echo $LINE | awk '{print $2}')"
   first="$(echo $first | awk '{print tolower($0)}')"
   if [ "$first" = "version:" ]; then
      export whonix_build_old_changelog_version="$second"
      break
   fi
done

IFS="${OIFS}"

#echo "whonix_build_old_changelog_version: $whonix_build_old_changelog_version"

## }}}

## {{{ whonix_build_whonix_version_old

## Deactivated. No longer required.

#whonix_build_whonix_version_old="$whonix_build_old_changelog_version"
#whonix_build_whonix_version_old="$(echo "$whonix_build_whonix_version_old" | tr "-" " ")"
#whonix_build_whonix_version_old="$(echo "$whonix_build_whonix_version_old" | awk '{print $1}')"

#echo "whonix_build_whonix_version_old: $whonix_build_whonix_version_old"

## }}}

## {{{ whonix_build_whonix_version_new

## --always because travis-ci does not fetch tags.
temp="$($git_bin describe --always --abbrev=1000000000)"

## Example temp:
## 7-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5

## Using `export`, so whonix_shared/usr/share/whonix/chroot-scripts-post.d/70_log_build_version can read it.
export whonix_build_whonix_version_new="$(echo "$temp" | sed 's/-/./g')"

## Example whonix_build_whonix_version_new:
## 7.13.g20e1b49ff27053784e3e9e163dfd4c98dced73f5

#echo "whonix_build_whonix_version_new: $whonix_build_whonix_version_new"

## }}}

## {{{ whonix_build_old_deb_revision_version

## Deactivated. No longer required.

#whonix_build_old_deb_revision_version="$whonix_build_old_changelog_version"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | tr "-" " ")"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | awk '{print $2}')"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | sed 's/debpackage//g')"

#echo "whonix_build_old_deb_revision_version: ${whonix_build_old_deb_revision_version}"

## }}}

## {{{ whonix_build_new_deb_revision_version

#whonix_build_new_deb_revision_version=$(expr ${whonix_build_old_deb_revision_version} + 1) || true

#whonix_build_new_deb_revision_version="${whonix_build_old_deb_revision_version}"

#echo "whonix_build_new_deb_revision_version: $whonix_build_new_deb_revision_version"

## }}}

## {{{ whonix_build_new_changelog_version

whonix_build_new_deb_revision_version="1"

## You can learn more about epoch here:
## http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version
whonix_build_debian_version_epoch="2"

whonix_build_new_changelog_version="${whonix_build_debian_version_epoch}:${whonix_build_closest_git_tag}-debpackage${whonix_build_new_deb_revision_version}"

echo "whonix_build_new_changelog_version: $whonix_build_new_changelog_version"

## }}}

## {{{ whonix_build_current_git_head

whonix_build_current_git_head="$(git rev-parse HEAD)"

#echo "whonix_build_current_git_head: $whonix_build_current_git_head"

## }}}

## {{{ buildconfig.d

if [ -d "$WHONIX_SOURCE_FOLDER"/buildconfig.d ]; then
   for i in "$WHONIX_SOURCE_FOLDER"/buildconfig.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done
fi

if [ -d ../buildconfig.d ]; then
   for i in ../buildconfig.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done
fi

## }}}

## {{{ fallback variables for debchange (dch), dpkg-buildpackage and debuild

if [ "$DEBFULLNAME" = "" ]; then
   export DEBFULLNAME="Whonix auto generated local APT signing key"
fi

if [ "$DEBEMAIL" = "" ]; then
   export DEBEMAIL="whonix@local-signing.key"
fi

if [ "$DEBUILD_LINTIAN_OPTS" = "" ]; then
   export DEBUILD_LINTIAN_OPTS="-i -I --show-overrides"
fi

if [ "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" = "" ]; then
   export WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY="1"
   export WHONIX_LOCAL_SIGNING_KEY_FOLDER="$WHONIX_BINARY"/gpg-local-signing-key
else
   export WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY="0"
fi

## }}}

## {{{ apt repository variables

if [ "$WHONIX_BUILD_APT_CODENAME" = "" ]; then
   export WHONIX_BUILD_APT_CODENAME="local"
fi

## }}}

## {{{ reprepro variables

if [ "$WHONIX_BUILD_APT_CODENAME" = "local" ]; then
   temp="aptrepo_local"
else
   temp="aptrepo_remote"
fi

export WHONIX_APT_REPOSITORY_FOLDER=""$WHONIX_BINARY"/"$temp""

export WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS="\
         --gnupghome "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
         --basedir ""$WHONIX_SOURCE_FOLDER"/"$temp"" \
         --outdir ""$WHONIX_BINARY"/"$temp"" \
         --dbdir ""$WHONIX_BINARY"/"$temp"/db" \
         --logdir ""$WHONIX_BINARY"/"$temp"/log" "

## }}}

## {{{ WHONIX_BUILD_SKIP_SCRIPTS

## Would be more pretty to have this in the pre script, but the variables script
## runs before pre to get pretty colors.
own_filename="$(basename $0)"
case $WHONIX_BUILD_SKIP_SCRIPTS in
   *$own_filename*) echo "${bold}${green}INFO: Skipping $own_filename, because WHONIX_BUILD_SKIP_SCRIPTS includes it. ${reset}"
                    exit 0
                    ;;
esac

## }}}

set -x
