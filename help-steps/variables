#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set +x
#set -x

#echo "INFO: Currently running script: $0"

## {{ Sanity Tests.

command -v logname >/dev/null
command -v whoami >/dev/null
command -v dirname >/dev/null
command -v basename >/dev/null
command -v awk >/dev/null
command -v grep >/dev/null

## }}

## Since the script runs as root, we can not use $USER or whoami (that would be set to root).
## This does not work on drone.io systems.
user_name="$(logname)" || true
export user_name

## {{ drone.io specific workaround.
if [ "$user_name" = "" ]; then
   user_name="$(whoami)"
   export user_name
   echo "INFO $0: Set user_name to $user_name using whoami."
fi
## }}

export HOMEVAR="/home/$user_name"
export WHONIX_BINARY="$HOMEVAR/whonix_binary"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
WHONIX_SOURCE_FOLDER="$(dirname "$MYDIR")"
export WHONIX_SOURCE_FOLDER

whonix_parent_folder="$(dirname "$WHONIX_SOURCE_FOLDER")"
whonix_dev_meta_files_folder="$whonix_parent_folder/whonix-developer-meta-files"

WHONIX_SOURCE_PARENTDIR="$(dirname "$WHONIX_SOURCE_FOLDER")"
export WHONIX_SOURCE_PARENTDIR

export WHONIX_SOURCE_HELP_STEPS_FOLDER="$WHONIX_SOURCE_FOLDER/help-steps"

cd "$WHONIX_SOURCE_FOLDER"

if [ "$DEBIAN_FRONTEND" = "" ]; then
   export DEBIAN_FRONTEND="noninteractive"
fi

## Avoiding "perl: warning: Setting locale failed." as suggested on
## https://wiki.ubuntu.com/DebootstrapChroot and
## https://lists.debian.org/debian-amd64/2005/08/msg00249.html.
export LANG="C"

## Disable uwt while building Whonix,
## because it is not functional while building Whonix from source code.
echo 'INFO: Setting... export UWT_DEV_PASSTHROUGH="1"'
export UWT_DEV_PASSTHROUGH="1"

if [ "$DEBDEBUG" = "" ]; then
   export DEBDEBUG="1"
fi

if [ ! "$WHONIX_BUILD_PARSED" = "1" ]; then
   MINUS_X_SET="0"
   test -o xtrace || { MINUS_X_SET="$?" ; true; };
   if [ "$MINUS_X_SET" = "0" ]; then
      ## -x was set
      source "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      whonix_build_cmdoptions ${1+"$@"}
   else
      ## -x was not set
      set -x
      source "$WHONIX_SOURCE_FOLDER/help-steps/parse-cmd"
      whonix_build_cmdoptions ${1+"$@"}
      set +x
   fi
   export WHONIX_BUILD_PARSED="1"
fi

if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
   if [ "$VMNAME" = "" ]; then
      export VMNAME="Whonix-Gateway"
   fi
   if [ "$vmname_lowercase_long_option" = "" ]; then
      export vmname_lowercase_long_option="--tor-gateway"
   fi
   if [ "$VMRAM" = "" ]; then
      export VMRAM="768"
   fi
   ## 8 MB is VirtualBox's default. Used up to Whonix 8.
   if [ "$VRAM" = "" ]; then
      export VRAM="8"
   fi
   if [ "$CHROOT_FOLDER" = "" ]; then
      export CHROOT_FOLDER="$WHONIX_BINARY/${VMNAME}_image"
   fi
fi

if [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
   if [ "$VMNAME" = "" ]; then
      export VMNAME="Whonix-Workstation"
   fi
   if [ "$vmname_lowercase_long_option" = "" ]; then
      export vmname_lowercase_long_option="--tor-workstation"
   fi
   if [ "$VMRAM" = "" ]; then
      export VMRAM="768"
   fi
   if [ "$VRAM" = "" ]; then
      export VRAM="128"
   fi
   if [ "$CHROOT_FOLDER" = "" ]; then
      export CHROOT_FOLDER="$WHONIX_BINARY/${VMNAME}_image"
   fi
fi

## vmsize 100 GB does not matter because grml-debootstrap creates sparse files,
## i.e. only space, which gets actually filled up, will take disk space.
if [ "$VMSIZE" = "" ]; then
   export VMSIZE="100G"
fi

if [ "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
   export VMNAME="internal"
fi

if [ "$BARE_METAL" = "1" ]; then
   if [ "$CHROOT_FOLDER" = "" ]; then
      export CHROOT_FOLDER=""
   fi
else
   if [ "$CHROOT_FOLDER" = "" ]; then
      export CHROOT_FOLDER="$WHONIX_BINARY/${VMNAME}_image"
   fi
   if [ "$BARE_METAL" = "" ]; then
      export BARE_METAL="0"
   fi
fi

if [ "$VMNAME" = "unknown" ]; then
   true "variables ERROR: VMNAME is unknown. Please report this bug!"
   exit 1
fi

if [ "$VMNAME" = "internal" ]; then
   echo "variables INFO: Internal run."
else
   true "variables INFO: VMNAME is $VMNAME"
fi

if [ "$VMNAME" = "" ]; then
   MSG="${red}${bold}variables ERROR: VMNAME is empty! Please report this bug!${reset}"
   echo "$MSG"
   bug "$MSG"
fi

if [ "$BARE_METAL" = "1" ]; then
   if [ "$CHROOT" = "" ]; then
      CHROOT=""
   fi
else
   if [ "$CHROOT" = "" ]; then
      CHROOT="chroot $CHROOT_FOLDER"
   fi
fi

## {{{ whonix_build_ci_detected - CI detection code

if [ "$TRAVIS" = "true" ]; then
   whonix_build_ci_detected="1"
fi

if [ ! "$WERCKER_CACHE_DIR" = "" ]; then
   whonix_build_ci_detected="1"
fi

if [ "$CI" = "true" ]; then
   whonix_build_ci_detected="1"
fi

## }}}

## {{{ update_grub_bin

if [ "$whonix_build_ci_detected" = "1" ] ; then
   ## grub is not available in CI environments.
   update_grub_bin="true"
else
   update_grub_bin="update-grub"
fi

## }}

if [ "$no_git" = "1" ]; then
   git_bin="true"
else
   git_bin="git"
fi

## Sanity Test.
command -v "$git_bin" >/dev/null

if [ "$DEB_INSTALL_FOLDER" = "" ]; then
   export DEB_INSTALL_FOLDER="/mnt/initialdeb"
fi

if [ "$EMPTY_DIR" = "" ]; then
   export EMPTY_DIR="/tmp/empty"
fi

if [ "$WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER" = "" ]; then
   WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER="/var/lib/whonix/sources_temp_list.d"
fi

## {{{ whonix_build_on_operating_system

if [ "$whonix_build_on_operating_system_detect_skip" = "1" ]; then
   ## Probably run by prepare-build-machine script.
   ## lsb_release not yet installed.
   whonix_build_on_operating_system="skipped"
else
   ## Let's find out on which host operating system the build script is running.
   whonix_build_on_operating_system="$(lsb_release --short --i)"
   ## Converting whonix_build_on_operating_system to lower case to make later if comparison easier.
   whonix_build_on_operating_system="${whonix_build_on_operating_system,,}"
   ## Example whonix_build_on_operating_system: debian
   ## Example whonix_build_on_operating_system: ubuntu
fi

## }}}

## {{{ whonix_build_closest_git_tag

## travis-ci does not fetch tags. wercker neither.
## Working around:
##    fatal: No tags can describe '6d955433c8111bc53baeb429378f00831c7cbc22'.
##    Try --always, or create some tags.
if [ "$whonix_build_ci_detected" = "1" ] ; then
   ## Temporary workaround.
   if [ "$whonix_build_closest_git_tag" = "" ]; then
      whonix_build_closest_git_tag="100"
   fi
else
   whonix_build_closest_git_tag="$($git_bin describe --abbrev=0)"
fi

## example whonix_build_closest_git_tag:
## 6

#echo "whonix_build_closest_git_tag: $whonix_build_closest_git_tag"

## }}}

## {{{ whonix_build_old_changelog_version

## fallback
export whonix_build_old_changelog_version="ERROR. Please report this bug! whonix_build_old_changelog_version could not be determined."

cd "$WHONIX_SOURCE_FOLDER"

if [ "$no_dpkg_parsechangelog" = "1" ]; then
   whonix_build_old_changelog_version="dpkg-parsechangelog deactivated"
elif [ -f "$WHONIX_SOURCE_FOLDER/debian/changelog" ]; then
   command -v dpkg-parsechangelog >/dev/null
   OIFS="${IFS}"
   NIFS=$'\n'
   IFS="${NIFS}"
   unset line
   for line in $(dpkg-parsechangelog); do
      first="$(echo "$line" | awk '{print $1}')"
      second="$(echo "$line" | awk '{print $2}')"
      first="$(echo "$first" | awk '{print tolower($0)}')"
      if [ "$first" = "version:" ]; then
         export whonix_build_old_changelog_version="$second"
         break
      fi
   done
   unset line

   IFS="${OIFS}"
else
   whonix_build_old_changelog_version="none"
fi

#echo "whonix_build_old_changelog_version: $whonix_build_old_changelog_version"

## }}}

## {{{ whonix_build_whonix_version_old

## Deactivated. No longer required.

#whonix_build_whonix_version_old="$whonix_build_old_changelog_version"
#whonix_build_whonix_version_old="$(echo "$whonix_build_whonix_version_old" | tr "-" " ")"
#whonix_build_whonix_version_old="$(echo "$whonix_build_whonix_version_old" | awk '{print $1}')"

#echo "whonix_build_whonix_version_old: $whonix_build_whonix_version_old"

## }}}

## {{{ anon_dist_build_version

## --always because travis-ci does not fetch tags.
temp="$($git_bin describe --always --abbrev=1000000000)"

## Example temp:
## 7-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5

anon_dist_build_version="$(echo "$temp" | sed 's/-/./g')"
## Using `export`, so whonix_shared/usr/share/whonix/chroot-scripts-post.d/70_log_build_version can read it.
export anon_dist_build_version

## Example anon_dist_build_version:
## 7.13.g20e1b49ff27053784e3e9e163dfd4c98dced73f5

echo "anon_dist_build_version: $anon_dist_build_version"

## }}}

## {{{ whonix_build_old_deb_revision_version

## Deactivated. No longer required.

#whonix_build_old_deb_revision_version="$whonix_build_old_changelog_version"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | tr "-" " ")"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | awk '{print $2}')"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | sed 's/debpackage//g')"

#echo "whonix_build_old_deb_revision_version: ${whonix_build_old_deb_revision_version}"

## }}}

## {{{ whonix_build_new_deb_revision_version

#whonix_build_new_deb_revision_version="$(( ${whonix_build_old_deb_revision_version} + 1 ))"

#whonix_build_new_deb_revision_version="${whonix_build_old_deb_revision_version}"

#echo "whonix_build_new_deb_revision_version: $whonix_build_new_deb_revision_version"

## }}}

## {{{ whonix_build_new_changelog_version

whonix_build_new_deb_revision_version="1"

## You can learn more about epoch here:
## http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version
whonix_build_debian_version_epoch="2"

whonix_build_new_changelog_version="${whonix_build_debian_version_epoch}:${whonix_build_closest_git_tag}-debpackage${whonix_build_new_deb_revision_version}"

echo "whonix_build_new_changelog_version: $whonix_build_new_changelog_version"

## }}}

## {{{ whonix_build_current_git_head

whonix_build_current_git_head="$(git rev-parse HEAD)"

#echo "whonix_build_current_git_head: $whonix_build_current_git_head"

## }}}

## {{{ buildconfig.d

if [ -d "$WHONIX_SOURCE_FOLDER/buildconfig.d" ]; then
   for i in "$WHONIX_SOURCE_FOLDER/buildconfig.d/"*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done
fi

if [ -d /etc/whonix_buildconfig.d ]; then
   for i in /etc/whonix_buildconfig.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done
fi

if [ -d .."/buildconfig.d" ]; then
   for i in .."/buildconfig.d/"*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done
fi

## }}}

## {{{ fallback variables for debchange (dch), dpkg-buildpackage and debuild

if [ "$DEBFULLNAME" = "" ]; then
   export DEBFULLNAME="Whonix auto generated local APT signing key"
fi

if [ "$DEBEMAIL" = "" ]; then
   export DEBEMAIL="whonix@local-signing.key"
fi

if [ "$DEBUILD_LINTIAN_OPTS" = "" ]; then
   export DEBUILD_LINTIAN_OPTS="-i -I --show-overrides"
fi

if [ "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" = "" ]; then
   if [ "$WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY" = "" ]; then
      export WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY="1"
      export WHONIX_LOCAL_SIGNING_KEY_FOLDER="$WHONIX_BINARY/gpg-local-signing-key"
   else
      export WHONIX_BUILD_USE_AUTO_LOCAL_SIGNING_KEY="0"
      ## Do not touch WHONIX_LOCAL_SIGNING_KEY_FOLDER - the user is expected to
      ## set this as a build configuration.
   fi
fi

## }}}

## {{{ apt repository variables

if [ "$WHONIX_BUILD_APT_CODENAME" = "" ]; then
   export WHONIX_BUILD_APT_CODENAME="local"
fi

## }}}

## {{{ reprepro variables

if [ "$WHONIX_BUILD_APT_CODENAME" = "local" ]; then
   temp="aptrepo_local"
else
   temp="aptrepo_remote"
fi

if [ "$WHONIX_APT_REPOSITORY_FOLDER" = "" ]; then
   export WHONIX_APT_REPOSITORY_FOLDER="$WHONIX_BINARY/$temp"
fi

if [ "$WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS" = "" ]; then
   export WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS="\
            --gnupghome "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
            --basedir "$WHONIX_SOURCE_FOLDER/$temp" \
            --outdir "$WHONIX_BINARY/$temp" \
            --dbdir "$WHONIX_BINARY/$temp/db" \
            --logdir "$WHONIX_BINARY/$temp/log" "
fi

## }}}

## {{{ WHONIX_TARGET_ARCH

if [ -z "$WHONIX_TARGET_ARCH" ]; then
   ## Default architecture.
   ## Using export, so it can be read by chroot-post.d scripts.
   export WHONIX_TARGET_ARCH="i386"
fi
if [ "$WHONIX_TARGET_ARCH" = "" ]; then
   ## Default architecture.
   ## Using export, so it can be read by chroot-post.d scripts.
   export WHONIX_TARGET_ARCH="i386"
fi

## }}}

## {{{ SKIP_SCRIPTS

## Would be more pretty to have this in the pre script, but the variables script
## runs before pre to get pretty colors.
own_filename="$(basename $0)"
for skip_script in $SKIP_SCRIPTS; do
   if [ "$own_filename" = "$skip_script" ]; then
      unset skip_script
      echo "${bold}${green}INFO: Skipping $own_filename, because SKIP_SCRIPTS includes it. ${reset}"
      exit 0
   fi
done
unset skip_script

## }}}

set -x
