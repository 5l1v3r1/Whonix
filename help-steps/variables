#!/bin/bash

set +x
#set -x

#echo "INFO: Currently running script: $0"

export USERNAME="user"
export HOMEVAR="/home/"$USERNAME""

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export WHONIX_SOURCE_FOLDER="$(dirname "$MYDIR")"
export WHONIX_SOURCE_PARENTDIR="$(dirname "$WHONIX_SOURCE_FOLDER")"

export WHONIX_BINARY="$HOMEVAR"/whonix_binary

export WHONIX_LOCAL_SIGNING_KEY_FOLDER="$WHONIX_BINARY"/gpg-local-signing-key

export DEBIAN_FRONTEND=noninteractive

export WHONIX_APT_REPOSITORY_FOLDER="$WHONIX_SOURCE_FOLDER"/aptrepo_local

## Disable uwt while building Whonix,
## because it is not functional while building Whonix from source code.
export UWT_DEV_PASSTHROUGH="1"

export WHONIX_DEB_DEBUG="1"

if [ ! "$WHONIX_BUILD_PARSED" = "1" ]; then
   source "$WHONIX_SOURCE_FOLDER"/help-steps/parse-cmd
   export WHONIX_BUILD_PARSED="1"
fi

if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
   export VMNAME="Whonix-Gateway"
   export VMRAM="768"
   export CHROOT_FOLDER=""$WHONIX_BINARY"/"$VMNAME"_image"
fi

if [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
   export VMNAME="Whonix-Workstation"
   export VMRAM="768"
   export CHROOT_FOLDER=""$WHONIX_BINARY"/"$VMNAME"_image"
fi

if [ "$WHONIX_BUILD_INTERNALRUN" = "1" ]; then
   export VMNAME="internal"
fi

if [ "$BARE_METAL" = "1" ]; then
   export CHROOT_FOLDER=""
else
   export CHROOT_FOLDER=""$WHONIX_BINARY"/"$VMNAME"_image"
   export BARE_METAL="0"
fi

if [ "$VMNAME" = "unknown" ]; then
   true "variables ERROR: VMNAME is unknown. Please report this bug!"
   exit 1
fi

if [ "$VMNAME" = "internal" ]; then
   echo "variables INFO: Internal run."
else
   true
   true "variables INFO: VMNAME is $VMNAME"
fi

if [ "$VMNAME" = "" ]; then
   bug "${red}${bold}variables ERROR: VMNAME is empty! Please report this bug!${reset}"
fi

if [ "$BARE_METAL" = "1" ]; then
   CHROOT=""
else
   CHROOT="chroot "$CHROOT_FOLDER"" 
fi

export DEB_INSTALL_FOLDER="/mnt/initialdeb"

export WHONIX_INITIAL_DEB_INSTALL_FOLDER=""$CHROOT_FOLDER"/"$DEB_INSTALL_FOLDER""

export EMPTY_DIR="/tmp/empty"

WHONIX_SOURCES_LIST_TEMP_BUILD_BASE="/etc/apt/sources.list.d/whonix_temp_initialdeb.list"

WHONIX_SOURCES_LIST_TEMP_BUILD_FULL="$CHROOT_FOLDER/$WHONIX_SOURCES_LIST_TEMP_BUILD_BASE"

## {{{ WHONIX_BUILD_WHONIX_VERSION

## Read only FIRST line.
WHONIX_BUILD_WHONIX_VERSION="Could not read local Whonix version file. Please report this bug!"
read -r WHONIX_BUILD_WHONIX_VERSION < ""$WHONIX_SOURCE_FOLDER"/whonix_shared/usr/share/whonix/version"
## Remove ALL spaces.
## Thanks to
## http://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable
WHONIX_BUILD_WHONIX_VERSION="${WHONIX_BUILD_WHONIX_VERSION//[[:space:]]}"

echo "WHONIX_BUILD_WHONIX_VERSION: $WHONIX_BUILD_WHONIX_VERSION"

## }}}

## {{{ WHONIX_BUILD_OLD_CHANGELOG_VERSION

OIFS="${IFS}"
NIFS=$'\n'

IFS="${NIFS}"

## fallback
export WHONIX_BUILD_OLD_CHANGELOG_VERSION="ERROR. Please report this bug! WHONIX_BUILD_OLD_CHANGELOG_VERSION could not be determined."

cd "$WHONIX_SOURCE_FOLDER"

for LINE in $(dpkg-parsechangelog); do
   first="$(echo $LINE | awk '{print $1}')"
   second="$(echo $LINE | awk '{print $2}')"
   first="$(echo $first | awk '{print tolower($0)}')"
   if [ "$first" = "version:" ]; then
      export WHONIX_BUILD_OLD_CHANGELOG_VERSION="$second"
      break
   fi
done

IFS="${OIFS}"

echo "WHONIX_BUILD_OLD_CHANGELOG_VERSION: $WHONIX_BUILD_OLD_CHANGELOG_VERSION"

## }}}

## {{{ WHONIX_BUILD_OLD_DEB_REVISION_VERSION

WHONIX_BUILD_OLD_DEB_REVISION_VERSION="$WHONIX_BUILD_OLD_CHANGELOG_VERSION"
WHONIX_BUILD_OLD_DEB_REVISION_VERSION="$(echo "$WHONIX_BUILD_OLD_DEB_REVISION_VERSION" | tr "-" " ")"
WHONIX_BUILD_OLD_DEB_REVISION_VERSION="$(echo "$WHONIX_BUILD_OLD_DEB_REVISION_VERSION" | awk '{print $2}')"
WHONIX_BUILD_OLD_DEB_REVISION_VERSION="$(echo "$WHONIX_BUILD_OLD_DEB_REVISION_VERSION" | sed 's/debpackage//g')"

echo "WHONIX_BUILD_OLD_DEB_REVISION_VERSION: ${WHONIX_BUILD_OLD_DEB_REVISION_VERSION}"

## }}}

## {{{ WHONIX_BUILD_NEW_DEB_REVISION_VERSION

WHONIX_BUILD_NEW_DEB_REVISION_VERSION=$(expr ${WHONIX_BUILD_OLD_DEB_REVISION_VERSION} + 1) || true

echo "WHONIX_BUILD_NEW_DEB_REVISION_VERSION: $WHONIX_BUILD_NEW_DEB_REVISION_VERSION"

## }}}

## {{{ WHONIX_BUILD_NEW_CHANGELOG_VERSION

WHONIX_BUILD_NEW_CHANGELOG_VERSION=""$WHONIX_BUILD_WHONIX_VERSION""-debpackage""$WHONIX_BUILD_NEW_DEB_REVISION_VERSION""

echo "WHONIX_BUILD_NEW_CHANGELOG_VERSION: $WHONIX_BUILD_NEW_CHANGELOG_VERSION"

## }}}

## {{{ buildconfig.d

if [ -d "$WHONIX_SOURCE_FOLDER"/buildconfig.d ]; then
   for i in "$WHONIX_SOURCE_FOLDER"/buildconfig.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         source "$i"
      fi
   done
fi

## }}}

## {{{ WHONIX_BUILD_SKIP_SCRIPTS

## Would be more pretty to have this in the pre script, but the variables script
## runs before pre to get pretty colors.
own_filename="$(basename $0)"
case $WHONIX_BUILD_SKIP_SCRIPTS in
   *$own_filename*) echo "${bold}${green}INFO: Skipping $own_filename, because WHONIX_BUILD_SKIP_SCRIPTS includes it. ${reset}"
                    exit 0
                    ;;
esac

## }}}

set -x

