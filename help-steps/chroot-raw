#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$MYDIR/pre"
source "$MYDIR/colors"
source "$MYDIR/variables"

error_handler_chroot-raw() {
   : echo "
${red}${bold}BASH_COMMAND${reset}: $BASH_COMMAND
${red}${bold}ERROR $BASH_SOURCE: | caller: $(caller)${reset}
"
   exit 1
}

backup-file-if-exists() {
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   if [ ! -d "$WHONIX_BINARY/system-files-backup/etc" ]; then
      sudo $SUDO_OPTS mkdir --parents "$WHONIX_BINARY/system-files-backup/etc"
   fi

   local base_name
   base_name="$(basename "$1")"

   if [ -f "$1" ]; then
      ## Otherwise /etc/apt/sources.list.backup leaks Whonix build sources inside VM.
      ## Otherwise host /etc/resolv.conf ends up inside VM.
      #cp --no-clobber --preserve "$1" "$1.backup"

      sudo $SUDO_OPTS cp --no-clobber --preserve "$1" "$WHONIX_BINARY/system-files-backup/etc/$base_name"
   else
      true "INFO: file $1 does not exist, skipping backup, ok."
   fi

   true
}

main() {
   trap "error_handler_chroot-raw" ERR INT TERM

   root_check

   sync

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true
   else

      #########
      ## /dev #
      #########

      ## We need /dev for create_swap_file
      ##  "dd if=/dev/zero of=/swapfile1 bs=1024 count=524288"
      mount --bind "/dev" "$CHROOT_FOLDER/dev"

      ##########
      ## /proc #
      ##########

      mount --bind "/proc" "$CHROOT_FOLDER/proc"

      #########
      ## /sys #
      #########

      #mount --bind "/sys" "$CHROOT_FOLDER/sys"

      #############
      ## /dev/pts #
      #############

      ## required by unbuffer
      ## (required by apt-get-wrapper)
      mount --bind "/dev/pts" "$CHROOT_FOLDER/dev/pts"
   fi

   ################
   ## mount files #
   ################

   ## controversy of:
   ## /etc/resolv.conf /etc/hosts /etc/hostname

   ## When we are inside chroot, we need a functional /etc/resolv.conf,
   ## otherwise DNS lookups and subsequently apt-get and curl would be defunct.
   ## On the other hand, we do not want to copy /etc/resolv.conf from the
   ## build machine into chroot, to prevent leaking personal data into chroot.
   ## Therefore we use /etc/resolv.conf from the host inside chroot,
   ## without ever writing it. (Mounting)

   ## When we are inside chroot, we need correct /etc/hosts and /etc/hostname
   ## files, otherwise commands such as:
   ##     sudo -u root echo 'This is a test echo.'
   ## would show for example
   ##     sudo: unable to resolve host debian
   ## and take a long time to complete.

   ## We need two commands to remount an existing file as read only.
   ## Thanks to: https://lwn.net/Articles/281157/
   ## Remount as read only...
   ## Does not work on Debian Wheezy.
   ## Not required anymore. We are not starting any services, DHCP or
   ## networking inside the chroot, so the file should remain untouched.
   #mount -o remount,ro,noload "$CHROOT_FOLDER/etc/resolv.conf"

   sync

   local mount_base_file ok_if_match_file

   ## If Whonix version already inside chroot, don't delete, keep as is, ok.
   ## If host version inside chroot, delete, ok.
   ## Empty version exists inside chroot in any case, ok.
   ## If WHONIX_CHROOT_MOUNT_RESOLV_CONF=0: don't mount; empty file.
   ## If WHONIX_CHROOT_MOUNT_RESOLV_CONF=1: mount host version inside chroot.

   for mount_base_file in "etc/resolv.conf" "etc/hosts" "etc/hostname" ; do
      ## Backup exiting $mount_base_file, so we can later use it to safely mount it inside chroot.
      ## Safely meaning, even if the chroot overwrites it, the host version remains unchanged.
      backup-file-if-exists "/$mount_base_file"

      ## Delete inside chroot if host version leaked into it.
      if diff "/$mount_base_file" "$CHROOT_FOLDER/$mount_base_file" >/dev/null ; then
         true "INFO: Host '/$mount_base_file' matches '$CHROOT_FOLDER/$mount_base_file'"
         for ok_if_match_file in \
            "$WHONIX_SOURCE_FOLDER/packages/anon-gw-dns-conf/etc/resolv.conf.anondist" \
            "$WHONIX_SOURCE_FOLDER/packages/anon-ws-dns-conf/etc/resolv.conf.anondist" \
            "$WHONIX_SOURCE_FOLDER/packages/anon-base-files/etc/hosts.anondist" \
            "$WHONIX_SOURCE_FOLDER/packages/anon-base-files/etc/hostname.anondist" \
            do ;
               if diff "/$mount_base_file" "$ok_if_match_file" >/dev/null ; then
                  true "INFO: But '/$mount_base_file' also matches '$ok_if_match_file', ok."
                  continue
               else
                  true "INFO: Therefore shredding '$CHROOT_FOLDER/$mount_base_file'."
                  ## Delete leaked host $mount_base_file (such as perhaps by grml-debootstrap) inside image.
                  shred -u --zero --force --random-source=/dev/random --verbose "$CHROOT_FOLDER/$mount_base_file"
                  continue
               fi
         done
      else
         true "INFO: Host '/$mount_base_file' does not match '$CHROOT_FOLDER/$mount_base_file', ok"
      fi

      ## File needs to exist to be able to mount in next step.
      touch "$CHROOT_FOLDER/$mount_base_file"

      if [ "$WHONIX_CHROOT_MOUNT_RESOLV_CONF" = "0" ]; then
         true "${cyan}INFO $BASH_SOURCE: Not mounting /$mount_base_file and others inside chroot, because WHONIX_CHROOT_MOUNT_RESOLV_CONF is 0.${reset}"
         continue
      fi

      mount --bind "$WHONIX_BINARY/system-files-backup/$mount_base_file" "$CHROOT_FOLDER/$mount_base_file"
   done

   sync
}

main "$@"
