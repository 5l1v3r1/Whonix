#!/bin/bash

###########################
# debugging
###########################

#set -x

###########################
# error_handler
###########################

error_handler() {
   echo "##################################################"
   echo "aos firewall script failed!"
   echo "##################################################"
   exit 1
}

trap "error_handler" ERR INT TERM

###########################
# comments
###########################

# WARNING! Do not use single quotes/apostrophes in the firwall comments!!!

# --reject-with
# http://ubuntuforums.org/showthread.php?p=12011099

# Set to icmp-admin-prohibited because icmp-port-unreachable caused
# confusion. icmp-port-unreachable looks like a bug while
# icmp-admin-prohibited hopefully makes clear it is by design.

###########################
# /usr/local/bin/aos_firewall
###########################

echo "OK: Loading aos firewall..."

###########################
# USERS
###########################

# Get Tor username, distro specific!
TOR_USER="`id -u debian-tor`"

# Get user uids.
UNSAFE_USER="`id -u unsafe`"
ROOT_USER="`id -u root`"

echo "OK: TOR_USER: $TOR_USER"
echo "OK: UNSAFE_USER: $UNSAFE_USER"
echo "OK: ROOT_USER: $ROOT_USER"

###########################
# interfaces
###########################

# External interface
EXT_IF="eth0"
# Internal interface
INT_IF="eth1"
# Internal "tunnel" interface, usually the same as
# the Internal interface unless using vpn tunnels
# between workstations and gateway
INT_TIF="eth1"

###########################
# NON_TOR_AOSG
###########################

# Destinations you don not want routed through Tor, only for aos-Gateway!
NON_TOR_AOSG="192.168.1.0/24 192.168.0.0/24 127.0.0.0/8"

###########################
# ports
###########################

# Ports used by Tor
# (and used in /etc/torrc and /usr/local/bin/aos_firewall)
#
# The following applications will be separated, preventing identity
# correlation through circuit sharing. 

# Transparent Proxy Ports for aos-Workstation
TRANS_PORT_AOSW="9040"

# DnsPort_AOSW
DNS_PORT_AOSW="53"

# Transparent Proxy Ports for aos-Gateway
TRANS_PORT_AOSG="9041"
DNS_PORT_AOSG="54"

# Socks Ports for per application circuits.
SOCKS_PORT_TB="9100"
SOCKS_PORT_IRC="9101"
SOCKS_PORT_TORBIRDY="9102"
SOCKS_PORT_IM="9103"
SOCKS_PORT_APT_GET="9104"
SOCKS_PORT_GPG="9105"
SOCKS_PORT_SSH="9106"
SOCKS_PORT_GIT="9107"
SOCKS_PORT_HTPDATE="9108"
SOCKS_PORT_WGET="9109"
SOCKS_PORT_AOSCHECK="9110"
SOCKS_PORT_BITCOIN="9111"
SOCKS_PORT_PRIVOXY="9112"
SOCKS_PORT_POLIPO="9113"
SOCKS_PORT_AOS_NEWS="9114"
SOCKS_PORT_TBB_DOWNLOAD="9115"
SOCKS_PORT_TBB_GPG="9116"

#+# #OptionalFeatureNr.4# More Socks Ports.
#+# Additional Socks Ports for per application circuits.
#+# You can add more here but,
#+# you will have to edit the aos-Gateway script:
#+# - /etc/tor/torrc
#+#   - And "sudo service tor reload" afterwards.
#+# - /usr/local/bin/aos_firewall
#+#   - And issue "sudo /usr/local/bin/aos_firewall" afterwards.
#+# you will also have to edit in aos-Workstation script
#+# - the line "extensions.torbutton.banned_ports" (search aos-Workstation script for that term)
#+#   - You can NOT simply add it to about:config in TorBrowser, since users.js will overwrite it.
#+#   - Issue sudo aos-Workstation -uwt to apply afterwards.
#+# - the function "install_uwt_wrappers()"
#+#   - Issue sudo aos-Workstation -uwt to apply afterwards.

###########################
# IPv4 DEFAULTS
###########################

# Set secure defaults.
iptables -P INPUT DROP

# FORWARD rules does not actually do anything if forwarding is disabled. Better be safe just in case.
iptables -P FORWARD DROP

# Only the Tor process is allowed to establish outgoing connections.
iptables -P OUTPUT DROP

###########################
# IPv4 PREPARATIONS
###########################

# Flush old rules.
iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X

############################
# IPv4 DROP INVALID PACKAGES
############################

# DROP INVALID
iptables -A INPUT -m state --state INVALID -j DROP

# DROP INVALID SYN PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
iptables -A INPUT -f -j DROP

# DROP INCOMING MALFORMED XMAS PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

# DROP INCOMING MALFORMED NULL PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

###########################
# IPv4 INPUT
###########################

# Traffic on the loopback interface is accepted.
iptables -A INPUT -i lo -j ACCEPT

# Established incoming connections are accepted.
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# Allow incoming SSH connections on the external interface.
#iptables -A INPUT -i "$EXT_IF" -p tcp --dport 22 -j ACCEPT

# OPTIONAL Allow incoming OpenVPN connections on the external interface.
#iptables -A INPUT -i "$EXT_IF" -p tcp --dport 1194 -j ACCEPT

# Allow TCP to TransPort and DNS traffic to DNSListenAddress.
#+# SEE #OptionalFeatureNr.5#
iptables -A INPUT -i "$INT_TIF" -p udp --dport 53 -j ACCEPT
#+# SEE #OptionalFeatureNr.5#
iptables -A INPUT -i "$INT_IF" -p tcp --dport "$TRANS_PORT_AOSW" -j ACCEPT

# Allow socksified applications.
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_TB" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_IRC" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_TORBIRDY" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_IM" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_APT_GET" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_GPG" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_SSH" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_GIT" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_HTPDATE" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_WGET" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_AOSCHECK" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_BITCOIN" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_PRIVOXY" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_POLIPO" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_AOS_NEWS" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_TBB_DOWNLOAD" -j ACCEPT
iptables -A INPUT -i "$INT_TIF" -p tcp --dport "$SOCKS_PORT_TBB_GPG" -j ACCEPT

#+# #OptionalFeatureNr.4# Allow more Socks Ports.
## See /etc/tor/torrc for more comments.
## Custom Ports #1:
iptables -A INPUT -i "$INT_TIF" -p tcp --match multiport --dports 9150:9159 -j ACCEPT
## Custom Ports #2:
iptables -A INPUT -i "$INT_TIF" -p tcp --match multiport --dports 9160:9169 -j ACCEPT
## Custom Ports #3:
iptables -A INPUT -i "$INT_TIF" -p tcp --match multiport --dports 9170:9179 -j ACCEPT
## Custom Ports #4:
iptables -A INPUT -i "$INT_TIF" -p tcp --match multiport --dports 9180:9189 -j ACCEPT

# Redirect Browser/IRC/TorBirdy, etc. to SocksPort.
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_TB" -j REDIRECT --to-ports "$SOCKS_PORT_TB"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_IRC" -j REDIRECT --to-ports "$SOCKS_PORT_IRC"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_TORBIRDY" -j REDIRECT --to-ports "$SOCKS_PORT_TORBIRDY"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_IM" -j REDIRECT --to-ports "$SOCKS_PORT_IM"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_APT_GET" -j REDIRECT --to-ports "$SOCKS_PORT_APT_GET"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_GPG" -j REDIRECT --to-ports "$SOCKS_PORT_GPG"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_SSH" -j REDIRECT --to-ports "$SOCKS_PORT_SSH"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_GIT" -j REDIRECT --to-ports "$SOCKS_PORT_GIT"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_HTPDATE" -j REDIRECT --to-ports "$SOCKS_PORT_HTPDATE"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_WGET" -j REDIRECT --to-ports "$SOCKS_PORT_WGET"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_AOSCHECK" -j REDIRECT --to-ports "$SOCKS_PORT_AOSCHECK"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_BITCOIN" -j REDIRECT --to-ports "$SOCKS_PORT_BITCOIN"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_PRIVOXY" -j REDIRECT --to-ports "$SOCKS_PORT_PRIVOXY"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_POLIPO" -j REDIRECT --to-ports "$SOCKS_PORT_POLIPO"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_AOS_NEWS" -j REDIRECT --to-ports "$SOCKS_PORT_AOS_NEWS"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_TBB_DOWNLOAD" -j REDIRECT --to-ports "$SOCKS_PORT_TBB_DOWNLOAD"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "$SOCKS_PORT_TBB_GPG" -j REDIRECT --to-ports "$SOCKS_PORT_TBB_GPG"

#+# OptionalFeatureNr.4# More Socks Ports.
#+# Redirection rules for additional SocksPorts.
## See /etc/tor/torrc for more comments.
## Custom Ports #1:
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9150" -j REDIRECT --to-ports "9150"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9151" -j REDIRECT --to-ports "9151"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9152" -j REDIRECT --to-ports "9152"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9153" -j REDIRECT --to-ports "9153"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9154" -j REDIRECT --to-ports "9154"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9155" -j REDIRECT --to-ports "9155"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9156" -j REDIRECT --to-ports "9156"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9157" -j REDIRECT --to-ports "9157"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9158" -j REDIRECT --to-ports "9158"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9159" -j REDIRECT --to-ports "9159"
## Custom Ports #2:
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9160" -j REDIRECT --to-ports "9160"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9161" -j REDIRECT --to-ports "9161"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9162" -j REDIRECT --to-ports "9162"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9163" -j REDIRECT --to-ports "9163"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9164" -j REDIRECT --to-ports "9164"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9165" -j REDIRECT --to-ports "9165"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9166" -j REDIRECT --to-ports "9166"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9167" -j REDIRECT --to-ports "9167"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9168" -j REDIRECT --to-ports "9168"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9169" -j REDIRECT --to-ports "9169"
## Custom Ports #3:
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9170" -j REDIRECT --to-ports "9170"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9171" -j REDIRECT --to-ports "9171"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9172" -j REDIRECT --to-ports "9172"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9173" -j REDIRECT --to-ports "9173"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9174" -j REDIRECT --to-ports "9174"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9175" -j REDIRECT --to-ports "9175"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9176" -j REDIRECT --to-ports "9176"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9177" -j REDIRECT --to-ports "9177"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9178" -j REDIRECT --to-ports "9178"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9179" -j REDIRECT --to-ports "9179"
## Custom Ports #4:
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9180" -j REDIRECT --to-ports "9180"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9181" -j REDIRECT --to-ports "9181"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9182" -j REDIRECT --to-ports "9182"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9183" -j REDIRECT --to-ports "9183"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9184" -j REDIRECT --to-ports "9184"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9185" -j REDIRECT --to-ports "9185"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9186" -j REDIRECT --to-ports "9186"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9187" -j REDIRECT --to-ports "9187"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9188" -j REDIRECT --to-ports "9188"
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --dport "9189" -j REDIRECT --to-ports "9189"

# Redirect remaining DNS traffic to DNSPORT.
# Only user installed applications not configured to use a SocksPort are effected.
#+# SEE #OptionalFeatureNr.5#
iptables -t nat -A PREROUTING -i "$INT_IF" -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT_AOSW"

# Catch all remaining TCP and redirect to TransPort.
# Only user installed applications not configured to use a SocksPort are effected.
#+# SEE #OptionalFeatureNr.5#
iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT_AOSW"

#+# #OptionalFeatureNr.3# Even more restrictive firewall rules.
#+# Replace above rule with a more restrictive one, e.g.:
#iptables -t nat -A PREROUTING -i "$INT_IF" -p tcp --match multiport --dports 80,443 --syn -j REDIRECT --to-ports "$TRANS_PORT_AOSW"

# Log.
#iptables -A INPUT -j LOG --log-prefix "aos blocked input4: "

# Reject anything not explicitly allowed above.
# Drop is better than reject here, because we do not want to reveal its and aos-Gateway.
# (In case someone running aos-Gateway on bare metall.)
iptables -A INPUT -j DROP

###########################
# IPv4 FORWARD
###########################

# Log.
#iptables -A INPUT -j LOG --log-prefix "aos blocked forward4: "

# Reject everything.
iptables -A FORWARD -j REJECT --reject-with icmp-admin-prohibited

###########################
# IPv4 OUTPUT
###########################

# No NAT for Tor itself.
iptables -t nat -A OUTPUT -m owner --uid-owner "$TOR_USER" -j RETURN

# No NAT for unsafe user.
iptables -t nat -A OUTPUT -m owner --uid-owner "$UNSAFE_USER" -j RETURN

# No NAT for root user.
# Out commented by default. For testing/debugging only.
#iptables -t nat -A OUTPUT -m owner --uid-owner "$ROOT_USER" -j RETURN

### Redirect of T-G DNS traffic to DnsPort_AOSG.
### No longer in use. Using SocksPort instant.
##iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports "$DNS_PORT_AOSG"

# Exclude connections to local network, aos-Workstation, VirtualBox from being redirected through Tor.
for NET in $NON_TOR_AOSG; do
 iptables -t nat -A OUTPUT -d "$NET" -j RETURN
done

### Redirect all T-G TCP traffic to TransPort_AOSG.
### No longer in use. Using SocksPort instant.
##iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports "$TRANS_PORT_AOSG"

# Existing connections are accepted.
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Accept outgoing connections to local network, aos-Workstation and VirtualBox.
for NET in $NON_TOR_AOSG; do
 iptables -A OUTPUT -d "$NET" -j ACCEPT
done

# Tor is allowed to connect any outside target.
iptables -A OUTPUT -m owner --uid-owner "$TOR_USER" -j ACCEPT

# unsafe user is allowed to connect any outside target.
iptables -A OUTPUT -m owner --uid-owner "$UNSAFE_USER" -j ACCEPT

# root user is allowed to connect any outside target.
# Out commented by default. For testing/debugging only.
#iptables -A OUTPUT -m owner --uid-owner "$ROOT_USER" -j ACCEPT

# Log.
#iptables -A INPUT -j LOG --log-prefix "aos blocked output4: "

# Reject all other outging traffic.
iptables -A OUTPUT -j REJECT --reject-with icmp-admin-prohibited

###########################
# IPv6
###########################

# Policy DROP for all traffic as fallback.
ip6tables -P INPUT DROP
ip6tables -P OUTPUT DROP
ip6tables -P FORWARD DROP

# Flush old rules.
ip6tables -F
ip6tables -X
ip6tables -t mangle -F
ip6tables -t mangle -X
 
# Allow unlimited access on loopback.
# Not activated, since we do not need it.
#ip6tables -A INPUT -i lo -j ACCEPT
#ip6tables -A OUTPUT -o lo -j ACCEPT

# Log.
#ip6tables -A INPUT -j LOG --log-prefix "aos blocked input6: "
#ip6tables -A INPUT -j LOG --log-prefix "aos blocked output6: "
#ip6tables -A INPUT -j LOG --log-prefix "aos blocked forward6: "

# Drop/reject all other traffic.
ip6tables -A INPUT -j DROP
# --reject-with icmp-admin-prohibited not supported by ip6tables
ip6tables -A OUTPUT -j REJECT
# --reject-with icmp-admin-prohibited not supported by ip6tables
ip6tables -A FORWARD -j REJECT

###########################
# End
###########################

echo "OK: The firewall should not show any messages,"
echo "OK: besides output beginning with prefix OK:..."
echo "OK: aos firewall loaded."

exit 0