#!/bin/sh

# WARNING! Do not use single quotes/apostrophes in the firwall comments!!!

###########################
# /usr/local/bin/aos_firewall
###########################

echo "OK: Loading aos firewall..."

###########################
# VARIABELS
###########################

# Destinations you don not want routed through Tor, only for aos-Gateway!
NON_TOR_AOSG="192.168.1.0/24 192.168.0.0/24 127.0.0.0/8"

# Tor User ID
TOR_UID='$TOR_UID'

# Output TOR_UID for debugging purposes.
echo "OK: TOR_UID: $TOR_UID"

# DnsPort_AOSW
DNS_PORT_AOSW=53

# DnsPort_AOSG
DNS_PORT_AOSG='$DNS_PORT_AOSG'

# TransPort_AOSW
TRANS_PORT_AOSW='$TRANS_PORT_AOSW'

# TransPort_AOSG
TRANS_PORT_AOSG='$TRANS_PORT_AOSG'

# Socks Ports for per application circuits.
SOCKS_PORT_TB='$SOCKS_PORT_TB'
SOCKS_PORT_IRC='$SOCKS_PORT_IRC'
SOCKS_PORT_TORBIRDY='$SOCKS_PORT_TORBIRDY'
SOCKS_PORT_IM='$SOCKS_PORT_IM'
SOCKS_PORT_APT_GET='$SOCKS_PORT_APT_GET'
SOCKS_PORT_GPG='$SOCKS_PORT_GPG'
SOCKS_PORT_SSH='$SOCKS_PORT_SSH'
SOCKS_PORT_GIT='$SOCKS_PORT_GIT'
SOCKS_PORT_HTPDATE='$SOCKS_PORT_HTPDATE'
SOCKS_PORT_WGET='$SOCKS_PORT_WGET'
SOCKS_PORT_TORCHECK='$SOCKS_PORT_TORCHECK'
SOCKS_PORT_BITCOIN='$SOCKS_PORT_BITCOIN'
SOCKS_PORT_PRIVOXY='$SOCKS_PORT_PRIVOXY'
SOCKS_PORT_POLIPO='$SOCKS_PORT_POLIPO'

#+# Additional Socks Ports for per application circuits.
#+# OptionalFeatureNr.4#
#SOCKS_PORT_ETC='$SOCKS_PORT_ETC'

#+# OptionalFeatureNr.1# Isolate Dest Port / Isolate Dest Addr
#SOCKS_PORT_ISOLATE_DEST_PORT='$SOCKS_PORT_ISOLATE_DEST_PORT'
#SOCKS_PORT_ISOLATE_DEST_ADDR='$SOCKS_PORT_ISOLATE_DEST_ADDR'

# External interface
EXT_IF='$EXT_IF'
# Internal interface
INT_IF='$INT_IF'
# Internal tunnel interface
INT_TIF='$INT_TIF'

###########################
# IPv4 DEFAULTS
###########################

# Set secure defaults.
iptables -P INPUT DROP

# FORWARD rules does not actually do anything if forwarding is disabled. Better be safe just in case.
iptables -P FORWARD DROP

# Only the Tor process is allowed to establish outgoing connections.
iptables -P OUTPUT DROP

###########################
# IPv4 PREPARATIONS
###########################

# Flush old rules.
iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X

############################
# IPv4 DROP INVALID PACKAGES
############################

# DROP INVALID
iptables -A INPUT -m state --state INVALID -j DROP

# DROP INVALID SYN PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
iptables -A INPUT -f -j DROP

# DROP INCOMING MALFORMED XMAS PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

# DROP INCOMING MALFORMED NULL PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

###########################
# IPv4 INPUT
###########################

# Traffic on the loopback interface is accepted.
iptables -A INPUT -i lo -j ACCEPT

# Established incoming connections are accepted.
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# Allow incoming SSH connections on the external interface.
iptables -A INPUT -i $EXT_IF -p tcp --dport 22 -j ACCEPT

# OPTIONAL Allow incoming OpenVPN connections on the external interface.
#iptables -A INPUT -i $EXT_IF -p tcp --dport 1194 -j ACCEPT

# Allow TCP to TransPort and DNS traffic to DNSListenAddress.
#+# SEE #OptionalFeatureNr.5#
iptables -A INPUT -i $INT_TIF -p udp --dport 53 -j ACCEPT
#+# SEE #OptionalFeatureNr.5#
iptables -A INPUT -i $INT_IF -p tcp --dport $TRANS_PORT_AOSW -j ACCEPT

# Allow socksified applications.
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_TB -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_IRC -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_TORBIRDY -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_IM -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_APT_GET -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_GPG -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_SSH -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_GIT -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_HTPDATE -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_WGET -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_TORCHECK -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_BITCOIN -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_PRIVOXY -j ACCEPT
iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_POLIPO -j ACCEPT

#+# #OptionalFeatureNr.4# More Socks Ports.
#iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_ETC -j ACCEPT

#OptionalFeatureNr.1# Isolate Dest Port / Isolate Dest Addr
#iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_ISOLATE_DEST_PORT -j ACCEPT
#iptables -A INPUT -i $INT_TIF -p tcp --dport $SOCKS_PORT_ISOLATE_DEST_ADDR -j ACCEPT

# Redirect DNS traffic to DNSPORT.
#+# SEE #OptionalFeatureNr.5#
iptables -t nat -A PREROUTING -i $INT_IF -p udp --dport 53 -j REDIRECT --to-ports $DNS_PORT_AOSW

# Redirect Browser/IRC/TorBirdy, etc. to SocksPort.
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_TB -j REDIRECT --to-ports $SOCKS_PORT_TB
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_IRC -j REDIRECT --to-ports $SOCKS_PORT_IRC
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_TORBIRDY -j REDIRECT --to-ports $SOCKS_PORT_TORBIRDY
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_IM -j REDIRECT --to-ports $SOCKS_PORT_IM
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_APT_GET -j REDIRECT --to-ports $SOCKS_PORT_APT_GET
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_GPG -j REDIRECT --to-ports $SOCKS_PORT_GPG
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_SSH -j REDIRECT --to-ports $SOCKS_PORT_SSH
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_GIT -j REDIRECT --to-ports $SOCKS_PORT_GIT
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_HTPDATE -j REDIRECT --to-ports $SOCKS_PORT_HTPDATE
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_WGET -j REDIRECT --to-ports $SOCKS_PORT_WGET
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_TORCHECK -j REDIRECT --to-ports $SOCKS_PORT_TORCHECK
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_BITCOIN -j REDIRECT --to-ports $SOCKS_PORT_BITCOIN
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_PRIVOXY -j REDIRECT --to-ports $SOCKS_PORT_PRIVOXY
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_POLIPO -j REDIRECT --to-ports $SOCKS_PORT_POLIPO

#+# OptionalFeatureNr.4# More Socks Ports.
#+# Rules for additional SocksPorts.
#iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_ETC -j REDIRECT --to-ports $SOCKS_PORT_ETC

#OptionalFeatureNr.1# Isolate Dest Port / Isolate Dest Addr
#iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_ISOLATE_DEST_PORT -j REDIRECT --to-ports $SOCKS_PORT_ISOLATE_DEST_PORT
#iptables -t nat -A PREROUTING -i $INT_IF -p tcp --dport $SOCKS_PORT_ISOLATE_DEST_ADDR -j REDIRECT --to-ports $SOCKS_PORT_ISOLATE_DEST_ADDR

# Catch all remaining tcp and redirect to TransPort.
#+# SEE #OptionalFeatureNr.5#
iptables -t nat -A PREROUTING -i $INT_IF -p tcp --syn -j REDIRECT --to-ports $TRANS_PORT_AOSW

#+# #OptionalFeatureNr.3# Even more restrictive firewall rules.
#+# Replace above rule with a more restrictive one, e.g.:
#iptables -t nat -A PREROUTING -i $INT_IF -p tcp --match multiport --dports 80,443 --syn -j REDIRECT --to-ports $TRANS_PORT_AOSW

# Reject anything not explicitly allowed above.
iptables -A INPUT -j REJECT --reject-with icmp-port-unreachable

###########################
# IPv4 FORWARD
###########################

iptables -A FORWARD -j REJECT --reject-with icmp-port-unreachable

###########################
# IPv4 OUTPUT
###########################

# No NAT for Tor itself.
iptables -t nat -A OUTPUT -m owner --uid-owner $TOR_UID -j RETURN

# Redirect of T-G DNS traffic to DnsPort_AOSG.
iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports $DNS_PORT_AOSG

# Exclude connections to local network, AOSW, VirtualBox from being redirected through Tor.
for NET in $NON_TOR_AOSG; do
 iptables -t nat -A OUTPUT -d $NET -j RETURN
done

# Redirect all T-G TCP traffic to TransPort_AOSG.
iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TRANS_PORT_AOSG

# Existing connections are accepted.
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Accept outgoing connections to local network, AOSW and VirtualBox.
for NET in $NON_TOR_AOSG; do
 iptables -A OUTPUT -d $NET -j ACCEPT
done

# Tor is allowed to connect any outside target.
iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT

# Reject all other outging traffic.
iptables -A OUTPUT -j REJECT

###########################
# IPv6
###########################

# Policy DROP for all traffic as fallback.
ip6tables -P INPUT DROP
ip6tables -P OUTPUT DROP
ip6tables -P FORWARD DROP

# Flush old rules.
ip6tables -F
ip6tables -X
ip6tables -t mangle -F
ip6tables -t mangle -X
 
# Allow unlimited access on loopback.
#ip6tables -A INPUT -i lo -j ACCEPT
#ip6tables -A OUTPUT -o lo -j ACCEPT

# Logging in case, needed for debugging.
#ip6tables -A INPUT -j LOG

# Drop/reject all other traffic.
ip6tables -A INPUT -j DROP
ip6tables -A OUTPUT -j REJECT --reject-with icmp6-port-unreachable
ip6tables -A FORWARD -j DROP

###########################
# End
###########################

echo "OK: The firewall should show any messages,"
echo "OK: besides output beginning with prefix OK:..."
echo "OK: aos firewall loaded."