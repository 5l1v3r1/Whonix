#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

## Usage:
## From Whonix Source Code Folder...
##    TODO

[ -o xtrace ]
## returns:
## - 0, if -x is set
## - 1, if -x is not set
MINUS_X_SET="$?"

set -x

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..

WHONIX_BUILD_PARSED="1"
ROOT_CHECK="0"
VMNAME="internalrun"

cd help-steps
source pre
source variables

## Default to "no mismatch found" (0) and and increase for every mismatch found.
WHONIX_BUILD_VERIFY_MISMATCH="0"

## Enable (1) or disable (0) debug_echo's.
debug="0"

## TODO:
## - Master Boot Record
## - Volume Boot Record

script_help() {
   ## TODO
   echo "TODO"
}

parse_cmd() {
   trap "error_handler_general" ERR INT TERM

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   if [ "$*" = "" ]; then
      error "no option chosen. Use --help."
   fi

   ## TODO:
   ## - specify .img or .vdi instead of .ova

   while :
   do
       case $1 in
           -h | --help | -\?)
               script_help
               exit 0
               ;;
           -o | --ova)
               ova_file="$2"
               shift 2
               ;;
           -r | --report)
               report_file="$2"
               shift 2
               ;;
           --)
               shift
               break
               ;;
           -*)
               error "unknown option: $1"
               ;;
           *)
               break
               ;;
       esac
   done

   if [ ! -f "$ova_file" ]; then
      echo "ERROR: ova_file $ova_file does not exist!"
      exit 1
   fi
   if [ "$report_file" = "" ]; then
      echo "ERROR: no report_file chosen!"
      exit 1
   fi
}

error_handler() {
   local return_code="$?"
   local bash_command="$BASH_COMMAND"

   unmount_image

   echo "
${red}${bold}bash_command${reset}: $bash_command
${red}${bold}return_code${reset}: $return_code
"

   exit 1
}

trap "error_handler" ERR INT TERM

debug_echo() {
   trap "error_handler" ERR INT TERM
   if [ "$debug" = 1 ]; then
      echo "$*"
   fi
}

unmount_image() {
   true "${bold}${cyan}INFO: Unmounting vdi... ${reset}"

   sync

   guestunmount "$mount_folder"
   sync

   # Delete temporary folder.
   # It did not contain anything. It was only a mount point.
   rm -r "$mount_folder"
   sync

   true "${bold}${cyan}INFO: Unmounted vdi. ${reset}"
}

preparation() {
   trap "error_handler" ERR INT TERM

   rm --force "$report_file"

   extracted_ova_folder="$WHONIX_BINARY/report_temp_extracted_ova_folder"
   mount_folder="$WHONIX_BINARY/report_temp_mount_folder"
   vdi_folder="$WHONIX_BINARY/report_temp_vdi_folder"
   misc_folder="$WHONIX_BINARY/report_temp_misc_folder"

   ova_absolute_filename_without_extension="${ova_file%%.*}"
   folder_name="$(dirname "$ova_file")"
   ova_filename="$(basename "$ova_file")"
   ova_filename_without_extension="${ova_filename%%.*}"

   ## Example ova_absolute_filename_without_extension:
   ## /home/user/whonix_binary/Whonix-Gateway-7

   vmdk_file="$extracted_ova_folder/$ova_filename_without_extension-disk1.vmdk"
   vdi_file="$vdi_folder/$ova_filename_without_extension.vdi"

   sudo -u "$USERNAME" mkdir --parents "$extracted_ova_folder"
   sudo -u "$USERNAME" mkdir --parents "$vdi_folder"
   sudo -u "$USERNAME" mkdir --parents "$mount_folder"
}

extract_ova() {
   trap "error_handler" ERR INT TERM

   cd "$extracted_ova_folder"

   if [ -f "$vdi_file" ]; then
      ## TODO
      true "${bold}${cyan}INFO: Unpacking .ova not required, .vdi already exists, skipping. ${reset}"
   else
      if [ ! -f "$ova_file" ]; then
         error "${red}${bold}ERROR: $ova_file does not exist. ${reset}"
      else
         true "${bold}${cyan}INFO: Unpacking ova: $ova_file... ${reset}"
         sudo -u "$USERNAME" tar -xvf "$ova_file"
         true "${bold}${cyan}INFO: Unpacked ova_file. ${reset}"
      fi
   fi
}

convert_vmdk_to_vdi() {
   trap "error_handler" ERR INT TERM

   if [ ! -f "$vmdk_file" ]; then
      error "${red}${bold}ERROR: vmdk_file: $vmdk_file does not exist. ${reset}"
   fi

   if [ -f "$vdi_file" ]; then
      ## TODO
      true "${bold}${cyan}INFO: Converting vmdk to vdi not required, already done, skipping. ${reset}"
   else
      ## Convert .vmdk to .vdi, since there is no Free Software for mounting .vmdk using command line.
      true "${bold}${cyan}INFO: Converting vmdk to vdi... ${reset}"

      ## qemu-img version 1.6.1 fails with:
      ## qemu-img: 'image' uses a vmdk feature which is not supported by this qemu version: VMDK version 3
      ## https://bugs.launchpad.net/qemu/+bug/1253465
      ## TODO: vdi -> raw
      #sudo -u "$USERNAME" qemu-img convert "$vmdk_file" -O RAW "$vdi_file"

      sudo -u "$USERNAME" VBoxManage clonehd --format VDI "$vmdk_file" "$vdi_file"

      true "${bold}${cyan}INFO: Converted vmdk to vdi. ${reset}"
   fi
}

mount_image() {
   trap "error_handler" ERR INT TERM

   true "${bold}${cyan}INFO: Mounting vdi... ${reset}"

   sync

   guestmount -a "$vdi_file" -m /dev/sda1 --ro "$mount_folder"
   sync

   true "${bold}${cyan}INFO: Mounted vdi. ${reset}"
}

parse_file_system() {
   trap "error_handler" ERR INT TERM

   true "${bold}${cyan}INFO: Parsing file systems... ${reset}"

   local file_systems="$(virt-filesystems -a "$vdi_file")"

   local msg="file_systems: $file_systems"

   echo "$msg" >> "$report_file"

   true "${bold}${cyan}INFO: Parsed file systems. ${reset}"
}

parse_folder() {
   trap "error_handler" ERR INT TERM

   local file

   while read file; do
      echo "file: $file"
      if [ -d "$file" ]; then
         echo "$file: directory" >> "$report_file"
         continue
      fi

      if [ "$skip" = "1" ]; then
         local file_extension="${file#*.}"
         if [ "$file_extension" = "vmdk" ]; then
            ## Skipping creating a sha512sum of the vmdk, because that wastes
            ## a lot time and we know in advance, there there will be
            ## differences. (Because there are no deterministically built
            ## operating systems yet.) We mount and analyze that image later,
            ## which is the whole point of this script.
            echo "$file: skipped" >> "$report_file"
            continue
         fi
      fi

      local checksum_return="$(sha512sum "$file")"
      if [ ! "$PIPESTATUS" = "0" ]; then
         error "Running sha512sum "$file" returned PIPESTATUS $PIPESTATUS"
      fi
      local checksum
      read -r checksum _ <<< "$checksum_return"
      echo "$file: $checksum" >> "$report_file"
   done < <(find "$folder")
}

end() {
   trap "error_handler" ERR INT TERM

   unmount_image

   true "${bold}${cyan}INFO: End. No error detected. ${reset}"
}

parse_cmd ${1+"$@"}
preparation

extract_ova
convert_vmdk_to_vdi

parse_file_system

mount_image

skip="1"
folder="$extracted_ova_folder"
parse_folder

skip="0"
folder="$mount_folder"
parse_folder

end
