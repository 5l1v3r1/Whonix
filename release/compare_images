#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

## Usage:
## From Whonix Source Code Folder...
##    TODO

[ -o xtrace ]
## returns:
## - 0, if -x is set
## - 1, if -x is not set
MINUS_X_SET="$?"

set -x

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..

WHONIX_BUILD_PARSED="1"
ROOT_CHECK="0"
VMNAME="internalrun"

cd help-steps
source pre
source variables

## Default to "no mismatch found" (0) and and increase for every mismatch found.
WHONIX_BUILD_VERIFY_MISMATCH="0"

## Enable (1) or disable (0) debug_echo's.
debug="0"

## TODO:
## - Master Boot Record
## - Volume Boot Record

script_help() {
   ## TODO
   echo "TODO"
}

parse_cmd() {
   trap "error_handler_general" ERR INT TERM

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   if [ "$*" = "" ]; then
      error "no option chosen. Use --help."
   fi

   ## TODO:
   ## - specify .img or .vdi instead of .ova

   while :
   do
       case $1 in
           -h | --help | -\?)
               script_help
               exit 0
               ;;
           -o | --ours)
               ova_ours="$2"
               shift 2
               ;;
           -t | --theirs)
               ova_theirs="$2"
               shift 2
               ;;
           --)
               shift
               break
               ;;
           -*)
               error "unknown option: $1"
               ;;
           *)
               break
               ;;
       esac
   done

   if [ ! -f "$ova_ours" ]; then
      echo "ERROR: ova_ours $ova_ours does not exist!"
      exit 1
   fi
   if [ ! -f "$ova_theirs" ]; then
      echo "ERROR: ova_theirs $ova_theirs does not exist!"
      exit 1
   fi
}

unmount_img() {
   guestunmount "$mount_folder_ours"
   sync

   # Delete temporary folder.
   # It did not contain anything. It was only a mount point.
   rm -r "$mount_folder_ours"
   sync
}

error_handler() {
   local return_code="$?"
   local bash_command="$BASH_COMMAND"

   unmount_img

   echo "
${red}${bold}bash_command${reset}: $bash_command
${red}${bold}return_code${reset}: $return_code
"

   exit 1
}

trap "error_handler" ERR INT TERM

debug_echo() {
   trap "error_handler" ERR INT TERM
   if [ "$debug" = 1 ]; then
      echo "$*"
   fi
}

preparation() {
   trap "error_handler" ERR INT TERM

   declare -A -g remembered_file_our_i
   declare -A -g remembered_file_our_hash
   declare -A -g remembered_file_their_i
   declare -A -g remembered_file_their_hash

   temp_folder="$WHONIX_BINARY/verification"
   sudo -u "$USERNAME" mkdir --parents "$temp_folder"
   cd "$temp_folder"

   mount_folder_ours="$WHONIX_BINARY/verification/ours"
   mount_folder_theirs="$WHONIX_BINARY/verification/theirs"

   ova_absolute_filename_without_extension="${ova_ours%%.*}"
   folder_name="$(dirname $ova_ours)"
   ova_filename="$(basename "$ova_ours")"
   ova_filename_without_extension="${ova_filename%%.*}"

   ## Example ova_absolute_filename_without_extension:
   ## /home/user/whonix_binary/Whonix-Gateway-7

   vdi_ours="$temp_folder/$ova_filename_without_extension.vdi"

   if [ -f "$vdi_ours" ]; then
      true "${bold}${cyan}INFO: Unpacking .ova not required, .vdi already exists, skipping. ${reset}"
   else
      if [ ! -f "$ova_ours" ]; then
         error "${red}${bold}ERROR: $ova_ours does not exist. ${reset}"
      else
         true "${bold}${cyan}INFO: Unpacking our ova: $ova_ours... ${reset}"
         sudo -u "$USERNAME" tar -xvf "$ova_ours"
         true "${bold}${cyan}INFO: Unpacked ova_ours. ${reset}"
      fi
   fi

   vmdk_ours="$temp_folder/$ova_filename_without_extension-disk1.vmdk"

   if [ ! -f "$vmdk_ours" ]; then
      error "${red}${bold}ERROR: vmdk_ours: $vmdk_ours does not exist. ${reset}"
   fi

   if [ -f "$vdi_ours" ]; then
      true "${bold}${cyan}INFO: Converting our_vmdk to .vdi not required, already done, skipping. ${reset}"
   else
      ## Convert .vmdk to .vdi, since there is no Free Software for mounting .vmdk using command line.
      true "${bold}${cyan}INFO: Converting our_vmdk to img... ${reset}"

      ## qemu-img version 1.6.1 fails with:
      ## qemu-img: 'image' uses a vmdk feature which is not supported by this qemu version: VMDK version 3
      ## https://bugs.launchpad.net/qemu/+bug/1253465
      ## TODO: vdi -> raw
      #sudo -u "$USERNAME" qemu-img convert "$vmdk_ours" -O RAW "$vdi_ours"

      sudo -u "$USERNAME" VBoxManage clonehd --format VDI "$vmdk_ours" "$vdi_ours"

      true "${bold}${cyan}INFO: Converted our_vmdk to img. ${reset}"
   fi

   ## TODO: Store for later comparison.
   virt-filesystems -a "$vdi_ours"

   mkdir --parents "$mount_folder_ours"
   sync

   guestmount -a "$vdi_ours" -m /dev/sda1 --ro "$mount_folder_ours"
   sync
}

parse_our_image() {
   trap "error_handler" ERR INT TERM

   local i

   while read i; do
      echo "i: $i"
      remembered_file_our_i[$i]="$i"
      local a="$(sha512sum "$i")"
      local checksum_our
      read -r checksum_our _ <<< "$a"
      remembered_file_our_hash[$i]="$checksum_our"
   done < <(find "$mount_folder_ours")
}

parse_their_image() {
   trap "error_handler" ERR INT TERM

   local i

   while read i; do
      echo "i: $i"
      remembered_file_their_i[$i]="$i"
      local a="$(sha512sum "$i")"
      local checksum_their
      read -r checksum_their _ <<< "$a"
      remembered_file_their_hash[$i]="$checksum_their"
   done < <(find "$mount_folder_theirs")
}

compare_images() {
   trap "error_handler" ERR INT TERM

}

end() {
   trap "error_handler" ERR INT TERM

   unmount_img
}

parse_cmd ${1+"$@"}
preparation
parse_our_image
parse_their_image
compare_images
end
