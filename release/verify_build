#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

[ -o xtrace ]
## returns:
## - 0, if -x is set
## - 1, if -x is not set
MINUX_X_SET="$?"

set -x

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..

cd help-steps
source pre
source variables

## Related links:
## - https://wiki.debian.org/SecureApt#How_to_manually_check_for_package.27s_integrity

## TODO:
## - This is a work in progress.
## - Some TODOs below need to activated.
## - dpkg diverted (symlinked) files may be an issue and may need to be followed.
## - Other symlinked files may be an issue.
## - We could verify files in /var/cache/apt/archives, but this is probably not necessary since we
##   could also use `apt-get autoclean` to get rid of those files before finalizing the image.
## - Check the dpkg status file if it contains all packages and their dependencies of those as claimed
##   in <whonix source code>/debian/control and <whonix source code>/grml_packages.

## TODO lower priority:
## - Older packages can still be downloaded http://snapshot.debian.org/. Use it so verification still works long time after release.
## - /home/user/whonix_binary/verification/Whonix-Workstation.ovf has to be manually audited.

## TODO: Read which version to check or filename from command line?
WHONIX_BUILD_WHONIX_VERSION_NEW="137adretemp"

## TODO: Allow older source folder to be audited by newer build verification script.
#WHONIX_SOURCE_FOLDER=""

WHONIX_BUILD_VERIFY_OLD_PWD="$PWD"

## Default to "no mismatch found" (0) and and increase for every mismatch found.
WHONIX_BUILD_VERIFY_MISMATCH="0"

set_plus_x() {
   if [ "$MINUX_X_SET" = "1" ]; then
      set +x
   fi
}

TEMP_FOLDER=""$WHONIX_BINARY"/verification"
sudo -u "$USERNAME" mkdir --parents "$TEMP_FOLDER"
sudo -u "$USERNAME" mkdir --parents "$TEMP_FOLDER/status"
cd "$TEMP_FOLDER"

declare -A -g remembered_file

declare -A -g pkg_name
declare -A -g pkg_vers_with
declare -A -g pkg_vers_without
declare -A -g pkg_arch
declare -A -g pkg_bp

## export, so help-steps/(un)mount-img opens this one.
export WHONIX_BUILD_MOUNT_IMG_FILE=""$TEMP_FOLDER"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW".img"

if [ -f "$WHONIX_BUILD_MOUNT_IMG_FILE" ]; then
   true "${bold}${cyan}INFO: Unpacking .ova not required, .img already exists, skipping. ${reset}"
else
   ## Unpack .ova...
   ova=""$WHONIX_BINARY"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW".ova"
   if [ ! -f "$ova" ]; then
      error "${red}${bold}ERROR: "$ova" does not exist. ${reset}"
   else
      true "${bold}${cyan}INFO: Unpacking .ova... ${reset}"
      sudo -u "$USERNAME" tar -xvf "$ova"
      true "${bold}${cyan}INFO: Unpacked .ova. ${reset}"
   fi
fi

vmdk=""$TEMP_FOLDER"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW"-disk1.vmdk"

if [ ! -f "$vmdk" ]; then
   error "${red}${bold}ERROR: "$vmdk" does not exist. ${reset}"
fi

if [ -f "$WHONIX_BUILD_MOUNT_IMG_FILE" ]; then
   true "${bold}${cyan}INFO: Converting .vmdk to .img not required, already done, skipping. ${reset}"
else
   ## Convert .vmdk to .img, since there is no Free Software for mounting .vmdk using command line.
   true "${bold}${cyan}INFO: Converting vmdk to img... ${reset}"
   sudo -u "$USERNAME" qemu-img convert "$vmdk" -O raw "$WHONIX_BUILD_MOUNT_IMG_FILE"
   true "${bold}${cyan}INFO: Converted vmdk to img. ${reset}"
fi

error_handler_unmount_verify_build() {
   ## Get out of this folder, so unmounting will work.
   cd "$WHONIX_BUILD_VERIFY_OLD_PWD"
   
   error_handler_unmount
}

trap "error_handler_unmount_verify_build" ERR INT TERM

## TODO: Remove
"$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-img || true

## Mount $WHONIX_BUILD_MOUNT_IMG_FILE
"$WHONIX_SOURCE_HELP_STEPS_FOLDER"/mount-img

## TODO: not required?
## archive keyring
#gpg \
   #--fingerprint \
   #--no-default-keyring \
   #--keyring \
   #/etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg

## TODO: not required?   
## verify Packages file against archive keyring
## TODO: Get rid of || true. The file seems to be signed with two keys, but one is missing.
#gpg \
   #--verify \
   #--no-default-keyring \
   #--keyring \
   #/etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg \
#   /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_InRelease || true

## Print the md5sum of the Packages file which is listed in the Release file.
## TODO: Is this required?
#sed -n "s,main/binary-i386/Packages$,,p" /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_InRelease

## Print the md5sum of the Packages file itself.
## TODO: Is this required?
#md5sum /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_main_binary-i386_Packages
## should work as well:
#sha1sum
#sha256sum

## Enable apt-cacher-ng.
export http_proxy="http://127.0.0.1:3142"

## TODO: Fails with Whonix apt repository enabled, because of apt-cacher-ng. Contacted author.
#apt-get update
   
## Disable apt-cacher-ng.
unset http_proxy

verify_whonix_source_files_helper() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   while read i; do
      if [ -d "$i" ]; then
         continue
      fi
      local base_name="${i##*/}"
      if [ "$base_name" = ".directory" ]; then
         echo "${bold}${cyan}INFO: skipping to diff $i. ${reset}"
         continue
      fi
      local temp="${i#"$1"}"
      local chroot_file="$CHROOT_FOLDER/$temp"
      
      echo "${cyan}INFO${reset}: Diffing original "$i" with "$chroot_file"..."
      
      local diff_return="0"
      diff "$i" "$chroot_file" || { local diff_return="$?" ; true; };

      if [ "$diff_return" = "0" ]; then
         remembered_file[$temp]="0"
      else
         echo "${red}${bold}ERROR: Diff returned "$diff_return" for "$chroot_file"...${reset}"
         WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
         remembered_file[$temp]="1"
      fi
   done < <(find "$1")
}

verify_whonix_source_files() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   ## Setting +x because the for loops otherwise causes too much output.
   set +x

   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      verify_whonix_source_files_helper "$WHONIX_SOURCE_FOLDER/whonix_gateway/"
      verify_whonix_source_files_helper "$WHONIX_SOURCE_FOLDER/whonix_shared/"
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      verify_whonix_source_files_helper "$WHONIX_SOURCE_FOLDER/whonix_workstation/"
      verify_whonix_source_files_helper "$WHONIX_SOURCE_FOLDER/whonix_shared/"
   else
      bug "${red}${bold}ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!${reset}"
   fi

   set -x
}

parse_dpkg_status_file() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   ## Check which packages are claimed to be installed within the build.
   local dpkg_status_folder="$CHROOT_FOLDER/var/lib/dpkg"

   echo "${cyan}${bold}$0 INFO: Parsing $dpkg_status_folder... ${reset}"

   local i=0

   set_plus_x
   
   ## TODO:
   ## Prepare a dpkg status file which includes malformed content,
   ## such as `$(echo a)` to check if no code gets executed.

   while read -r package status arch version_with bp; do
      i="$(expr "$i" + "1")"

      local status_second_char="${status:1:1}"

      if [ "$status_second_char" = "i" ]; then
         ## Ok.
         true
      else
         #echo "${cyan}${bold}$0 INFO: $i: $package | $version_with | $arch | $status | $bp"
         #echo "${red}${bold}$0 INFO: status of $package is $status ${reset}"         
         continue
      fi

      ## Remove "1:", "2:", etc. from version number.
      ## Not sure what 1:version in dpkg status file means.
      local version_second_char="${version_with:1:1}"
      if [ "$version_second_char" = ":" ] ;then
         local version_without="$(echo "$version_with" | awk -F ":" '{ print $2 }')"
      else
         local version_without="$version_with"
      fi

      local first_six_chars="${package:0:6}"
      if [ "${first_six_chars,,}" = "whonix" ]; then
         ## Files coming with Whonix are checked against Whonix source code.
         echo "${cyan}${bold}$0 INFO $i: Skipping $package, because it begins with \"whonix\". ${reset}"
         continue
      fi

      echo "${cyan}$0 INFO: $i Adding package $package | $version_without | $arch | $status | $bp | to the list of packages to be audited. ${reset}"

      pkg_name[$package]="$package"
      pkg_arch[$package]="$arch"
      pkg_vers_with[$package]="$version_with"
      pkg_vers_without[$package]="$version_without"
      pkg_bp[$package]="$bp"
      
      ## TODO: remove
      if [ "$i" -gt "20" ]; then
         break
      fi

   done < <(dpkg-query --admindir="$dpkg_status_folder" --showformat="\${Package}\t\${db:Status-Abbrev}\t\${Architecture}\t\${Version}\t\${binary:Package}\n" --show \*)

   set -x
}

download_packages() {
   trap "error_handler_unmount_verify_build" ERR INT TERM
   
   ## We need to build a long line with all packages.
   ## Otherwise, running `apt-get download` with only one package by line over and over again would takes ages.
   set_plus_x
   
   for pkg in "${pkg_name[@]}"; do
      local status_file="$TEMP_FOLDER/status/${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}_extracted"
      
      if [ -f "$status_file" ]; then
         continue
      fi

      local pkg_list="$pkg_list $pkg=${pkg_vers_with[$pkg]}"
   done  

   set -x
   
   ## Enable apt-cacher-ng.
   export http_proxy="http://127.0.0.1:3142"

   ## TODO: Does this use verification? Temporarily remove archive key to see if verification would fail.
   ## TODO: Since we can not use quotes around $pkg_list we should check that nothing like $(echo test) can be executed.
   ##       For testing, change the path of the dpkg status file to a file in your homefolder and prepare it with things
   ##       like $(echo test).
   if [ "$pkg_list" = "" ]; then
      true "${cyan}${bold}$0 INFO: Already downloaded all required packages. ${reset}"
   else
      sudo -E -u "$USERNAME" \
         apt-get download $pkg_list

      true "${cyan}${bold}$0 INFO: apt_get_return: $? ${reset}"
   fi

   ## TODO: Use snapshot.debian.org?
   ## E: Version '3.8.5-1' for 'logrotate' was not found
   ## E: Version '1.3.0-1' for 'python-six' was not found
   ## E: Version '1.3.0-1' for 'libflac8' was not found
   ##
   ## 137adretemp:
   ## http://snapshot.debian.org/archive/debian/?year=2013;month=9  2013-09-13 03:54:37
   ## deb http://snapshot.debian.org/archive/debian/20130913T035437Z/ testing main
   
   ## Disable apt-cacher-ng.
   unset http_proxy  
}

extract_packages() {
   trap "error_handler_unmount_verify_build" ERR INT TERM
   
   true "${cyan}${bold}$0 INFO: Extracting packages... ${reset}"

   for pkg in "${pkg_name[@]}"; do
   
      local status_file="$TEMP_FOLDER/status/${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}_extracted"
      local extract_folder="$TEMP_FOLDER/${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}"

      if [ -f "$status_file" ]; then
         continue
      fi

      ## Extract the package including the DEBIAN folder.
      sudo -u "$USERNAME" \
         dpkg-deb \
            --raw-extract \
            "${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}.deb" \
            "$extract_folder"

      sudo -u "$USERNAME" \
         touch "$status_file"

   done
   
   true "${cyan}${bold}$0 INFO: Extracted packages. ${reset}"
}

verify_packages() {
   trap "error_handler_unmount_verify_build" ERR INT TERM
   
   true "${cyan}${bold}$0 INFO: Verifying packages... ${reset}"
   
   ## Loading and comparing md5sums from local machine, which is trusted while auditing.
   ## Note: md5 should be fine here. Debian offers only md5 for package contents, but since the whole package
   ## gets verified with stronger hash sums, we can trust the md5sums file.
   ## TODO: Or not. The version inside the image could include a md5 collision.
   
   set_plus_x
   
   for pkg in "${pkg_name[@]}"; do   

      local extract_folder="$TEMP_FOLDER/${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}"
   
      while read i; do
         if [ -d "$i" ]; then
            continue
         fi
         local base_name="${i##*/}"
         local dir_name="${i%/*}"
         local folder_name=${dir_name##*/}

         if [ "$base_name" = "control" ]; then
            continue
         fi

         if [ "$folder_name" = "DEBIAN" ]; then
            local temp="/var/lib/dpkg/info/${pkg_bp[$pkg]}.$base_name"
            local chroot_file="$CHROOT_FOLDER/$temp"
         else
            local temp="${i#"$extract_folder"}"
            local chroot_file="$CHROOT_FOLDER/$temp"
         fi
         
         ## Fallbacks.
         fail="1"
         local symlink="0"
         local i_link=""
         local chroot_file_link=""
         
         ## Check if $i is a symlink.
         if [ -h "$i" ]; then
            local symlink="1"
            local i_link="$(readlink "$i")"
         fi

         ## Check if $chroot_file is a symlink.
         if [ -h "$chroot_file" ]; then
            local symlink="1"
            local chroot_file_link="$(readlink "$chroot_file")"
         fi

         if [ "$symlink" = "1" ]; then
            echo "${cyan}INFO${reset}: comparing symlink of \"$i\" with \"$chroot_file\"..."
            if [ "$i_link" = "$chroot_file_link" ]; then
               ## Ok.
               true "${cyan}INFO${reset}: ok, symlink of \"$i\" matches \"$chroot_file\."
            else
               echo "${red}${bold}ERROR: Mismatch in package \"${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}\". symlink of \"$chroot_file\" should be \"$i_link\" but is \"$chroot_file_link\". ${reset}"
            fi
         else         
            true "${cyan}INFO${reset}: comparing checksum of \"$i\" with \"$chroot_file\"..."

            local a="$(sha512sum "$i")"
            read -r checksum_pkg _ <<< "$a"

            local b="$(sha512sum "$chroot_file")"
            read -r checksum_image _ <<< "$b"

            if [ "$checksum_pkg" = "$checksum_image" ]; then
               local fail="0"
            else
               local fail="1"
               echo "${red}${bold}ERROR: Mismatch in package \"${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}\". checksum of \"$chroot_file\" should be \"$checksum_pkg\" but is \"$checksum_image\". ${reset}"
            fi
            
            if [ "$fail" = "0" ]; then
                remembered_file[$temp]="0"
            else
               WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
               remembered_file[$temp]="1"
            fi
         fi
   
      done < <(find "$extract_folder")
   
   done

   set -x
   
   true "${cyan}${bold}$0 INFO: Verified packages. (This does indicate neither failure nor success. Results at the end.) ${reset}"
}

forgotten_files() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   local folder="$CHROOT_FOLDER"
   
   local j="0"

   set_plus_x

   while read i; do
      local j="$(expr "$j" + "1")"

      ## Debugging.
      ## TODO: Out comment.
      if [ "$j" -gt "10000" ]; then
         break
      fi
      
      if [ -d "$i" ]; then
         continue
      fi
      local base_name="${i##*/}"
      if [ "$base_name" = ".directory" ]; then
         echo "${bold}${cyan}INFO: skipping to diff $i. ${reset}"
         continue
      fi
      local temp="${i#"$folder"}"
      local chroot_file="$CHROOT_FOLDER/$temp"

      #echo "${cyan}INFO${reset}: i: $i temp: $temp"

      if [ "${remembered_file[$temp]}" = "0" ]; then
         true "${cyan}INFO: Already known as good file: $i || temp: $temp ${reset}"         
         continue
      elif [ "${remembered_file[$temp]}" = "1" ]; then
         echo "${cyan}INFO: Already known as bad file, i: $i || temp: $temp ${reset}"
         continue
      else
         echo "${bold}${red}ERROR: Forgotten file i: $i || temp: $temp ${reset}"
         WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
         remembered_file[$temp]="1"
         continue
      fi
   done < <(find "$folder")

   set -x
}

verify_whonix_source_files
parse_dpkg_status_file
download_packages
extract_packages
verify_packages
forgotten_files

## Get out of this folder, so unmounting will work.
cd "$WHONIX_BUILD_VERIFY_OLD_PWD"

## TODO: activate
"$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-img

if [ "$WHONIX_BUILD_VERIFY_MISMATCH" = "0" ]; then
   ## ok, no mismatch
   true "${green}${bold}$0 INFO: No mismatch found. ${reset}"
else
   true "${red}${bold}$0 ERROR: $WHONIX_BUILD_VERIFY_MISMATCH files mismatched! See the red messages above to find out which files. ${reset}"
   exit 1
fi
