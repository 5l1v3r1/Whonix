#!/bin/bash

set -x

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..

cd help-steps
source pre
source variables

## Related links:
## - https://wiki.debian.org/SecureApt#How_to_manually_check_for_package.27s_integrity

## TODO:
## - This is a work in progress.
## - Mismatch variable. Default 0 and set to 1 if a single mismatching file was found.
## - Some TODOs below need to activated.
## - dpkg diverted (symlinked) files may be an issue and may need to be followed.
## - Other symlinked files may be an issue.
## - Code from build-steps.d/2100_verify-files should be reused to check scripts and config files shipped by Whonix source code.
## - We could verify files in /var/cache/apt/archives, but this is probably not necessary since we could also use apt-get autoclean
##   to get rid of those packages before creating an image.

## TODO lower priority:
## - Older packages can still be downloaded http://snapshot.debian.org/. Use it so verification still works long time after release.
## - /home/user/whonix_binary/verification/Whonix-Workstation.ovf has to be manually audited.

## TODO: Read which version to check or filename from command line?
WHONIX_BUILD_WHONIX_VERSION_NEW="0.5.6"

WHONIX_BUILD_VERIFY_OLD_PWD="$(pwd)"

## Default to "no mismatch found" (0) and set to "mismatch found" (1) as soon we catch a single one.
WHONIX_BUILD_VERIFY_MISMATCH="0"

TEMP_FOLDER=""$WHONIX_BINARY"/verification"
mkdir --parents "$TEMP_FOLDER"
cd "$TEMP_FOLDER"

declare -g whonix_verification_remembered_file

if [ -f ""$TEMP_FOLDER"/"$VMNAME".img" ]; then
   ## Unpacking not required, skipping.
   true
else
   if [ ! -f ""$WHONIX_BINARY"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW".ova" ]; then
      ## Unpack .ova.
      error "${red}${bold}ERROR: ""$WHONIX_BINARY"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW".ova" does not exist. ${reset}"
   else
      tar -xvf ""$WHONIX_BINARY"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW".ova"
   fi
fi

if [ ! -f ""$TEMP_FOLDER"/"$VMNAME"-disk1.vmdk" ]; then
   error "${red}${bold}ERROR: "$TEMP_FOLDER"/"$VMNAME"-disk1.vmdk does not exist. ${reset}"
fi

## export, so help-steps/(un)mount-img opens this one.
export WHONIX_BUILD_MOUNT_IMG_FILE=""$TEMP_FOLDER"/"$VMNAME".img"

if [ -f "$WHONIX_BUILD_MOUNT_IMG_FILE" ]; then
   ## Converting .vmdk to .img not required, skipping.
   true
else
   ## Convert .vmdk to .img, since there is no Free Software for mounting .vmdk using command line.
   qemu-img convert ""$TEMP_FOLDER"/"$VMNAME"-disk1.vmdk" -O raw "$WHONIX_BUILD_MOUNT_IMG_FILE"
fi

error_handler_unmount_verify_build() {
   ## Get out of this folder, so unmounting will work.
   cd "$WHONIX_BUILD_VERIFY_OLD_PWD"
   
   error_handler_unmount
}

trap "error_handler_unmount_verify_build" ERR INT TERM

## Mount "$TEMP_FOLDER"/"$VMNAME".img
## TODO activate
#"$WHONIX_SOURCE_HELP_STEPS_FOLDER"/mount-img

## archive keyring
gpg \
   --fingerprint \
   --no-default-keyring \
   --keyring \
   /etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg

## verify Packages file against archive keyring
## TODO: Get rid of || true. The file seems to be signed with two keys, but one is missing.
gpg \
   --verify \
   --no-default-keyring \
   --keyring \
   /etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg \
   /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_InRelease || true

## Print the md5sum of the Packages file which is listed in the Release file.
## TODO: Is this required?
#sed -n "s,main/binary-i386/Packages$,,p" /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_InRelease

## Print the md5sum of the Packages file itself.
## TODO: Is this required?
#md5sum /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_main_binary-i386_Packages
## should work as well:
#sha1sum
#sha256sum

parse_dpkg_status_file() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   ## Check which packages are claimed to be installed.
   
   ## TODO
   #mapfile -t lines < ""$CHROOT_FOLDER"/var/lib/dpkg/status"   
   mapfile -t lines < "/var/lib/dpkg/status"   
  
   for line in "${lines[@]}"; do
      ## example line: Package: bash
      
      first="$(echo "$line" | awk '{print $1}')"   
 
      if [ "${first,,}" = "package:" ]; then
         package="$(echo "$line" | awk '{print $2}')"
         continue
      fi
      
      if [ "${first,,}" = "architecture:" ]; then
         arch="$(echo "$line" | awk '{print $2}')"
         continue
      fi
   
      if [ "${first,,}" = "version:" ]; then
         version="$(echo "$line" | awk '{print $2}')"
         check_package
         continue         
      fi  

   done
}

check_package() {
   trap "error_handler_unmount_verify_build" ERR INT TERM
   
   ## Enable apt-cacher-ng.
   export http_proxy="http://127.0.0.1:3142"

   ## TODO: Does this use verification? Temporarily remove archive key to see if verification would fail.
   apt-get download ""$package"="$version""
   
   ## Disable apt-cacher-ng.
   export unset http_proxy
  
   ## Remove "1:", "2:", etc. from version number.
   ## Not sure what 1:version in dpkg status file means.   
   local second_char="${version:1:1}"   
   if [ "$second_char" = ":" ] ;then
      version="$(echo "$version" | awk -F ":" '{ print $2 }')"
   fi

   ## Extract the package including the DEBIAN folder.
   dpkg-deb --raw-extract "$package"_"$version"_"$arch".deb "$TEMP_FOLDER"/"$package"_"$version"
   
   verify_package
}

verify_package() {
   trap "error_handler_unmount_verify_build" ERR INT TERM
   
   ## Comparing md5sums. Note: md5 should be fine here. Debian offers only md5, but since the whole package
   ## gets verified with stronger hash sums, we can trust the md5.

   mapfile -t lines < ""$TEMP_FOLDER"/"$package"_"$version"/DEBIAN/md5sums"
   
   for line in "${lines[@]}"; do
      ## Example line: 539e96d4fba5635c346a904107b4244e  bin/bash
   
      pkg_content_md5sum="$(echo "$line" | awk '{print $1}')"
      pkg_content_filename="$(echo "$line" | awk '{print $2}')"    
   
      ## TODO
      #md5_actual="$(md5sum "$CHROOT_FOLDER"/"$pkg_content_filename")"
      md5_actual="$(md5sum /"$pkg_content_filename")"
      ## Example md5_actual: 979992095c9402655134383ffbd4cbe8  /usr/share/man/man4/vmmouse.4.gz
            
      md5_actual="$(echo "$md5_actual" | awk '{print $1}')"
      ## Example md5_actual: 979992095c9402655134383ffbd4cbe8
   
      if [ "$pkg_content_md5sum" = "$md5_actual" ]; then
         whonix_verification_remembered_file[$pkg_content_filenam]="0"
      else
         WHONIX_BUILD_VERIFY_MISMATCH="1"
         whonix_verification_remembered_file[$pkg_content_filenam]="1"
         true "${red}${bold}ERROR: Mismatch. md5 of /"$pkg_content_filename" should be "$pkg_content_md5sum" but is "$md5_actual" ${reset}"
      fi
   
   done
}

parse_dpkg_status_file

## Get out of this folder, so unmounting will work.
cd "$WHONIX_BUILD_VERIFY_OLD_PWD"

## TODO: activate
#"$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-img

if [ "$WHONIX_BUILD_VERIFY_MISMATCH" = "0" ]; then
   ## ok, no mismatch
   true "${green}${bold}No mismatch found. ${reset}"   
else
   error "${red}${bold}ERROR: Mismatch found! See the read messages above to find out where."
fi

